function zData = readABF(filename)
% reads data traces generated by pClamp
% zData = readABF(fileName);
% protocol = readABF(fileName, 1);

% display file box if no file given
if nargin == 0
    [FileName,PathName] = uigetfile({'*.abf','ABF Files (*.abf)'}, 'Select file to open');
    if FileName == 0
        return
    end
    filename = strcat(PathName, FileName)
end

if ~libisloaded('abf')
    % load the library
    loadlibrary('ABFFIO.dll', 'ABFFILES.H', 'alias', 'abf');
end

errVal = libpointer('int32Ptr', 0);
dataFormat = libpointer('int32Ptr', 0);
calllib('abf', 'ABF_IsABFFile', filename, dataFormat, errVal);
if errVal.value
    return
end

% set up the empty header data
zData.protocol = struct('ampsCorandomize', 0,...
    'imageScan', 0,...
    'imageDuration', 0,...
    'takeImages', 0,...
    'ampSealTestStep', 0,...
    'ampBridgeBalanceStep', 0,...
    'ampCellLocation', 0,...
    'ampCellLocationName', 'Unkown',...
    'ampStimEnable', 0,...
    'ampMatlabCommand', '',...
    'ampMonitorRin', 0,...
    'ampRandomizeFamilies', 0,...
    'ampTpEnable', 0,...
    'ttlType', 0,...
    'ttlTypeName', 'Unkown',...
    'ttlStepEnable', 0,...
    'ttlIntensity', 0,...
    'ttlPulseEnable', 0,...
    'scanWhichRoi', 0,...
    'timePerPoint', 0,...
    'acquisitionRate', 0,...
    'source', 0,...
    'sourceName', '',...
    'sweepWindow', 0,...
    'channelExtGain', 0,...
    'channelRange', 0,...
    'channelType', 0,...
    'ampTpMaxPer', 0,...
    'ampTpMaxCurrent', 0,...
    'ampTpSetPoint', 0,...
    'ampMatlabStim', 0,...
    'ampPulseEnable', 0,...
    'ampTrainEnable', 0,...
    'ampRampEnable', 0,...
    'ampCosineEnable', 0,...
    'ampSineEnable', 0,...
    'ampPspEnable', 0,...
    'ampStepEnable', 0,...
    'ampStimulus', 0,...
    'ampSaveStim', 0,...
    'ampTelegraph', 0,...
    'ampVoltage', 0,...
    'ampCurrent', 0,...
    'ampType', 0,...
    'ampTypeName', 0,...
    'ttlStepDuration', 0,...
    'ttlStepLatency', 0,...
    'ttlTrainEnable', 0,...
    'ttlArbitraryEnable', 0,...
    'ttlPulseDuration', 0,...
    'ampPulse5Amplitude', 0,...
    'ampPulse5Stop', 0,...
    'ampPulse5Start', 0,...
    'ampPulse4Amplitude', 0,...
    'ampPulse4Stop', 0,...
    'ampPulse4Start', 0,...
    'ampPulse3Amplitude', 0,...
    'ampPulse3Stop', 0,...
    'ampPulse3Start', 0,...
    'ampPulse2Amplitude', 0,...
    'ampPulse2Stop', 0,...
    'ampPulse2Start', 0,...
    'ampPulse1Amplitude', 0,...
    'ampPulse1Stop', 0,...
    'ampPulse1Start', 0,...
    'ampTrainAmplitude', 0,...
    'ampTrainOffDuration', 0,...
    'ampTrainOnDuration', 0,...
    'ampTrainStart', 0,...
    'ampSineAmplitude', 0,...
    'ampSineOffset', 0,...
    'ampSineFrequency', 0,...
    'ampSineStop', 0,...
    'ampSineStart', 0,...
    'ampPspPeak', 0,...
    'ampPspInterval', 0,...
    'ampPspTau', 0,...
    'ampPspNumber', 0,...
    'ampPspStart', 0,...
    'ampRampLogarithmic', 0,...
    'ampRampStopAmplitude', 0,...
    'ampRampStartAmplitude', 0,...
    'ampRampStopTime', 0,...
    'ampRampStartTime', 0,...
    'ampStepLastAmplitude', 0,...
    'ampStep3Amplitude', 0,...
    'ampStep3Stop', 0,...
    'ampStep2Amplitude', 0,...
    'ampStep2Stop', 0,...
    'ampStep1Amplitude', 0,...
    'ampStep1Stop', 0,...
    'ampStep1Start', 0,...
    'ampStepInitialAmplitude', 0,...
    'ampStep3Enable', 0,...
    'ampStep2Enable', 0,...
    'ampStep1Enable', 0,...
    'ttlArbitrary', 0,...
    'ttlBurstEnable', 0,...
    'ttlTrainNumber', 0,...
    'ttlTrainInterval', 0,...
    'ttlTrainLatency', 0,...
    'ttlBurstNumber', 0,...
    'ttlBurstInterval', 0,...
    'ttlEnable', 0,...
    'fileName', 0,...
    'channelNames', 0,...
    'startingValues', 0,...
    'drugTime', 0,...
    'episodeTime', 0,...
    'cellTime', 0,...
    'nextEpisode', 0,...
    'repeatNumber', 0,...
    'matlabCommand', 0,...
    'repeatInterval', 0,...
    'cellName', 0,...
    'drug', 0,...
    'bath', 0,...
    'internal', 0,...
    'ampEnable', 1,...
    'dataFolder', '',...
    'photometryHeader', []);

% see what file type it is
fHandle = libpointer('int32Ptr', 0);
numSamples = libpointer('uint32Ptr', 0);
numEpi = libpointer('int32Ptr', 0);
% third parameter is 1 to just read the header and not allocate space for data
[res abfHeader] = calllib('abf', 'ABF_ReadOpen', filename, fHandle, 0,[], numSamples, numEpi, errVal);

% if no data then leave
if ~calllib('abf', 'ABF_HasData', fHandle, abfHeader)
    return
end

% read out the channel data
dataPtr = libpointer('singlePtr', zeros(get(numSamples), 1));
for iEpi = 1:numEpi
    calllib('abf', 'ABF_ReadChannel', fHandle, abfHeader, chanNum, iEpi, dataPtr, get(numSamples), errVal);
end

% get the stimulus waveforms
ABF_GetWaveform(int nFile, ABFFileHeader *pFH, int nChannel,DWORD dwEpisode, float *pfBuffer, int *pnError);
calllib('abf', 'ABF_GetWaveform', filename);
ABF_GetNumSamples(fHandle, DWORD dwEpisode, UINT *puNumSamples, int *pnError );
% get the time data
timePtr = libpointer('voidPtr',0);
calllib('abf', 'ABF_GetStartTime', filename);
ABF_GetStartTime(int nFile, ABFFileHeader *pFH, int nChannel, DWORD dwSweep, float *pfStartTime, int *pnError);
calllib('abf', 'ABF_GetTimeBase', filename);
zData.xData = get(timePtr) + startTime;

% close the file
calllib('abf', 'ABF_Close', fHandle, errVal);