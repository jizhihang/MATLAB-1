<?xml version="1.0"?>
<doc>
    <assembly>
        <name>mPhysNative</name>
    </assembly>
    <members>
        <member name="T:mPhysNative.Class1">
            <summary>
            The Class1 class provides a CLS compliant, Object (native) interface to the
            M-functions contained in the files:
            <newpara></newpara>
            D:\Synapse System\Matlab Scope for NET oneFolder\mFiles\addBonusText.m
            <newpara></newpara>
            D:\Synapse System\Matlab Scope for NET oneFolder\mFiles\addFunctionToPlot.m
            <newpara></newpara>
            D:\Synapse System\Matlab Scope for NET oneFolder\mFiles\addStatusText.m
            <newpara></newpara>
            D:\Synapse System\Matlab Scope for NET oneFolder\mFiles\addTrace.m
            <newpara></newpara>
            D:\Synapse System\Matlab Scope for NET oneFolder\mFiles\analysisAxis.m
            <newpara></newpara>
            D:\Synapse System\Matlab Scope for NET oneFolder\mFiles\apHeight.m
            <newpara></newpara>
            D:\Synapse System\Matlab Scope for NET oneFolder\mFiles\apRiseFallRatio.m
            <newpara></newpara>
            D:\Synapse System\Matlab Scope for NET oneFolder\mFiles\apThreshold.m
            <newpara></newpara>
            D:\Synapse System\Matlab Scope for NET oneFolder\mFiles\apWidth.m
            <newpara></newpara>
            D:\Synapse System\Matlab Scope for NET oneFolder\mFiles\apWidthHM.m
            <newpara></newpara>
            D:\Synapse System\Matlab Scope for NET oneFolder\mFiles\autoCorrelate.m
            <newpara></newpara>
            D:\Synapse System\Matlab Scope for NET oneFolder\mFiles\autoNotch.m
            <newpara></newpara>
            D:\Synapse System\Matlab Scope for NET oneFolder\mFiles\bandStop.m
            <newpara></newpara>
            D:\Synapse System\Matlab Scope for NET oneFolder\mFiles\benConv.m
            <newpara></newpara>
            D:\Synapse System\Matlab Scope for NET oneFolder\mFiles\benDisplayString.m
            <newpara></newpara>
            D:\Synapse System\Matlab Scope for NET oneFolder\mFiles\benEvents.m
            <newpara></newpara>
            D:\Synapse System\Matlab Scope for NET oneFolder\mFiles\benEventsOld.m
            <newpara></newpara>
            D:\Synapse System\Matlab Scope for NET oneFolder\mFiles\BenFitLine.m
            <newpara></newpara>
            D:\Synapse System\Matlab Scope for NET oneFolder\mFiles\BenFitPolynomial.m
            <newpara></newpara>
            D:\Synapse System\Matlab Scope for NET oneFolder\mFiles\benGenerateStim.m
            <newpara></newpara>
            D:\Synapse System\Matlab Scope for NET oneFolder\mFiles\benPeakAllPoints.m
            <newpara></newpara>
            D:\Synapse System\Matlab Scope for NET oneFolder\mFiles\benPeakAllPointsTenths.m
            <newpara></newpara>
            D:\Synapse System\Matlab Scope for NET oneFolder\mFiles\benProtocolViewer.m
            <newpara></newpara>
            D:\Synapse System\Matlab Scope for NET oneFolder\mFiles\benStats1Array.m
            <newpara></newpara>
            D:\Synapse System\Matlab Scope for NET oneFolder\mFiles\benStats2Arrays.m
            <newpara></newpara>
            D:\Synapse System\Matlab Scope for NET oneFolder\mFiles\BenVectorMedian.m
            <newpara></newpara>
            D:\Synapse System\Matlab Scope for NET oneFolder\mFiles\BenWrapPolyFit.m
            <newpara></newpara>
            D:\Synapse System\Matlab Scope for NET oneFolder\mFiles\BenWrapSGolayFilt.m
            <newpara></newpara>
            D:\Synapse System\Matlab Scope for NET oneFolder\mFiles\besselFilter.m
            <newpara></newpara>
            D:\Synapse System\Matlab Scope for NET oneFolder\mFiles\blankAPsWithConstant.m
            <newpara></newpara>
            D:\Synapse System\Matlab Scope for NET oneFolder\mFiles\blankAPsWithNaNs.m
            <newpara></newpara>
            D:\Synapse System\Matlab Scope for NET oneFolder\mFiles\burstingProbability.m
            <newpara></newpara>
            D:\Synapse System\Matlab Scope for NET oneFolder\mFiles\calcBurstProb.m
            <newpara></newpara>
            D:\Synapse System\Matlab Scope for NET oneFolder\mFiles\calcMean.m
            <newpara></newpara>
            D:\Synapse System\Matlab Scope for NET oneFolder\mFiles\calcSTA.m
            <newpara></newpara>
            D:\Synapse System\Matlab Scope for NET oneFolder\mFiles\calcSTO.m
            <newpara></newpara>
            D:\Synapse System\Matlab Scope for NET oneFolder\mFiles\cell2mat.m
            <newpara></newpara>
            D:\Synapse System\Matlab Scope for NET oneFolder\mFiles\characterizePSPs.m
            <newpara></newpara>
            D:\Synapse System\Matlab Scope for NET oneFolder\mFiles\clearBonusText.m
            <newpara></newpara>
            D:\Synapse System\Matlab Scope for NET oneFolder\mFiles\clearExtraLines.m
            <newpara></newpara>
            D:\Synapse System\Matlab Scope for NET oneFolder\mFiles\colorSpread.m
            <newpara></newpara>
            D:\Synapse System\Matlab Scope for NET oneFolder\mFiles\combFilter.m
            <newpara></newpara>
            D:\Synapse System\Matlab Scope for NET oneFolder\mFiles\commonEvents.m
            <newpara></newpara>
            D:\Synapse System\Matlab Scope for NET oneFolder\mFiles\Contents.m
            <newpara></newpara>
            D:\Synapse System\Matlab Scope for NET oneFolder\mFiles\crossCorr.m
            <newpara></newpara>
            D:\Synapse System\Matlab Scope for NET oneFolder\mFiles\crosscorrelateSetup.m
            <newpara></newpara>
            D:\Synapse System\Matlab Scope for NET oneFolder\mFiles\detectAPs.m
            <newpara></newpara>
            D:\Synapse System\Matlab Scope for NET oneFolder\mFiles\detectPSPs.m
            <newpara></newpara>
            D:\Synapse System\Matlab Scope for NET oneFolder\mFiles\detectPSPs3d.m
            <newpara></newpara>
            D:\Synapse System\Matlab Scope for NET oneFolder\mFiles\detectSpikes.m
            <newpara></newpara>
            D:\Synapse System\Matlab Scope for NET oneFolder\mFiles\displayEventLines.m
            <newpara></newpara>
            D:\Synapse System\Matlab Scope for NET oneFolder\mFiles\displayEventLinesSimple.m
            <newpara></newpara>
            D:\Synapse System\Matlab Scope for NET oneFolder\mFiles\dumpPreferences.m
            <newpara></newpara>
            D:\Synapse System\Matlab Scope for NET oneFolder\mFiles\evaluateBonusText.m
            <newpara></newpara>
            D:\Synapse System\Matlab Scope for NET oneFolder\mFiles\evaluateExportText.m
            <newpara></newpara>
            D:\Synapse System\Matlab Scope for NET oneFolder\mFiles\eventTriggeredAverage.m
            <newpara></newpara>
            D:\Synapse System\Matlab Scope for NET oneFolder\mFiles\executeMatlabLine.m
            <newpara></newpara>
            D:\Synapse System\Matlab Scope for NET oneFolder\mFiles\exportToRDrive.m
            <newpara></newpara>
            D:\Synapse System\Matlab Scope for NET oneFolder\mFiles\exportWithAxes.m
            <newpara></newpara>
            D:\Synapse System\Matlab Scope for NET oneFolder\mFiles\exportWithScaleBars.m
            <newpara></newpara>
            D:\Synapse System\Matlab Scope for NET oneFolder\mFiles\fastAHP.m
            <newpara></newpara>
            D:\Synapse System\Matlab Scope for NET oneFolder\mFiles\fastAHPSlope.m
            <newpara></newpara>
            D:\Synapse System\Matlab Scope for NET oneFolder\mFiles\fcnMin.m
            <newpara></newpara>
            D:\Synapse System\Matlab Scope for NET oneFolder\mFiles\findSteps.m
            <newpara></newpara>
            D:\Synapse System\Matlab Scope for NET oneFolder\mFiles\findStims.m
            <newpara></newpara>
            D:\Synapse System\Matlab Scope for NET oneFolder\mFiles\fit1Exp.m
            <newpara></newpara>
            D:\Synapse System\Matlab Scope for NET oneFolder\mFiles\fit2Exp.m
            <newpara></newpara>
            D:\Synapse System\Matlab Scope for NET oneFolder\mFiles\fit3Exp.m
            <newpara></newpara>
            D:\Synapse System\Matlab Scope for NET oneFolder\mFiles\fitAlpha.m
            <newpara></newpara>
            D:\Synapse System\Matlab Scope for NET oneFolder\mFiles\fitBoltzmann.m
            <newpara></newpara>
            D:\Synapse System\Matlab Scope for NET oneFolder\mFiles\fitBoltzmannBen.m
            <newpara></newpara>
            D:\Synapse System\Matlab Scope for NET oneFolder\mFiles\fitDecayDouble.m
            <newpara></newpara>
            D:\Synapse System\Matlab Scope for NET oneFolder\mFiles\fitDecaySingle.m
            <newpara></newpara>
            D:\Synapse System\Matlab Scope for NET oneFolder\mFiles\fitDecayTriple.m
            <newpara></newpara>
            D:\Synapse System\Matlab Scope for NET oneFolder\mFiles\fitLine.m
            <newpara></newpara>
            D:\Synapse System\Matlab Scope for NET oneFolder\mFiles\fitLineExtra.m
            <newpara></newpara>
            D:\Synapse System\Matlab Scope for NET oneFolder\mFiles\fitSine.m
            <newpara></newpara>
            D:\Synapse System\Matlab Scope for NET oneFolder\mFiles\fourier.m
            <newpara></newpara>
            D:\Synapse System\Matlab Scope for NET oneFolder\mFiles\generateStim.m
            <newpara></newpara>
            D:\Synapse System\Matlab Scope for NET oneFolder\mFiles\GetFromMatlab.m
            <newpara></newpara>
            D:\Synapse System\Matlab Scope for NET oneFolder\mFiles\getScopeVersion.m
            <newpara></newpara>
            D:\Synapse System\Matlab Scope for NET oneFolder\mFiles\getVoltTrace.m
            <newpara></newpara>
            D:\Synapse System\Matlab Scope for NET oneFolder\mFiles\highPass.m
            <newpara></newpara>
            D:\Synapse System\Matlab Scope for NET oneFolder\mFiles\histfit.m
            <newpara></newpara>
            D:\Synapse System\Matlab Scope for NET oneFolder\mFiles\intervalHist.m
            <newpara></newpara>
            D:\Synapse System\Matlab Scope for NET oneFolder\mFiles\isiCv.m
            <newpara></newpara>
            D:\Synapse System\Matlab Scope for NET oneFolder\mFiles\isiCvEvents.m
            <newpara></newpara>
            D:\Synapse System\Matlab Scope for NET oneFolder\mFiles\jointDist.m
            <newpara></newpara>
            D:\Synapse System\Matlab Scope for NET oneFolder\mFiles\LorenPowerSpectrum.m
            <newpara></newpara>
            D:\Synapse System\Matlab Scope for NET oneFolder\mFiles\lowPass.m
            <newpara></newpara>
            D:\Synapse System\Matlab Scope for NET oneFolder\mFiles\makeBesselFilter.m
            <newpara></newpara>
            D:\Synapse System\Matlab Scope for NET oneFolder\mFiles\makeButterFilter.m
            <newpara></newpara>
            D:\Synapse System\Matlab Scope for NET oneFolder\mFiles\makeCheby1Filter.m
            <newpara></newpara>
            D:\Synapse System\Matlab Scope for NET oneFolder\mFiles\makeCheby2Filter.m
            <newpara></newpara>
            D:\Synapse System\Matlab Scope for NET oneFolder\mFiles\makeEllipFilter.m
            <newpara></newpara>
            D:\Synapse System\Matlab Scope for NET oneFolder\mFiles\makeLines.m
            <newpara></newpara>
            D:\Synapse System\Matlab Scope for NET oneFolder\mFiles\makeLines2.m
            <newpara></newpara>
            D:\Synapse System\Matlab Scope for NET oneFolder\mFiles\makeLinesTest.m
            <newpara></newpara>
            D:\Synapse System\Matlab Scope for NET oneFolder\mFiles\Matlab Setup Listener.m
            <newpara></newpara>
            D:\Synapse System\Matlab Scope for NET oneFolder\mFiles\matlabPlot.m
            <newpara></newpara>
            D:\Synapse System\Matlab Scope for NET oneFolder\mFiles\matlabPlotNoJitter.m
            <newpara></newpara>
            D:\Synapse System\Matlab Scope for NET oneFolder\mFiles\matlabPlotOld.m
            <newpara></newpara>
            D:\Synapse System\Matlab Scope for NET oneFolder\mFiles\MatlabSetupListener.m
            <newpara></newpara>
            D:\Synapse System\Matlab Scope for NET oneFolder\mFiles\meanVariance.m
            <newpara></newpara>
            D:\Synapse System\Matlab Scope for NET oneFolder\mFiles\medianFilter.m
            <newpara></newpara>
            D:\Synapse System\Matlab Scope for NET oneFolder\mFiles\metaBar.m
            <newpara></newpara>
            D:\Synapse System\Matlab Scope for NET oneFolder\mFiles\metaCorrEvents.m
            <newpara></newpara>
            D:\Synapse System\Matlab Scope for NET oneFolder\mFiles\MLdiff.m
            <newpara></newpara>
            D:\Synapse System\Matlab Scope for NET oneFolder\mFiles\MLmedfilt1.m
            <newpara></newpara>
            D:\Synapse System\Matlab Scope for NET oneFolder\mFiles\MLpolyfit.m
            <newpara></newpara>
            D:\Synapse System\Matlab Scope for NET oneFolder\mFiles\MLpolyval.m
            <newpara></newpara>
            D:\Synapse System\Matlab Scope for NET oneFolder\mFiles\MLsgolayfilt.m
            <newpara></newpara>
            D:\Synapse System\Matlab Scope for NET oneFolder\mFiles\movingAverage.m
            <newpara></newpara>
            D:\Synapse System\Matlab Scope for NET oneFolder\mFiles\movingBlock.m
            <newpara></newpara>
            D:\Synapse System\Matlab Scope for NET oneFolder\mFiles\msec2point.m
            <newpara></newpara>
            D:\Synapse System\Matlab Scope for NET oneFolder\mFiles\MTEO.m
            <newpara></newpara>
            D:\Synapse System\Matlab Scope for NET oneFolder\mFiles\MTEOBen.m
            <newpara></newpara>
            D:\Synapse System\Matlab Scope for NET oneFolder\mFiles\newScale.m
            <newpara></newpara>
            D:\Synapse System\Matlab Scope for NET oneFolder\mFiles\newScope.m
            <newpara></newpara>
            D:\Synapse System\Matlab Scope for NET oneFolder\mFiles\normalizeMatrix.m
            <newpara></newpara>
            D:\Synapse System\Matlab Scope for NET oneFolder\mFiles\notchFilter.m
            <newpara></newpara>
            D:\Synapse System\Matlab Scope for NET oneFolder\mFiles\oneSidedDeviation.m
            <newpara></newpara>
            D:\Synapse System\Matlab Scope for NET oneFolder\mFiles\overlayPSPs.m
            <newpara></newpara>
            D:\Synapse System\Matlab Scope for NET oneFolder\mFiles\plotAverageFreq.m
            <newpara></newpara>
            D:\Synapse System\Matlab Scope for NET oneFolder\mFiles\plotFreq.m
            <newpara></newpara>
            D:\Synapse System\Matlab Scope for NET oneFolder\mFiles\plotHistogram.m
            <newpara></newpara>
            D:\Synapse System\Matlab Scope for NET oneFolder\mFiles\plotPercentCorrelation.m
            <newpara></newpara>
            D:\Synapse System\Matlab Scope for NET oneFolder\mFiles\prepForPrint.m
            <newpara></newpara>
            D:\Synapse System\Matlab Scope for NET oneFolder\mFiles\printWithAxes.m
            <newpara></newpara>
            D:\Synapse System\Matlab Scope for NET oneFolder\mFiles\printWithScaleBars.m
            <newpara></newpara>
            D:\Synapse System\Matlab Scope for NET oneFolder\mFiles\readBen.m
            <newpara></newpara>
            D:\Synapse System\Matlab Scope for NET oneFolder\mFiles\readBenNewStyle.m
            <newpara></newpara>
            D:\Synapse System\Matlab Scope for NET oneFolder\mFiles\readBenOld2.m
            <newpara></newpara>
            D:\Synapse System\Matlab Scope for NET oneFolder\mFiles\readTrace.m
            <newpara></newpara>
            D:\Synapse System\Matlab Scope for NET oneFolder\mFiles\readVBString.m
            <newpara></newpara>
            D:\Synapse System\Matlab Scope for NET oneFolder\mFiles\refreshAllScopes.m
            <newpara></newpara>
            D:\Synapse System\Matlab Scope for NET oneFolder\mFiles\removeTrace.m
            <newpara></newpara>
            D:\Synapse System\Matlab Scope for NET oneFolder\mFiles\replaceTrace.m
            <newpara></newpara>
            D:\Synapse System\Matlab Scope for NET oneFolder\mFiles\restartSystem.m
            <newpara></newpara>
            D:\Synapse System\Matlab Scope for NET oneFolder\mFiles\runGeneralFilter.m
            <newpara></newpara>
            D:\Synapse System\Matlab Scope for NET oneFolder\mFiles\SaveAsMatFile.m
            <newpara></newpara>
            D:\Synapse System\Matlab Scope for NET oneFolder\mFiles\SaveAsMatFile2Vectors.m
            <newpara></newpara>
            D:\Synapse System\Matlab Scope for NET oneFolder\mFiles\SaveAsMatFile3Vectors.m
            <newpara></newpara>
            D:\Synapse System\Matlab Scope for NET
            oneFolder\mFiles\SaveAsMatFile3VectorsUnique.m
            <newpara></newpara>
            D:\Synapse System\Matlab Scope for NET oneFolder\mFiles\SaveAsMatFile4Vectors.m
            <newpara></newpara>
            D:\Synapse System\Matlab Scope for NET oneFolder\mFiles\sec2time.m
            <newpara></newpara>
            D:\Synapse System\Matlab Scope for NET oneFolder\mFiles\sendFilenamesToScope.m
            <newpara></newpara>
            D:\Synapse System\Matlab Scope for NET
            oneFolder\mFiles\sendFilenamesToScopeNoRefresh.m
            <newpara></newpara>
            D:\Synapse System\Matlab Scope for NET oneFolder\mFiles\sendMessage.m
            <newpara></newpara>
            D:\Synapse System\Matlab Scope for NET oneFolder\mFiles\sendText.m
            <newpara></newpara>
            D:\Synapse System\Matlab Scope for NET oneFolder\mFiles\SendToMatlab.m
            <newpara></newpara>
            D:\Synapse System\Matlab Scope for NET oneFolder\mFiles\setAxisLabels.m
            <newpara></newpara>
            D:\Synapse System\Matlab Scope for NET oneFolder\mFiles\sfigure.m
            <newpara></newpara>
            D:\Synapse System\Matlab Scope for NET oneFolder\mFiles\SGfilterBen.m
            <newpara></newpara>
            D:\Synapse System\Matlab Scope for NET oneFolder\mFiles\showEvents.m
            <newpara></newpara>
            D:\Synapse System\Matlab Scope for NET oneFolder\mFiles\showFFT.m
            <newpara></newpara>
            D:\Synapse System\Matlab Scope for NET oneFolder\mFiles\showFrameMarker.m
            <newpara></newpara>
            D:\Synapse System\Matlab Scope for NET oneFolder\mFiles\showStims.m
            <newpara></newpara>
            D:\Synapse System\Matlab Scope for NET oneFolder\mFiles\startInterprocess.m
            <newpara></newpara>
            D:\Synapse System\Matlab Scope for NET oneFolder\mFiles\testDrawLine.m
            <newpara></newpara>
            D:\Synapse System\Matlab Scope for NET oneFolder\mFiles\testMessage.m
            <newpara></newpara>
            D:\Synapse System\Matlab Scope for NET oneFolder\mFiles\testMessageString.m
            <newpara></newpara>
            D:\Synapse System\Matlab Scope for NET oneFolder\mFiles\timeControl.m
            <newpara></newpara>
            D:\Synapse System\Matlab Scope for NET oneFolder\mFiles\VBmedian.m
            <newpara></newpara>
            D:\Synapse System\Matlab Scope for NET oneFolder\mFiles\VBmovingMedian.m
            <newpara></newpara>
            D:\Synapse System\Matlab Scope for NET oneFolder\mFiles\wakeUp.m
            <newpara></newpara>
            D:\Synapse System\Matlab Scope for NET oneFolder\mFiles\whichChannel.m
            <newpara></newpara>
            D:\Synapse System\Matlab Scope for NET oneFolder\mFiles\whiteNoiseFile.m
            <newpara></newpara>
            deployprint.m
            <newpara></newpara>
            printdlg.m
            </summary>
            <remarks>
            @Version 0.0
            </remarks>
        </member>
        <member name="M:mPhysNative.Class1.#cctor">
            <summary internal= "true">
            The static constructor instantiates and initializes the MATLAB Compiler Runtime
            instance.
            </summary>
        </member>
        <member name="M:mPhysNative.Class1.#ctor">
            <summary>
            Constructs a new instance of the Class1 class.
            </summary>
        </member>
        <member name="M:mPhysNative.Class1.Finalize">
            <summary internal= "true">
            Class destructor called by the CLR garbage collector.
            </summary>
        </member>
        <member name="M:mPhysNative.Class1.Dispose">
            <summary>
            Frees the native resources associated with this object
            </summary>
        </member>
        <member name="M:mPhysNative.Class1.Dispose(System.Boolean)">
            <summary internal= "true">
            Internal dispose function
            </summary>
        </member>
        <member name="M:mPhysNative.Class1.addBonusText">
             <summary>
             Provides a void output, 0-input Objectinterface to the addBonusText M-function.
             </summary>
             <remarks>
             M-Documentation:
             this adds text to the top line of the Scope window
             figHandle is optional, if not supplied text added to all scope windows
             </remarks>
            
        </member>
        <member name="M:mPhysNative.Class1.addBonusText(System.Object)">
             <summary>
             Provides a void output, 1-input Objectinterface to the addBonusText M-function.
             </summary>
             <remarks>
             M-Documentation:
             this adds text to the top line of the Scope window
             figHandle is optional, if not supplied text added to all scope windows
             </remarks>
             <param name="text">Input argument #1</param>
            
        </member>
        <member name="M:mPhysNative.Class1.addBonusText(System.Object,System.Object)">
             <summary>
             Provides a void output, 2-input Objectinterface to the addBonusText M-function.
             </summary>
             <remarks>
             M-Documentation:
             this adds text to the top line of the Scope window
             figHandle is optional, if not supplied text added to all scope windows
             </remarks>
             <param name="text">Input argument #1</param>
             <param name="figHandle">Input argument #2</param>
            
        </member>
        <member name="M:mPhysNative.Class1.addBonusText(System.Int32)">
             <summary>
             Provides the standard 0-input Object interface to the addBonusText M-function.
             </summary>
             <remarks>
             M-Documentation:
             this adds text to the top line of the Scope window
             figHandle is optional, if not supplied text added to all scope windows
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.addBonusText(System.Int32,System.Object)">
             <summary>
             Provides the standard 1-input Object interface to the addBonusText M-function.
             </summary>
             <remarks>
             M-Documentation:
             this adds text to the top line of the Scope window
             figHandle is optional, if not supplied text added to all scope windows
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="text">Input argument #1</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.addBonusText(System.Int32,System.Object,System.Object)">
             <summary>
             Provides the standard 2-input Object interface to the addBonusText M-function.
             </summary>
             <remarks>
             M-Documentation:
             this adds text to the top line of the Scope window
             figHandle is optional, if not supplied text added to all scope windows
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="text">Input argument #1</param>
             <param name="figHandle">Input argument #2</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.addBonusText(System.Int32,System.Object[]@,System.Object[],System.Object[])">
             <summary>
             Provides an interface for the addBonusText function in which the input and output
             arguments are specified as an array of Objects.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             M-Documentation:
             this adds text to the top line of the Scope window
             figHandle is optional, if not supplied text added to all scope windows
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of Object output arguments</param>
             <param name= "argsIn">Array of Object input arguments</param>
             <param name= "varArgsIn">Array of Object representing variable input
             arguments</param>
            
        </member>
        <member name="M:mPhysNative.Class1.addFunctionToPlot">
             <summary>
             Provides a void output, 0-input Objectinterface to the addFunctionToPlot
             M-function.
             </summary>
             <remarks>
             M-Documentation:
             zData=evalin('base','zData');
             </remarks>
            
        </member>
        <member name="M:mPhysNative.Class1.addFunctionToPlot(System.Object)">
             <summary>
             Provides a void output, 1-input Objectinterface to the addFunctionToPlot
             M-function.
             </summary>
             <remarks>
             M-Documentation:
             zData=evalin('base','zData');
             </remarks>
             <param name="traceName">Input argument #1</param>
            
        </member>
        <member name="M:mPhysNative.Class1.addFunctionToPlot(System.Object,System.Object)">
             <summary>
             Provides a void output, 2-input Objectinterface to the addFunctionToPlot
             M-function.
             </summary>
             <remarks>
             M-Documentation:
             zData=evalin('base','zData');
             </remarks>
             <param name="traceName">Input argument #1</param>
             <param name="xData">Input argument #2</param>
            
        </member>
        <member name="M:mPhysNative.Class1.addFunctionToPlot(System.Object,System.Object,System.Object)">
             <summary>
             Provides a void output, 3-input Objectinterface to the addFunctionToPlot
             M-function.
             </summary>
             <remarks>
             M-Documentation:
             zData=evalin('base','zData');
             </remarks>
             <param name="traceName">Input argument #1</param>
             <param name="xData">Input argument #2</param>
             <param name="yData">Input argument #3</param>
            
        </member>
        <member name="M:mPhysNative.Class1.addFunctionToPlot(System.Object,System.Object,System.Object,System.Object)">
             <summary>
             Provides a void output, 4-input Objectinterface to the addFunctionToPlot
             M-function.
             </summary>
             <remarks>
             M-Documentation:
             zData=evalin('base','zData');
             </remarks>
             <param name="traceName">Input argument #1</param>
             <param name="xData">Input argument #2</param>
             <param name="yData">Input argument #3</param>
             <param name="colorName">Input argument #4</param>
            
        </member>
        <member name="M:mPhysNative.Class1.addFunctionToPlot(System.Object,System.Object,System.Object,System.Object,System.Object)">
             <summary>
             Provides a void output, 5-input Objectinterface to the addFunctionToPlot
             M-function.
             </summary>
             <remarks>
             M-Documentation:
             zData=evalin('base','zData');
             </remarks>
             <param name="traceName">Input argument #1</param>
             <param name="xData">Input argument #2</param>
             <param name="yData">Input argument #3</param>
             <param name="colorName">Input argument #4</param>
             <param name="lineWidth">Input argument #5</param>
            
        </member>
        <member name="M:mPhysNative.Class1.addFunctionToPlot(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
             <summary>
             Provides a void output, 6-input Objectinterface to the addFunctionToPlot
             M-function.
             </summary>
             <remarks>
             M-Documentation:
             zData=evalin('base','zData');
             </remarks>
             <param name="traceName">Input argument #1</param>
             <param name="xData">Input argument #2</param>
             <param name="yData">Input argument #3</param>
             <param name="colorName">Input argument #4</param>
             <param name="lineWidth">Input argument #5</param>
             <param name="lineStyle">Input argument #6</param>
            
        </member>
        <member name="M:mPhysNative.Class1.addFunctionToPlot(System.Int32)">
             <summary>
             Provides the standard 0-input Object interface to the addFunctionToPlot
             M-function.
             </summary>
             <remarks>
             M-Documentation:
             zData=evalin('base','zData');
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.addFunctionToPlot(System.Int32,System.Object)">
             <summary>
             Provides the standard 1-input Object interface to the addFunctionToPlot
             M-function.
             </summary>
             <remarks>
             M-Documentation:
             zData=evalin('base','zData');
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="traceName">Input argument #1</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.addFunctionToPlot(System.Int32,System.Object,System.Object)">
             <summary>
             Provides the standard 2-input Object interface to the addFunctionToPlot
             M-function.
             </summary>
             <remarks>
             M-Documentation:
             zData=evalin('base','zData');
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="traceName">Input argument #1</param>
             <param name="xData">Input argument #2</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.addFunctionToPlot(System.Int32,System.Object,System.Object,System.Object)">
             <summary>
             Provides the standard 3-input Object interface to the addFunctionToPlot
             M-function.
             </summary>
             <remarks>
             M-Documentation:
             zData=evalin('base','zData');
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="traceName">Input argument #1</param>
             <param name="xData">Input argument #2</param>
             <param name="yData">Input argument #3</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.addFunctionToPlot(System.Int32,System.Object,System.Object,System.Object,System.Object)">
             <summary>
             Provides the standard 4-input Object interface to the addFunctionToPlot
             M-function.
             </summary>
             <remarks>
             M-Documentation:
             zData=evalin('base','zData');
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="traceName">Input argument #1</param>
             <param name="xData">Input argument #2</param>
             <param name="yData">Input argument #3</param>
             <param name="colorName">Input argument #4</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.addFunctionToPlot(System.Int32,System.Object,System.Object,System.Object,System.Object,System.Object)">
             <summary>
             Provides the standard 5-input Object interface to the addFunctionToPlot
             M-function.
             </summary>
             <remarks>
             M-Documentation:
             zData=evalin('base','zData');
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="traceName">Input argument #1</param>
             <param name="xData">Input argument #2</param>
             <param name="yData">Input argument #3</param>
             <param name="colorName">Input argument #4</param>
             <param name="lineWidth">Input argument #5</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.addFunctionToPlot(System.Int32,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
             <summary>
             Provides the standard 6-input Object interface to the addFunctionToPlot
             M-function.
             </summary>
             <remarks>
             M-Documentation:
             zData=evalin('base','zData');
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="traceName">Input argument #1</param>
             <param name="xData">Input argument #2</param>
             <param name="yData">Input argument #3</param>
             <param name="colorName">Input argument #4</param>
             <param name="lineWidth">Input argument #5</param>
             <param name="lineStyle">Input argument #6</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.addFunctionToPlot(System.Int32,System.Object[]@,System.Object[],System.Object[])">
             <summary>
             Provides an interface for the addFunctionToPlot function in which the input and
             output
             arguments are specified as an array of Objects.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             M-Documentation:
             zData=evalin('base','zData');
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of Object output arguments</param>
             <param name= "argsIn">Array of Object input arguments</param>
             <param name= "varArgsIn">Array of Object representing variable input
             arguments</param>
            
        </member>
        <member name="M:mPhysNative.Class1.addStatusText">
             <summary>
             Provides a void output, 0-input Objectinterface to the addStatusText M-function.
             </summary>
             <remarks>
             M-Documentation:
             this adds text to the top line of the Scope window
             figHandle is optional, if not supplied text added to all scope windows
             </remarks>
            
        </member>
        <member name="M:mPhysNative.Class1.addStatusText(System.Object)">
             <summary>
             Provides a void output, 1-input Objectinterface to the addStatusText M-function.
             </summary>
             <remarks>
             M-Documentation:
             this adds text to the top line of the Scope window
             figHandle is optional, if not supplied text added to all scope windows
             </remarks>
             <param name="text">Input argument #1</param>
            
        </member>
        <member name="M:mPhysNative.Class1.addStatusText(System.Object,System.Object)">
             <summary>
             Provides a void output, 2-input Objectinterface to the addStatusText M-function.
             </summary>
             <remarks>
             M-Documentation:
             this adds text to the top line of the Scope window
             figHandle is optional, if not supplied text added to all scope windows
             </remarks>
             <param name="text">Input argument #1</param>
             <param name="figHandle">Input argument #2</param>
            
        </member>
        <member name="M:mPhysNative.Class1.addStatusText(System.Int32)">
             <summary>
             Provides the standard 0-input Object interface to the addStatusText M-function.
             </summary>
             <remarks>
             M-Documentation:
             this adds text to the top line of the Scope window
             figHandle is optional, if not supplied text added to all scope windows
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.addStatusText(System.Int32,System.Object)">
             <summary>
             Provides the standard 1-input Object interface to the addStatusText M-function.
             </summary>
             <remarks>
             M-Documentation:
             this adds text to the top line of the Scope window
             figHandle is optional, if not supplied text added to all scope windows
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="text">Input argument #1</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.addStatusText(System.Int32,System.Object,System.Object)">
             <summary>
             Provides the standard 2-input Object interface to the addStatusText M-function.
             </summary>
             <remarks>
             M-Documentation:
             this adds text to the top line of the Scope window
             figHandle is optional, if not supplied text added to all scope windows
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="text">Input argument #1</param>
             <param name="figHandle">Input argument #2</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.addStatusText(System.Int32,System.Object[]@,System.Object[],System.Object[])">
             <summary>
             Provides an interface for the addStatusText function in which the input and
             output
             arguments are specified as an array of Objects.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             M-Documentation:
             this adds text to the top line of the Scope window
             figHandle is optional, if not supplied text added to all scope windows
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of Object output arguments</param>
             <param name= "argsIn">Array of Object input arguments</param>
             <param name= "varArgsIn">Array of Object representing variable input
             arguments</param>
            
        </member>
        <member name="M:mPhysNative.Class1.addTrace">
             <summary>
             Provides a single output, 0-input Objectinterface to the addTrace M-function.
             </summary>
             <remarks>
             M-Documentation:
             error checking
             </remarks>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.addTrace(System.Object)">
             <summary>
             Provides a single output, 1-input Objectinterface to the addTrace M-function.
             </summary>
             <remarks>
             M-Documentation:
             error checking
             </remarks>
             <param name="newData">Input argument #1</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.addTrace(System.Object,System.Object)">
             <summary>
             Provides a single output, 2-input Objectinterface to the addTrace M-function.
             </summary>
             <remarks>
             M-Documentation:
             error checking
             </remarks>
             <param name="newData">Input argument #1</param>
             <param name="channelName">Input argument #2</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.addTrace(System.Int32)">
             <summary>
             Provides the standard 0-input Object interface to the addTrace M-function.
             </summary>
             <remarks>
             M-Documentation:
             error checking
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.addTrace(System.Int32,System.Object)">
             <summary>
             Provides the standard 1-input Object interface to the addTrace M-function.
             </summary>
             <remarks>
             M-Documentation:
             error checking
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="newData">Input argument #1</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.addTrace(System.Int32,System.Object,System.Object)">
             <summary>
             Provides the standard 2-input Object interface to the addTrace M-function.
             </summary>
             <remarks>
             M-Documentation:
             error checking
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="newData">Input argument #1</param>
             <param name="channelName">Input argument #2</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.addTrace(System.Int32,System.Object[]@,System.Object[],System.Object[])">
             <summary>
             Provides an interface for the addTrace function in which the input and output
             arguments are specified as an array of Objects.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             M-Documentation:
             error checking
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of Object output arguments</param>
             <param name= "argsIn">Array of Object input arguments</param>
             <param name= "varArgsIn">Array of Object representing variable input
             arguments</param>
            
        </member>
        <member name="M:mPhysNative.Class1.analysisAxis">
             <summary>
             Provides a single output, 0-input Objectinterface to the analysisAxis M-function.
             </summary>
             <remarks>
             M-Documentation:
             called by other functions to add an analysis axis
             </remarks>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.analysisAxis(System.Object)">
             <summary>
             Provides a single output, 1-input Objectinterface to the analysisAxis M-function.
             </summary>
             <remarks>
             M-Documentation:
             called by other functions to add an analysis axis
             </remarks>
             <param name="plotName">Input argument #1</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.analysisAxis(System.Object,System.Object)">
             <summary>
             Provides a single output, 2-input Objectinterface to the analysisAxis M-function.
             </summary>
             <remarks>
             M-Documentation:
             called by other functions to add an analysis axis
             </remarks>
             <param name="plotName">Input argument #1</param>
             <param name="axisHandle_in1">Input argument #2</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.analysisAxis(System.Int32)">
             <summary>
             Provides the standard 0-input Object interface to the analysisAxis M-function.
             </summary>
             <remarks>
             M-Documentation:
             called by other functions to add an analysis axis
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.analysisAxis(System.Int32,System.Object)">
             <summary>
             Provides the standard 1-input Object interface to the analysisAxis M-function.
             </summary>
             <remarks>
             M-Documentation:
             called by other functions to add an analysis axis
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="plotName">Input argument #1</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.analysisAxis(System.Int32,System.Object,System.Object)">
             <summary>
             Provides the standard 2-input Object interface to the analysisAxis M-function.
             </summary>
             <remarks>
             M-Documentation:
             called by other functions to add an analysis axis
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="plotName">Input argument #1</param>
             <param name="axisHandle_in1">Input argument #2</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.analysisAxis(System.Int32,System.Object[]@,System.Object[],System.Object[])">
             <summary>
             Provides an interface for the analysisAxis function in which the input and output
             arguments are specified as an array of Objects.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             M-Documentation:
             called by other functions to add an analysis axis
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of Object output arguments</param>
             <param name= "argsIn">Array of Object input arguments</param>
             <param name= "varArgsIn">Array of Object representing variable input
             arguments</param>
            
        </member>
        <member name="M:mPhysNative.Class1.apHeight">
             <summary>
             Provides a single output, 0-input Objectinterface to the apHeight M-function.
             </summary>
             <remarks>
             M-Documentation:
             spikeHeights = APHeight(dataTrace, timerPerPoint, startTime, outputAxisHandle);
             defaults:
             timePerPoint = 0.2 ms
             startTime = 0 ms
             outputAxisHandle is a handle to a new newScope figure
             determine the height (in mV) from the point at which the AP crosses
             threshold to the point at the peak of the AP occurs
             </remarks>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.apHeight(System.Object)">
             <summary>
             Provides a single output, 1-input Objectinterface to the apHeight M-function.
             </summary>
             <remarks>
             M-Documentation:
             spikeHeights = APHeight(dataTrace, timerPerPoint, startTime, outputAxisHandle);
             defaults:
             timePerPoint = 0.2 ms
             startTime = 0 ms
             outputAxisHandle is a handle to a new newScope figure
             determine the height (in mV) from the point at which the AP crosses
             threshold to the point at the peak of the AP occurs
             </remarks>
             <param name="inData">Input argument #1</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.apHeight(System.Object,System.Object)">
             <summary>
             Provides a single output, 2-input Objectinterface to the apHeight M-function.
             </summary>
             <remarks>
             M-Documentation:
             spikeHeights = APHeight(dataTrace, timerPerPoint, startTime, outputAxisHandle);
             defaults:
             timePerPoint = 0.2 ms
             startTime = 0 ms
             outputAxisHandle is a handle to a new newScope figure
             determine the height (in mV) from the point at which the AP crosses
             threshold to the point at the peak of the AP occurs
             </remarks>
             <param name="inData">Input argument #1</param>
             <param name="timePerPoint">Input argument #2</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.apHeight(System.Object,System.Object,System.Object)">
             <summary>
             Provides a single output, 3-input Objectinterface to the apHeight M-function.
             </summary>
             <remarks>
             M-Documentation:
             spikeHeights = APHeight(dataTrace, timerPerPoint, startTime, outputAxisHandle);
             defaults:
             timePerPoint = 0.2 ms
             startTime = 0 ms
             outputAxisHandle is a handle to a new newScope figure
             determine the height (in mV) from the point at which the AP crosses
             threshold to the point at the peak of the AP occurs
             </remarks>
             <param name="inData">Input argument #1</param>
             <param name="timePerPoint">Input argument #2</param>
             <param name="startTime">Input argument #3</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.apHeight(System.Object,System.Object,System.Object,System.Object)">
             <summary>
             Provides a single output, 4-input Objectinterface to the apHeight M-function.
             </summary>
             <remarks>
             M-Documentation:
             spikeHeights = APHeight(dataTrace, timerPerPoint, startTime, outputAxisHandle);
             defaults:
             timePerPoint = 0.2 ms
             startTime = 0 ms
             outputAxisHandle is a handle to a new newScope figure
             determine the height (in mV) from the point at which the AP crosses
             threshold to the point at the peak of the AP occurs
             </remarks>
             <param name="inData">Input argument #1</param>
             <param name="timePerPoint">Input argument #2</param>
             <param name="startTime">Input argument #3</param>
             <param name="axisHandle">Input argument #4</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.apHeight(System.Int32)">
             <summary>
             Provides the standard 0-input Object interface to the apHeight M-function.
             </summary>
             <remarks>
             M-Documentation:
             spikeHeights = APHeight(dataTrace, timerPerPoint, startTime, outputAxisHandle);
             defaults:
             timePerPoint = 0.2 ms
             startTime = 0 ms
             outputAxisHandle is a handle to a new newScope figure
             determine the height (in mV) from the point at which the AP crosses
             threshold to the point at the peak of the AP occurs
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.apHeight(System.Int32,System.Object)">
             <summary>
             Provides the standard 1-input Object interface to the apHeight M-function.
             </summary>
             <remarks>
             M-Documentation:
             spikeHeights = APHeight(dataTrace, timerPerPoint, startTime, outputAxisHandle);
             defaults:
             timePerPoint = 0.2 ms
             startTime = 0 ms
             outputAxisHandle is a handle to a new newScope figure
             determine the height (in mV) from the point at which the AP crosses
             threshold to the point at the peak of the AP occurs
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="inData">Input argument #1</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.apHeight(System.Int32,System.Object,System.Object)">
             <summary>
             Provides the standard 2-input Object interface to the apHeight M-function.
             </summary>
             <remarks>
             M-Documentation:
             spikeHeights = APHeight(dataTrace, timerPerPoint, startTime, outputAxisHandle);
             defaults:
             timePerPoint = 0.2 ms
             startTime = 0 ms
             outputAxisHandle is a handle to a new newScope figure
             determine the height (in mV) from the point at which the AP crosses
             threshold to the point at the peak of the AP occurs
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="inData">Input argument #1</param>
             <param name="timePerPoint">Input argument #2</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.apHeight(System.Int32,System.Object,System.Object,System.Object)">
             <summary>
             Provides the standard 3-input Object interface to the apHeight M-function.
             </summary>
             <remarks>
             M-Documentation:
             spikeHeights = APHeight(dataTrace, timerPerPoint, startTime, outputAxisHandle);
             defaults:
             timePerPoint = 0.2 ms
             startTime = 0 ms
             outputAxisHandle is a handle to a new newScope figure
             determine the height (in mV) from the point at which the AP crosses
             threshold to the point at the peak of the AP occurs
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="inData">Input argument #1</param>
             <param name="timePerPoint">Input argument #2</param>
             <param name="startTime">Input argument #3</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.apHeight(System.Int32,System.Object,System.Object,System.Object,System.Object)">
             <summary>
             Provides the standard 4-input Object interface to the apHeight M-function.
             </summary>
             <remarks>
             M-Documentation:
             spikeHeights = APHeight(dataTrace, timerPerPoint, startTime, outputAxisHandle);
             defaults:
             timePerPoint = 0.2 ms
             startTime = 0 ms
             outputAxisHandle is a handle to a new newScope figure
             determine the height (in mV) from the point at which the AP crosses
             threshold to the point at the peak of the AP occurs
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="inData">Input argument #1</param>
             <param name="timePerPoint">Input argument #2</param>
             <param name="startTime">Input argument #3</param>
             <param name="axisHandle">Input argument #4</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.apHeight(System.Int32,System.Object[]@,System.Object[],System.Object[])">
             <summary>
             Provides an interface for the apHeight function in which the input and output
             arguments are specified as an array of Objects.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             M-Documentation:
             spikeHeights = APHeight(dataTrace, timerPerPoint, startTime, outputAxisHandle);
             defaults:
             timePerPoint = 0.2 ms
             startTime = 0 ms
             outputAxisHandle is a handle to a new newScope figure
             determine the height (in mV) from the point at which the AP crosses
             threshold to the point at the peak of the AP occurs
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of Object output arguments</param>
             <param name= "argsIn">Array of Object input arguments</param>
             <param name= "varArgsIn">Array of Object representing variable input
             arguments</param>
            
        </member>
        <member name="M:mPhysNative.Class1.apRiseFallRatio">
             <summary>
             Provides a single output, 0-input Objectinterface to the apRiseFallRatio
             M-function.
             </summary>
             <remarks>
             M-Documentation:
             apWidths = apRiseFallRatio(dataTrace, timerPerPoint, startTime,
             outputAxisHandle);
             defaults:
             timePerPoint = 0.2 ms
             startTime = 0 ms
             outputAxisHandle is a handle to a new newScope figure
             determine the time (in ms) from the point at which the AP crosses
             threshold to the point at which it is passing back by threshold on the
             way down
             </remarks>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.apRiseFallRatio(System.Object)">
             <summary>
             Provides a single output, 1-input Objectinterface to the apRiseFallRatio
             M-function.
             </summary>
             <remarks>
             M-Documentation:
             apWidths = apRiseFallRatio(dataTrace, timerPerPoint, startTime,
             outputAxisHandle);
             defaults:
             timePerPoint = 0.2 ms
             startTime = 0 ms
             outputAxisHandle is a handle to a new newScope figure
             determine the time (in ms) from the point at which the AP crosses
             threshold to the point at which it is passing back by threshold on the
             way down
             </remarks>
             <param name="traceData">Input argument #1</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.apRiseFallRatio(System.Object,System.Object)">
             <summary>
             Provides a single output, 2-input Objectinterface to the apRiseFallRatio
             M-function.
             </summary>
             <remarks>
             M-Documentation:
             apWidths = apRiseFallRatio(dataTrace, timerPerPoint, startTime,
             outputAxisHandle);
             defaults:
             timePerPoint = 0.2 ms
             startTime = 0 ms
             outputAxisHandle is a handle to a new newScope figure
             determine the time (in ms) from the point at which the AP crosses
             threshold to the point at which it is passing back by threshold on the
             way down
             </remarks>
             <param name="traceData">Input argument #1</param>
             <param name="timePerPoint">Input argument #2</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.apRiseFallRatio(System.Object,System.Object,System.Object)">
             <summary>
             Provides a single output, 3-input Objectinterface to the apRiseFallRatio
             M-function.
             </summary>
             <remarks>
             M-Documentation:
             apWidths = apRiseFallRatio(dataTrace, timerPerPoint, startTime,
             outputAxisHandle);
             defaults:
             timePerPoint = 0.2 ms
             startTime = 0 ms
             outputAxisHandle is a handle to a new newScope figure
             determine the time (in ms) from the point at which the AP crosses
             threshold to the point at which it is passing back by threshold on the
             way down
             </remarks>
             <param name="traceData">Input argument #1</param>
             <param name="timePerPoint">Input argument #2</param>
             <param name="startTime">Input argument #3</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.apRiseFallRatio(System.Object,System.Object,System.Object,System.Object)">
             <summary>
             Provides a single output, 4-input Objectinterface to the apRiseFallRatio
             M-function.
             </summary>
             <remarks>
             M-Documentation:
             apWidths = apRiseFallRatio(dataTrace, timerPerPoint, startTime,
             outputAxisHandle);
             defaults:
             timePerPoint = 0.2 ms
             startTime = 0 ms
             outputAxisHandle is a handle to a new newScope figure
             determine the time (in ms) from the point at which the AP crosses
             threshold to the point at which it is passing back by threshold on the
             way down
             </remarks>
             <param name="traceData">Input argument #1</param>
             <param name="timePerPoint">Input argument #2</param>
             <param name="startTime">Input argument #3</param>
             <param name="axisHandle">Input argument #4</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.apRiseFallRatio(System.Int32)">
             <summary>
             Provides the standard 0-input Object interface to the apRiseFallRatio M-function.
             </summary>
             <remarks>
             M-Documentation:
             apWidths = apRiseFallRatio(dataTrace, timerPerPoint, startTime,
             outputAxisHandle);
             defaults:
             timePerPoint = 0.2 ms
             startTime = 0 ms
             outputAxisHandle is a handle to a new newScope figure
             determine the time (in ms) from the point at which the AP crosses
             threshold to the point at which it is passing back by threshold on the
             way down
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.apRiseFallRatio(System.Int32,System.Object)">
             <summary>
             Provides the standard 1-input Object interface to the apRiseFallRatio M-function.
             </summary>
             <remarks>
             M-Documentation:
             apWidths = apRiseFallRatio(dataTrace, timerPerPoint, startTime,
             outputAxisHandle);
             defaults:
             timePerPoint = 0.2 ms
             startTime = 0 ms
             outputAxisHandle is a handle to a new newScope figure
             determine the time (in ms) from the point at which the AP crosses
             threshold to the point at which it is passing back by threshold on the
             way down
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="traceData">Input argument #1</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.apRiseFallRatio(System.Int32,System.Object,System.Object)">
             <summary>
             Provides the standard 2-input Object interface to the apRiseFallRatio M-function.
             </summary>
             <remarks>
             M-Documentation:
             apWidths = apRiseFallRatio(dataTrace, timerPerPoint, startTime,
             outputAxisHandle);
             defaults:
             timePerPoint = 0.2 ms
             startTime = 0 ms
             outputAxisHandle is a handle to a new newScope figure
             determine the time (in ms) from the point at which the AP crosses
             threshold to the point at which it is passing back by threshold on the
             way down
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="traceData">Input argument #1</param>
             <param name="timePerPoint">Input argument #2</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.apRiseFallRatio(System.Int32,System.Object,System.Object,System.Object)">
             <summary>
             Provides the standard 3-input Object interface to the apRiseFallRatio M-function.
             </summary>
             <remarks>
             M-Documentation:
             apWidths = apRiseFallRatio(dataTrace, timerPerPoint, startTime,
             outputAxisHandle);
             defaults:
             timePerPoint = 0.2 ms
             startTime = 0 ms
             outputAxisHandle is a handle to a new newScope figure
             determine the time (in ms) from the point at which the AP crosses
             threshold to the point at which it is passing back by threshold on the
             way down
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="traceData">Input argument #1</param>
             <param name="timePerPoint">Input argument #2</param>
             <param name="startTime">Input argument #3</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.apRiseFallRatio(System.Int32,System.Object,System.Object,System.Object,System.Object)">
             <summary>
             Provides the standard 4-input Object interface to the apRiseFallRatio M-function.
             </summary>
             <remarks>
             M-Documentation:
             apWidths = apRiseFallRatio(dataTrace, timerPerPoint, startTime,
             outputAxisHandle);
             defaults:
             timePerPoint = 0.2 ms
             startTime = 0 ms
             outputAxisHandle is a handle to a new newScope figure
             determine the time (in ms) from the point at which the AP crosses
             threshold to the point at which it is passing back by threshold on the
             way down
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="traceData">Input argument #1</param>
             <param name="timePerPoint">Input argument #2</param>
             <param name="startTime">Input argument #3</param>
             <param name="axisHandle">Input argument #4</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.apRiseFallRatio(System.Int32,System.Object[]@,System.Object[],System.Object[])">
             <summary>
             Provides an interface for the apRiseFallRatio function in which the input and
             output
             arguments are specified as an array of Objects.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             M-Documentation:
             apWidths = apRiseFallRatio(dataTrace, timerPerPoint, startTime,
             outputAxisHandle);
             defaults:
             timePerPoint = 0.2 ms
             startTime = 0 ms
             outputAxisHandle is a handle to a new newScope figure
             determine the time (in ms) from the point at which the AP crosses
             threshold to the point at which it is passing back by threshold on the
             way down
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of Object output arguments</param>
             <param name= "argsIn">Array of Object input arguments</param>
             <param name= "varArgsIn">Array of Object representing variable input
             arguments</param>
            
        </member>
        <member name="M:mPhysNative.Class1.apThreshold">
             <summary>
             Provides a single output, 0-input Objectinterface to the apThreshold M-function.
             </summary>
             <remarks>
             M-Documentation:
             thresholds = APthreshold(dataTrace, timerPerPoint, startTime, outputAxisHandle);
             defaults:
             timePerPoint = 0.2 ms
             startTime = 0 ms
             outputAxisHandle is a handle to a new newScope figure
             determine the membrane potential (in mV) where the maximum of the second
             derivative in the period immediately before the spike, looking for the
             first time that the second derivative has a peak in that period that is
             at least 25   of that height, and then searching backward from that peak
             to the first time that the second derivative is less than 10   of that
             maximum peak
             </remarks>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.apThreshold(System.Object)">
             <summary>
             Provides a single output, 1-input Objectinterface to the apThreshold M-function.
             </summary>
             <remarks>
             M-Documentation:
             thresholds = APthreshold(dataTrace, timerPerPoint, startTime, outputAxisHandle);
             defaults:
             timePerPoint = 0.2 ms
             startTime = 0 ms
             outputAxisHandle is a handle to a new newScope figure
             determine the membrane potential (in mV) where the maximum of the second
             derivative in the period immediately before the spike, looking for the
             first time that the second derivative has a peak in that period that is
             at least 25   of that height, and then searching backward from that peak
             to the first time that the second derivative is less than 10   of that
             maximum peak
             </remarks>
             <param name="inData">Input argument #1</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.apThreshold(System.Object,System.Object)">
             <summary>
             Provides a single output, 2-input Objectinterface to the apThreshold M-function.
             </summary>
             <remarks>
             M-Documentation:
             thresholds = APthreshold(dataTrace, timerPerPoint, startTime, outputAxisHandle);
             defaults:
             timePerPoint = 0.2 ms
             startTime = 0 ms
             outputAxisHandle is a handle to a new newScope figure
             determine the membrane potential (in mV) where the maximum of the second
             derivative in the period immediately before the spike, looking for the
             first time that the second derivative has a peak in that period that is
             at least 25   of that height, and then searching backward from that peak
             to the first time that the second derivative is less than 10   of that
             maximum peak
             </remarks>
             <param name="inData">Input argument #1</param>
             <param name="timePerPoint">Input argument #2</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.apThreshold(System.Object,System.Object,System.Object)">
             <summary>
             Provides a single output, 3-input Objectinterface to the apThreshold M-function.
             </summary>
             <remarks>
             M-Documentation:
             thresholds = APthreshold(dataTrace, timerPerPoint, startTime, outputAxisHandle);
             defaults:
             timePerPoint = 0.2 ms
             startTime = 0 ms
             outputAxisHandle is a handle to a new newScope figure
             determine the membrane potential (in mV) where the maximum of the second
             derivative in the period immediately before the spike, looking for the
             first time that the second derivative has a peak in that period that is
             at least 25   of that height, and then searching backward from that peak
             to the first time that the second derivative is less than 10   of that
             maximum peak
             </remarks>
             <param name="inData">Input argument #1</param>
             <param name="timePerPoint">Input argument #2</param>
             <param name="startTime">Input argument #3</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.apThreshold(System.Object,System.Object,System.Object,System.Object)">
             <summary>
             Provides a single output, 4-input Objectinterface to the apThreshold M-function.
             </summary>
             <remarks>
             M-Documentation:
             thresholds = APthreshold(dataTrace, timerPerPoint, startTime, outputAxisHandle);
             defaults:
             timePerPoint = 0.2 ms
             startTime = 0 ms
             outputAxisHandle is a handle to a new newScope figure
             determine the membrane potential (in mV) where the maximum of the second
             derivative in the period immediately before the spike, looking for the
             first time that the second derivative has a peak in that period that is
             at least 25   of that height, and then searching backward from that peak
             to the first time that the second derivative is less than 10   of that
             maximum peak
             </remarks>
             <param name="inData">Input argument #1</param>
             <param name="timePerPoint">Input argument #2</param>
             <param name="startTime">Input argument #3</param>
             <param name="axisHandle">Input argument #4</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.apThreshold(System.Int32)">
             <summary>
             Provides the standard 0-input Object interface to the apThreshold M-function.
             </summary>
             <remarks>
             M-Documentation:
             thresholds = APthreshold(dataTrace, timerPerPoint, startTime, outputAxisHandle);
             defaults:
             timePerPoint = 0.2 ms
             startTime = 0 ms
             outputAxisHandle is a handle to a new newScope figure
             determine the membrane potential (in mV) where the maximum of the second
             derivative in the period immediately before the spike, looking for the
             first time that the second derivative has a peak in that period that is
             at least 25   of that height, and then searching backward from that peak
             to the first time that the second derivative is less than 10   of that
             maximum peak
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.apThreshold(System.Int32,System.Object)">
             <summary>
             Provides the standard 1-input Object interface to the apThreshold M-function.
             </summary>
             <remarks>
             M-Documentation:
             thresholds = APthreshold(dataTrace, timerPerPoint, startTime, outputAxisHandle);
             defaults:
             timePerPoint = 0.2 ms
             startTime = 0 ms
             outputAxisHandle is a handle to a new newScope figure
             determine the membrane potential (in mV) where the maximum of the second
             derivative in the period immediately before the spike, looking for the
             first time that the second derivative has a peak in that period that is
             at least 25   of that height, and then searching backward from that peak
             to the first time that the second derivative is less than 10   of that
             maximum peak
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="inData">Input argument #1</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.apThreshold(System.Int32,System.Object,System.Object)">
             <summary>
             Provides the standard 2-input Object interface to the apThreshold M-function.
             </summary>
             <remarks>
             M-Documentation:
             thresholds = APthreshold(dataTrace, timerPerPoint, startTime, outputAxisHandle);
             defaults:
             timePerPoint = 0.2 ms
             startTime = 0 ms
             outputAxisHandle is a handle to a new newScope figure
             determine the membrane potential (in mV) where the maximum of the second
             derivative in the period immediately before the spike, looking for the
             first time that the second derivative has a peak in that period that is
             at least 25   of that height, and then searching backward from that peak
             to the first time that the second derivative is less than 10   of that
             maximum peak
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="inData">Input argument #1</param>
             <param name="timePerPoint">Input argument #2</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.apThreshold(System.Int32,System.Object,System.Object,System.Object)">
             <summary>
             Provides the standard 3-input Object interface to the apThreshold M-function.
             </summary>
             <remarks>
             M-Documentation:
             thresholds = APthreshold(dataTrace, timerPerPoint, startTime, outputAxisHandle);
             defaults:
             timePerPoint = 0.2 ms
             startTime = 0 ms
             outputAxisHandle is a handle to a new newScope figure
             determine the membrane potential (in mV) where the maximum of the second
             derivative in the period immediately before the spike, looking for the
             first time that the second derivative has a peak in that period that is
             at least 25   of that height, and then searching backward from that peak
             to the first time that the second derivative is less than 10   of that
             maximum peak
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="inData">Input argument #1</param>
             <param name="timePerPoint">Input argument #2</param>
             <param name="startTime">Input argument #3</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.apThreshold(System.Int32,System.Object,System.Object,System.Object,System.Object)">
             <summary>
             Provides the standard 4-input Object interface to the apThreshold M-function.
             </summary>
             <remarks>
             M-Documentation:
             thresholds = APthreshold(dataTrace, timerPerPoint, startTime, outputAxisHandle);
             defaults:
             timePerPoint = 0.2 ms
             startTime = 0 ms
             outputAxisHandle is a handle to a new newScope figure
             determine the membrane potential (in mV) where the maximum of the second
             derivative in the period immediately before the spike, looking for the
             first time that the second derivative has a peak in that period that is
             at least 25   of that height, and then searching backward from that peak
             to the first time that the second derivative is less than 10   of that
             maximum peak
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="inData">Input argument #1</param>
             <param name="timePerPoint">Input argument #2</param>
             <param name="startTime">Input argument #3</param>
             <param name="axisHandle">Input argument #4</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.apThreshold(System.Int32,System.Object[]@,System.Object[],System.Object[])">
             <summary>
             Provides an interface for the apThreshold function in which the input and output
             arguments are specified as an array of Objects.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             M-Documentation:
             thresholds = APthreshold(dataTrace, timerPerPoint, startTime, outputAxisHandle);
             defaults:
             timePerPoint = 0.2 ms
             startTime = 0 ms
             outputAxisHandle is a handle to a new newScope figure
             determine the membrane potential (in mV) where the maximum of the second
             derivative in the period immediately before the spike, looking for the
             first time that the second derivative has a peak in that period that is
             at least 25   of that height, and then searching backward from that peak
             to the first time that the second derivative is less than 10   of that
             maximum peak
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of Object output arguments</param>
             <param name= "argsIn">Array of Object input arguments</param>
             <param name= "varArgsIn">Array of Object representing variable input
             arguments</param>
            
        </member>
        <member name="M:mPhysNative.Class1.apWidth">
             <summary>
             Provides a single output, 0-input Objectinterface to the apWidth M-function.
             </summary>
             <remarks>
             M-Documentation:
             apWidths = APWidth(dataTrace, timerPerPoint, startTime, outputAxisHandle);
             defaults:
             timePerPoint = 0.2 ms
             startTime = 0 ms
             outputAxisHandle is a handle to a new newScope figure
             determine the time (in ms) from the point at which the AP crosses
             threshold to the point at which it is passing back by threshold on the
             way down
             </remarks>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.apWidth(System.Object)">
             <summary>
             Provides a single output, 1-input Objectinterface to the apWidth M-function.
             </summary>
             <remarks>
             M-Documentation:
             apWidths = APWidth(dataTrace, timerPerPoint, startTime, outputAxisHandle);
             defaults:
             timePerPoint = 0.2 ms
             startTime = 0 ms
             outputAxisHandle is a handle to a new newScope figure
             determine the time (in ms) from the point at which the AP crosses
             threshold to the point at which it is passing back by threshold on the
             way down
             </remarks>
             <param name="traceData">Input argument #1</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.apWidth(System.Object,System.Object)">
             <summary>
             Provides a single output, 2-input Objectinterface to the apWidth M-function.
             </summary>
             <remarks>
             M-Documentation:
             apWidths = APWidth(dataTrace, timerPerPoint, startTime, outputAxisHandle);
             defaults:
             timePerPoint = 0.2 ms
             startTime = 0 ms
             outputAxisHandle is a handle to a new newScope figure
             determine the time (in ms) from the point at which the AP crosses
             threshold to the point at which it is passing back by threshold on the
             way down
             </remarks>
             <param name="traceData">Input argument #1</param>
             <param name="timePerPoint">Input argument #2</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.apWidth(System.Object,System.Object,System.Object)">
             <summary>
             Provides a single output, 3-input Objectinterface to the apWidth M-function.
             </summary>
             <remarks>
             M-Documentation:
             apWidths = APWidth(dataTrace, timerPerPoint, startTime, outputAxisHandle);
             defaults:
             timePerPoint = 0.2 ms
             startTime = 0 ms
             outputAxisHandle is a handle to a new newScope figure
             determine the time (in ms) from the point at which the AP crosses
             threshold to the point at which it is passing back by threshold on the
             way down
             </remarks>
             <param name="traceData">Input argument #1</param>
             <param name="timePerPoint">Input argument #2</param>
             <param name="startTime">Input argument #3</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.apWidth(System.Object,System.Object,System.Object,System.Object)">
             <summary>
             Provides a single output, 4-input Objectinterface to the apWidth M-function.
             </summary>
             <remarks>
             M-Documentation:
             apWidths = APWidth(dataTrace, timerPerPoint, startTime, outputAxisHandle);
             defaults:
             timePerPoint = 0.2 ms
             startTime = 0 ms
             outputAxisHandle is a handle to a new newScope figure
             determine the time (in ms) from the point at which the AP crosses
             threshold to the point at which it is passing back by threshold on the
             way down
             </remarks>
             <param name="traceData">Input argument #1</param>
             <param name="timePerPoint">Input argument #2</param>
             <param name="startTime">Input argument #3</param>
             <param name="axisHandle">Input argument #4</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.apWidth(System.Int32)">
             <summary>
             Provides the standard 0-input Object interface to the apWidth M-function.
             </summary>
             <remarks>
             M-Documentation:
             apWidths = APWidth(dataTrace, timerPerPoint, startTime, outputAxisHandle);
             defaults:
             timePerPoint = 0.2 ms
             startTime = 0 ms
             outputAxisHandle is a handle to a new newScope figure
             determine the time (in ms) from the point at which the AP crosses
             threshold to the point at which it is passing back by threshold on the
             way down
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.apWidth(System.Int32,System.Object)">
             <summary>
             Provides the standard 1-input Object interface to the apWidth M-function.
             </summary>
             <remarks>
             M-Documentation:
             apWidths = APWidth(dataTrace, timerPerPoint, startTime, outputAxisHandle);
             defaults:
             timePerPoint = 0.2 ms
             startTime = 0 ms
             outputAxisHandle is a handle to a new newScope figure
             determine the time (in ms) from the point at which the AP crosses
             threshold to the point at which it is passing back by threshold on the
             way down
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="traceData">Input argument #1</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.apWidth(System.Int32,System.Object,System.Object)">
             <summary>
             Provides the standard 2-input Object interface to the apWidth M-function.
             </summary>
             <remarks>
             M-Documentation:
             apWidths = APWidth(dataTrace, timerPerPoint, startTime, outputAxisHandle);
             defaults:
             timePerPoint = 0.2 ms
             startTime = 0 ms
             outputAxisHandle is a handle to a new newScope figure
             determine the time (in ms) from the point at which the AP crosses
             threshold to the point at which it is passing back by threshold on the
             way down
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="traceData">Input argument #1</param>
             <param name="timePerPoint">Input argument #2</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.apWidth(System.Int32,System.Object,System.Object,System.Object)">
             <summary>
             Provides the standard 3-input Object interface to the apWidth M-function.
             </summary>
             <remarks>
             M-Documentation:
             apWidths = APWidth(dataTrace, timerPerPoint, startTime, outputAxisHandle);
             defaults:
             timePerPoint = 0.2 ms
             startTime = 0 ms
             outputAxisHandle is a handle to a new newScope figure
             determine the time (in ms) from the point at which the AP crosses
             threshold to the point at which it is passing back by threshold on the
             way down
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="traceData">Input argument #1</param>
             <param name="timePerPoint">Input argument #2</param>
             <param name="startTime">Input argument #3</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.apWidth(System.Int32,System.Object,System.Object,System.Object,System.Object)">
             <summary>
             Provides the standard 4-input Object interface to the apWidth M-function.
             </summary>
             <remarks>
             M-Documentation:
             apWidths = APWidth(dataTrace, timerPerPoint, startTime, outputAxisHandle);
             defaults:
             timePerPoint = 0.2 ms
             startTime = 0 ms
             outputAxisHandle is a handle to a new newScope figure
             determine the time (in ms) from the point at which the AP crosses
             threshold to the point at which it is passing back by threshold on the
             way down
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="traceData">Input argument #1</param>
             <param name="timePerPoint">Input argument #2</param>
             <param name="startTime">Input argument #3</param>
             <param name="axisHandle">Input argument #4</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.apWidth(System.Int32,System.Object[]@,System.Object[],System.Object[])">
             <summary>
             Provides an interface for the apWidth function in which the input and output
             arguments are specified as an array of Objects.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             M-Documentation:
             apWidths = APWidth(dataTrace, timerPerPoint, startTime, outputAxisHandle);
             defaults:
             timePerPoint = 0.2 ms
             startTime = 0 ms
             outputAxisHandle is a handle to a new newScope figure
             determine the time (in ms) from the point at which the AP crosses
             threshold to the point at which it is passing back by threshold on the
             way down
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of Object output arguments</param>
             <param name= "argsIn">Array of Object input arguments</param>
             <param name= "varArgsIn">Array of Object representing variable input
             arguments</param>
            
        </member>
        <member name="M:mPhysNative.Class1.apWidthHM">
             <summary>
             Provides a single output, 0-input Objectinterface to the apWidthHM M-function.
             </summary>
             <remarks>
             M-Documentation:
             apWidthsAtHalfMax = APWidthHM(dataTrace, timerPerPoint, startTime,
             outputAxisHandle);
             defaults:
             timePerPoint = 0.2 ms
             startTime = 0 ms
             outputAxisHandle is a handle to a new newScope figure
             determine the time (in ms) from the point vertically half way between
             where the AP crosses threshold and the peak to the point at which it is
             passing back by this height on the way down
             </remarks>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.apWidthHM(System.Object)">
             <summary>
             Provides a single output, 1-input Objectinterface to the apWidthHM M-function.
             </summary>
             <remarks>
             M-Documentation:
             apWidthsAtHalfMax = APWidthHM(dataTrace, timerPerPoint, startTime,
             outputAxisHandle);
             defaults:
             timePerPoint = 0.2 ms
             startTime = 0 ms
             outputAxisHandle is a handle to a new newScope figure
             determine the time (in ms) from the point vertically half way between
             where the AP crosses threshold and the peak to the point at which it is
             passing back by this height on the way down
             </remarks>
             <param name="inData">Input argument #1</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.apWidthHM(System.Object,System.Object)">
             <summary>
             Provides a single output, 2-input Objectinterface to the apWidthHM M-function.
             </summary>
             <remarks>
             M-Documentation:
             apWidthsAtHalfMax = APWidthHM(dataTrace, timerPerPoint, startTime,
             outputAxisHandle);
             defaults:
             timePerPoint = 0.2 ms
             startTime = 0 ms
             outputAxisHandle is a handle to a new newScope figure
             determine the time (in ms) from the point vertically half way between
             where the AP crosses threshold and the peak to the point at which it is
             passing back by this height on the way down
             </remarks>
             <param name="inData">Input argument #1</param>
             <param name="timePerPoint">Input argument #2</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.apWidthHM(System.Object,System.Object,System.Object)">
             <summary>
             Provides a single output, 3-input Objectinterface to the apWidthHM M-function.
             </summary>
             <remarks>
             M-Documentation:
             apWidthsAtHalfMax = APWidthHM(dataTrace, timerPerPoint, startTime,
             outputAxisHandle);
             defaults:
             timePerPoint = 0.2 ms
             startTime = 0 ms
             outputAxisHandle is a handle to a new newScope figure
             determine the time (in ms) from the point vertically half way between
             where the AP crosses threshold and the peak to the point at which it is
             passing back by this height on the way down
             </remarks>
             <param name="inData">Input argument #1</param>
             <param name="timePerPoint">Input argument #2</param>
             <param name="startTime">Input argument #3</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.apWidthHM(System.Object,System.Object,System.Object,System.Object)">
             <summary>
             Provides a single output, 4-input Objectinterface to the apWidthHM M-function.
             </summary>
             <remarks>
             M-Documentation:
             apWidthsAtHalfMax = APWidthHM(dataTrace, timerPerPoint, startTime,
             outputAxisHandle);
             defaults:
             timePerPoint = 0.2 ms
             startTime = 0 ms
             outputAxisHandle is a handle to a new newScope figure
             determine the time (in ms) from the point vertically half way between
             where the AP crosses threshold and the peak to the point at which it is
             passing back by this height on the way down
             </remarks>
             <param name="inData">Input argument #1</param>
             <param name="timePerPoint">Input argument #2</param>
             <param name="startTime">Input argument #3</param>
             <param name="axisHandle">Input argument #4</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.apWidthHM(System.Int32)">
             <summary>
             Provides the standard 0-input Object interface to the apWidthHM M-function.
             </summary>
             <remarks>
             M-Documentation:
             apWidthsAtHalfMax = APWidthHM(dataTrace, timerPerPoint, startTime,
             outputAxisHandle);
             defaults:
             timePerPoint = 0.2 ms
             startTime = 0 ms
             outputAxisHandle is a handle to a new newScope figure
             determine the time (in ms) from the point vertically half way between
             where the AP crosses threshold and the peak to the point at which it is
             passing back by this height on the way down
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.apWidthHM(System.Int32,System.Object)">
             <summary>
             Provides the standard 1-input Object interface to the apWidthHM M-function.
             </summary>
             <remarks>
             M-Documentation:
             apWidthsAtHalfMax = APWidthHM(dataTrace, timerPerPoint, startTime,
             outputAxisHandle);
             defaults:
             timePerPoint = 0.2 ms
             startTime = 0 ms
             outputAxisHandle is a handle to a new newScope figure
             determine the time (in ms) from the point vertically half way between
             where the AP crosses threshold and the peak to the point at which it is
             passing back by this height on the way down
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="inData">Input argument #1</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.apWidthHM(System.Int32,System.Object,System.Object)">
             <summary>
             Provides the standard 2-input Object interface to the apWidthHM M-function.
             </summary>
             <remarks>
             M-Documentation:
             apWidthsAtHalfMax = APWidthHM(dataTrace, timerPerPoint, startTime,
             outputAxisHandle);
             defaults:
             timePerPoint = 0.2 ms
             startTime = 0 ms
             outputAxisHandle is a handle to a new newScope figure
             determine the time (in ms) from the point vertically half way between
             where the AP crosses threshold and the peak to the point at which it is
             passing back by this height on the way down
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="inData">Input argument #1</param>
             <param name="timePerPoint">Input argument #2</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.apWidthHM(System.Int32,System.Object,System.Object,System.Object)">
             <summary>
             Provides the standard 3-input Object interface to the apWidthHM M-function.
             </summary>
             <remarks>
             M-Documentation:
             apWidthsAtHalfMax = APWidthHM(dataTrace, timerPerPoint, startTime,
             outputAxisHandle);
             defaults:
             timePerPoint = 0.2 ms
             startTime = 0 ms
             outputAxisHandle is a handle to a new newScope figure
             determine the time (in ms) from the point vertically half way between
             where the AP crosses threshold and the peak to the point at which it is
             passing back by this height on the way down
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="inData">Input argument #1</param>
             <param name="timePerPoint">Input argument #2</param>
             <param name="startTime">Input argument #3</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.apWidthHM(System.Int32,System.Object,System.Object,System.Object,System.Object)">
             <summary>
             Provides the standard 4-input Object interface to the apWidthHM M-function.
             </summary>
             <remarks>
             M-Documentation:
             apWidthsAtHalfMax = APWidthHM(dataTrace, timerPerPoint, startTime,
             outputAxisHandle);
             defaults:
             timePerPoint = 0.2 ms
             startTime = 0 ms
             outputAxisHandle is a handle to a new newScope figure
             determine the time (in ms) from the point vertically half way between
             where the AP crosses threshold and the peak to the point at which it is
             passing back by this height on the way down
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="inData">Input argument #1</param>
             <param name="timePerPoint">Input argument #2</param>
             <param name="startTime">Input argument #3</param>
             <param name="axisHandle">Input argument #4</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.apWidthHM(System.Int32,System.Object[]@,System.Object[],System.Object[])">
             <summary>
             Provides an interface for the apWidthHM function in which the input and output
             arguments are specified as an array of Objects.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             M-Documentation:
             apWidthsAtHalfMax = APWidthHM(dataTrace, timerPerPoint, startTime,
             outputAxisHandle);
             defaults:
             timePerPoint = 0.2 ms
             startTime = 0 ms
             outputAxisHandle is a handle to a new newScope figure
             determine the time (in ms) from the point vertically half way between
             where the AP crosses threshold and the peak to the point at which it is
             passing back by this height on the way down
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of Object output arguments</param>
             <param name= "argsIn">Array of Object input arguments</param>
             <param name= "varArgsIn">Array of Object representing variable input
             arguments</param>
            
        </member>
        <member name="M:mPhysNative.Class1.autoCorrelate">
             <summary>
             Provides a single output, 0-input Objectinterface to the autoCorrelate
             M-function.
             </summary>
             <remarks>
             M-Documentation:
             show an autocorrelogram
             </remarks>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.autoCorrelate(System.Object[])">
             <summary>
             Provides a single output, 1-input Objectinterface to the autoCorrelate
             M-function.
             </summary>
             <remarks>
             M-Documentation:
             show an autocorrelogram
             </remarks>
             <param name="varargin">Array of Objects representing the input arguments 1
             through varargin.length</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.autoCorrelate(System.Int32)">
             <summary>
             Provides the standard 0-input Object interface to the autoCorrelate M-function.
             </summary>
             <remarks>
             M-Documentation:
             show an autocorrelogram
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.autoCorrelate(System.Int32,System.Object[])">
             <summary>
             Provides the standard 1-input Object interface to the autoCorrelate M-function.
             </summary>
             <remarks>
             M-Documentation:
             show an autocorrelogram
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="varargin">Array of Objects representing the input arguments 1
             through varargin.length</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.autoCorrelate(System.Int32,System.Object[]@,System.Object[],System.Object[])">
             <summary>
             Provides an interface for the autoCorrelate function in which the input and
             output
             arguments are specified as an array of Objects.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             M-Documentation:
             show an autocorrelogram
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of Object output arguments</param>
             <param name= "argsIn">Array of Object input arguments</param>
             <param name= "varArgsIn">Array of Object representing variable input
             arguments</param>
            
        </member>
        <member name="M:mPhysNative.Class1.autoNotch">
             <summary>
             Provides a single output, 0-input Objectinterface to the autoNotch M-function.
             </summary>
             <remarks>
             M-Documentation:
             generate a notch filter for a data set
             </remarks>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.autoNotch(System.Object)">
             <summary>
             Provides a single output, 1-input Objectinterface to the autoNotch M-function.
             </summary>
             <remarks>
             M-Documentation:
             generate a notch filter for a data set
             </remarks>
             <param name="inData">Input argument #1</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.autoNotch(System.Object,System.Object)">
             <summary>
             Provides a single output, 2-input Objectinterface to the autoNotch M-function.
             </summary>
             <remarks>
             M-Documentation:
             generate a notch filter for a data set
             </remarks>
             <param name="inData">Input argument #1</param>
             <param name="timePerPoint">Input argument #2</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.autoNotch(System.Object,System.Object,System.Object)">
             <summary>
             Provides a single output, 3-input Objectinterface to the autoNotch M-function.
             </summary>
             <remarks>
             M-Documentation:
             generate a notch filter for a data set
             </remarks>
             <param name="inData">Input argument #1</param>
             <param name="timePerPoint">Input argument #2</param>
             <param name="startTime">Input argument #3</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.autoNotch(System.Object,System.Object,System.Object,System.Object)">
             <summary>
             Provides a single output, 4-input Objectinterface to the autoNotch M-function.
             </summary>
             <remarks>
             M-Documentation:
             generate a notch filter for a data set
             </remarks>
             <param name="inData">Input argument #1</param>
             <param name="timePerPoint">Input argument #2</param>
             <param name="startTime">Input argument #3</param>
             <param name="axisHandle">Input argument #4</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.autoNotch(System.Int32)">
             <summary>
             Provides the standard 0-input Object interface to the autoNotch M-function.
             </summary>
             <remarks>
             M-Documentation:
             generate a notch filter for a data set
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.autoNotch(System.Int32,System.Object)">
             <summary>
             Provides the standard 1-input Object interface to the autoNotch M-function.
             </summary>
             <remarks>
             M-Documentation:
             generate a notch filter for a data set
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="inData">Input argument #1</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.autoNotch(System.Int32,System.Object,System.Object)">
             <summary>
             Provides the standard 2-input Object interface to the autoNotch M-function.
             </summary>
             <remarks>
             M-Documentation:
             generate a notch filter for a data set
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="inData">Input argument #1</param>
             <param name="timePerPoint">Input argument #2</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.autoNotch(System.Int32,System.Object,System.Object,System.Object)">
             <summary>
             Provides the standard 3-input Object interface to the autoNotch M-function.
             </summary>
             <remarks>
             M-Documentation:
             generate a notch filter for a data set
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="inData">Input argument #1</param>
             <param name="timePerPoint">Input argument #2</param>
             <param name="startTime">Input argument #3</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.autoNotch(System.Int32,System.Object,System.Object,System.Object,System.Object)">
             <summary>
             Provides the standard 4-input Object interface to the autoNotch M-function.
             </summary>
             <remarks>
             M-Documentation:
             generate a notch filter for a data set
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="inData">Input argument #1</param>
             <param name="timePerPoint">Input argument #2</param>
             <param name="startTime">Input argument #3</param>
             <param name="axisHandle">Input argument #4</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.autoNotch(System.Int32,System.Object[]@,System.Object[],System.Object[])">
             <summary>
             Provides an interface for the autoNotch function in which the input and output
             arguments are specified as an array of Objects.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             M-Documentation:
             generate a notch filter for a data set
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of Object output arguments</param>
             <param name= "argsIn">Array of Object input arguments</param>
             <param name= "varArgsIn">Array of Object representing variable input
             arguments</param>
            
        </member>
        <member name="M:mPhysNative.Class1.bandStop">
             <summary>
             Provides a single output, 0-input Objectinterface to the bandStop M-function.
             </summary>
             <remarks>
             M-Documentation:
             band stop filter data
             filteredData = bandStop(rawData, [lowStopBandLowerLimit lowStopBandUpperLimit],
             [highStopBandLowerLimit highStopBandUpperLimit], samplingFrequency)
             defaults:
             lowStopBand = [50 100] Hz
             highStopBand = [1000 2000] Hz
             samplingFrequency = 5000 Hz
             </remarks>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.bandStop(System.Object)">
             <summary>
             Provides a single output, 1-input Objectinterface to the bandStop M-function.
             </summary>
             <remarks>
             M-Documentation:
             band stop filter data
             filteredData = bandStop(rawData, [lowStopBandLowerLimit lowStopBandUpperLimit],
             [highStopBandLowerLimit highStopBandUpperLimit], samplingFrequency)
             defaults:
             lowStopBand = [50 100] Hz
             highStopBand = [1000 2000] Hz
             samplingFrequency = 5000 Hz
             </remarks>
             <param name="inData">Input argument #1</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.bandStop(System.Object,System.Object)">
             <summary>
             Provides a single output, 2-input Objectinterface to the bandStop M-function.
             </summary>
             <remarks>
             M-Documentation:
             band stop filter data
             filteredData = bandStop(rawData, [lowStopBandLowerLimit lowStopBandUpperLimit],
             [highStopBandLowerLimit highStopBandUpperLimit], samplingFrequency)
             defaults:
             lowStopBand = [50 100] Hz
             highStopBand = [1000 2000] Hz
             samplingFrequency = 5000 Hz
             </remarks>
             <param name="inData">Input argument #1</param>
             <param name="lowStopBand">Input argument #2</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.bandStop(System.Object,System.Object,System.Object)">
             <summary>
             Provides a single output, 3-input Objectinterface to the bandStop M-function.
             </summary>
             <remarks>
             M-Documentation:
             band stop filter data
             filteredData = bandStop(rawData, [lowStopBandLowerLimit lowStopBandUpperLimit],
             [highStopBandLowerLimit highStopBandUpperLimit], samplingFrequency)
             defaults:
             lowStopBand = [50 100] Hz
             highStopBand = [1000 2000] Hz
             samplingFrequency = 5000 Hz
             </remarks>
             <param name="inData">Input argument #1</param>
             <param name="lowStopBand">Input argument #2</param>
             <param name="highStopBand">Input argument #3</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.bandStop(System.Object,System.Object,System.Object,System.Object)">
             <summary>
             Provides a single output, 4-input Objectinterface to the bandStop M-function.
             </summary>
             <remarks>
             M-Documentation:
             band stop filter data
             filteredData = bandStop(rawData, [lowStopBandLowerLimit lowStopBandUpperLimit],
             [highStopBandLowerLimit highStopBandUpperLimit], samplingFrequency)
             defaults:
             lowStopBand = [50 100] Hz
             highStopBand = [1000 2000] Hz
             samplingFrequency = 5000 Hz
             </remarks>
             <param name="inData">Input argument #1</param>
             <param name="lowStopBand">Input argument #2</param>
             <param name="highStopBand">Input argument #3</param>
             <param name="samplingFreq">Input argument #4</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.bandStop(System.Int32)">
             <summary>
             Provides the standard 0-input Object interface to the bandStop M-function.
             </summary>
             <remarks>
             M-Documentation:
             band stop filter data
             filteredData = bandStop(rawData, [lowStopBandLowerLimit lowStopBandUpperLimit],
             [highStopBandLowerLimit highStopBandUpperLimit], samplingFrequency)
             defaults:
             lowStopBand = [50 100] Hz
             highStopBand = [1000 2000] Hz
             samplingFrequency = 5000 Hz
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.bandStop(System.Int32,System.Object)">
             <summary>
             Provides the standard 1-input Object interface to the bandStop M-function.
             </summary>
             <remarks>
             M-Documentation:
             band stop filter data
             filteredData = bandStop(rawData, [lowStopBandLowerLimit lowStopBandUpperLimit],
             [highStopBandLowerLimit highStopBandUpperLimit], samplingFrequency)
             defaults:
             lowStopBand = [50 100] Hz
             highStopBand = [1000 2000] Hz
             samplingFrequency = 5000 Hz
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="inData">Input argument #1</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.bandStop(System.Int32,System.Object,System.Object)">
             <summary>
             Provides the standard 2-input Object interface to the bandStop M-function.
             </summary>
             <remarks>
             M-Documentation:
             band stop filter data
             filteredData = bandStop(rawData, [lowStopBandLowerLimit lowStopBandUpperLimit],
             [highStopBandLowerLimit highStopBandUpperLimit], samplingFrequency)
             defaults:
             lowStopBand = [50 100] Hz
             highStopBand = [1000 2000] Hz
             samplingFrequency = 5000 Hz
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="inData">Input argument #1</param>
             <param name="lowStopBand">Input argument #2</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.bandStop(System.Int32,System.Object,System.Object,System.Object)">
             <summary>
             Provides the standard 3-input Object interface to the bandStop M-function.
             </summary>
             <remarks>
             M-Documentation:
             band stop filter data
             filteredData = bandStop(rawData, [lowStopBandLowerLimit lowStopBandUpperLimit],
             [highStopBandLowerLimit highStopBandUpperLimit], samplingFrequency)
             defaults:
             lowStopBand = [50 100] Hz
             highStopBand = [1000 2000] Hz
             samplingFrequency = 5000 Hz
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="inData">Input argument #1</param>
             <param name="lowStopBand">Input argument #2</param>
             <param name="highStopBand">Input argument #3</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.bandStop(System.Int32,System.Object,System.Object,System.Object,System.Object)">
             <summary>
             Provides the standard 4-input Object interface to the bandStop M-function.
             </summary>
             <remarks>
             M-Documentation:
             band stop filter data
             filteredData = bandStop(rawData, [lowStopBandLowerLimit lowStopBandUpperLimit],
             [highStopBandLowerLimit highStopBandUpperLimit], samplingFrequency)
             defaults:
             lowStopBand = [50 100] Hz
             highStopBand = [1000 2000] Hz
             samplingFrequency = 5000 Hz
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="inData">Input argument #1</param>
             <param name="lowStopBand">Input argument #2</param>
             <param name="highStopBand">Input argument #3</param>
             <param name="samplingFreq">Input argument #4</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.bandStop(System.Int32,System.Object[]@,System.Object[],System.Object[])">
             <summary>
             Provides an interface for the bandStop function in which the input and output
             arguments are specified as an array of Objects.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             M-Documentation:
             band stop filter data
             filteredData = bandStop(rawData, [lowStopBandLowerLimit lowStopBandUpperLimit],
             [highStopBandLowerLimit highStopBandUpperLimit], samplingFrequency)
             defaults:
             lowStopBand = [50 100] Hz
             highStopBand = [1000 2000] Hz
             samplingFrequency = 5000 Hz
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of Object output arguments</param>
             <param name= "argsIn">Array of Object input arguments</param>
             <param name= "varArgsIn">Array of Object representing variable input
             arguments</param>
            
        </member>
        <member name="M:mPhysNative.Class1.benConv">
             <summary>
             Provides a single output, 0-input Objectinterface to the benConv M-function.
             </summary>
             <remarks>
             M-Documentation:
             this does convolution and forces outTrace size to match inTrace
             </remarks>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.benConv(System.Object)">
             <summary>
             Provides a single output, 1-input Objectinterface to the benConv M-function.
             </summary>
             <remarks>
             M-Documentation:
             this does convolution and forces outTrace size to match inTrace
             </remarks>
             <param name="inTrace">Input argument #1</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.benConv(System.Object,System.Object)">
             <summary>
             Provides a single output, 2-input Objectinterface to the benConv M-function.
             </summary>
             <remarks>
             M-Documentation:
             this does convolution and forces outTrace size to match inTrace
             </remarks>
             <param name="inTrace">Input argument #1</param>
             <param name="kernel">Input argument #2</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.benConv(System.Int32)">
             <summary>
             Provides the standard 0-input Object interface to the benConv M-function.
             </summary>
             <remarks>
             M-Documentation:
             this does convolution and forces outTrace size to match inTrace
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.benConv(System.Int32,System.Object)">
             <summary>
             Provides the standard 1-input Object interface to the benConv M-function.
             </summary>
             <remarks>
             M-Documentation:
             this does convolution and forces outTrace size to match inTrace
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="inTrace">Input argument #1</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.benConv(System.Int32,System.Object,System.Object)">
             <summary>
             Provides the standard 2-input Object interface to the benConv M-function.
             </summary>
             <remarks>
             M-Documentation:
             this does convolution and forces outTrace size to match inTrace
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="inTrace">Input argument #1</param>
             <param name="kernel">Input argument #2</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.benConv(System.Int32,System.Object[]@,System.Object[],System.Object[])">
             <summary>
             Provides an interface for the benConv function in which the input and output
             arguments are specified as an array of Objects.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             M-Documentation:
             this does convolution and forces outTrace size to match inTrace
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of Object output arguments</param>
             <param name= "argsIn">Array of Object input arguments</param>
             <param name= "varArgsIn">Array of Object representing variable input
             arguments</param>
            
        </member>
        <member name="M:mPhysNative.Class1.benDisplayString">
             <summary>
             Provides a single output, 0-input Objectinterface to the benDisplayString
             M-function.
             </summary>
             <remarks>
             M-Documentation:
             this routine processes a double for proper display on Scope form
             </remarks>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.benDisplayString(System.Object)">
             <summary>
             Provides a single output, 1-input Objectinterface to the benDisplayString
             M-function.
             </summary>
             <remarks>
             M-Documentation:
             this routine processes a double for proper display on Scope form
             </remarks>
             <param name="inNum">Input argument #1</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.benDisplayString(System.Int32)">
             <summary>
             Provides the standard 0-input Object interface to the benDisplayString
             M-function.
             </summary>
             <remarks>
             M-Documentation:
             this routine processes a double for proper display on Scope form
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.benDisplayString(System.Int32,System.Object)">
             <summary>
             Provides the standard 1-input Object interface to the benDisplayString
             M-function.
             </summary>
             <remarks>
             M-Documentation:
             this routine processes a double for proper display on Scope form
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="inNum">Input argument #1</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.benDisplayString(System.Int32,System.Object[]@,System.Object[],System.Object[])">
             <summary>
             Provides an interface for the benDisplayString function in which the input and
             output
             arguments are specified as an array of Objects.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             M-Documentation:
             this routine processes a double for proper display on Scope form
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of Object output arguments</param>
             <param name= "argsIn">Array of Object input arguments</param>
             <param name= "varArgsIn">Array of Object representing variable input
             arguments</param>
            
        </member>
        <member name="M:mPhysNative.Class1.benEvents">
             <summary>
             Provides a single output, 0-input Objectinterface to the benEvents M-function.
             </summary>
             <remarks>
             M-Documentation:
             benEvents   4/23/10 last changed to bail out on slope calc if either
             Index20 or Index80 is still -1 after search
             </remarks>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.benEvents(System.Object)">
             <summary>
             Provides a single output, 1-input Objectinterface to the benEvents M-function.
             </summary>
             <remarks>
             M-Documentation:
             benEvents   4/23/10 last changed to bail out on slope calc if either
             Index20 or Index80 is still -1 after search
             </remarks>
             <param name="inData">Input argument #1</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.benEvents(System.Object,System.Object)">
             <summary>
             Provides a single output, 2-input Objectinterface to the benEvents M-function.
             </summary>
             <remarks>
             M-Documentation:
             benEvents   4/23/10 last changed to bail out on slope calc if either
             Index20 or Index80 is still -1 after search
             </remarks>
             <param name="inData">Input argument #1</param>
             <param name="downEvents">Input argument #2</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.benEvents(System.Object,System.Object,System.Object)">
             <summary>
             Provides a single output, 3-input Objectinterface to the benEvents M-function.
             </summary>
             <remarks>
             M-Documentation:
             benEvents   4/23/10 last changed to bail out on slope calc if either
             Index20 or Index80 is still -1 after search
             </remarks>
             <param name="inData">Input argument #1</param>
             <param name="downEvents">Input argument #2</param>
             <param name="MsPerPoint">Input argument #3</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.benEvents(System.Object,System.Object,System.Object,System.Object)">
             <summary>
             Provides a single output, 4-input Objectinterface to the benEvents M-function.
             </summary>
             <remarks>
             M-Documentation:
             benEvents   4/23/10 last changed to bail out on slope calc if either
             Index20 or Index80 is still -1 after search
             </remarks>
             <param name="inData">Input argument #1</param>
             <param name="downEvents">Input argument #2</param>
             <param name="MsPerPoint">Input argument #3</param>
             <param name="startTime">Input argument #4</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.benEvents(System.Object,System.Object,System.Object,System.Object,System.Object)">
             <summary>
             Provides a single output, 5-input Objectinterface to the benEvents M-function.
             </summary>
             <remarks>
             M-Documentation:
             benEvents   4/23/10 last changed to bail out on slope calc if either
             Index20 or Index80 is still -1 after search
             </remarks>
             <param name="inData">Input argument #1</param>
             <param name="downEvents">Input argument #2</param>
             <param name="MsPerPoint">Input argument #3</param>
             <param name="startTime">Input argument #4</param>
             <param name="endTime">Input argument #5</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.benEvents(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
             <summary>
             Provides a single output, 6-input Objectinterface to the benEvents M-function.
             </summary>
             <remarks>
             M-Documentation:
             benEvents   4/23/10 last changed to bail out on slope calc if either
             Index20 or Index80 is still -1 after search
             </remarks>
             <param name="inData">Input argument #1</param>
             <param name="downEvents">Input argument #2</param>
             <param name="MsPerPoint">Input argument #3</param>
             <param name="startTime">Input argument #4</param>
             <param name="endTime">Input argument #5</param>
             <param name="parmList">Input argument #6</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.benEvents(System.Int32)">
             <summary>
             Provides the standard 0-input Object interface to the benEvents M-function.
             </summary>
             <remarks>
             M-Documentation:
             benEvents   4/23/10 last changed to bail out on slope calc if either
             Index20 or Index80 is still -1 after search
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.benEvents(System.Int32,System.Object)">
             <summary>
             Provides the standard 1-input Object interface to the benEvents M-function.
             </summary>
             <remarks>
             M-Documentation:
             benEvents   4/23/10 last changed to bail out on slope calc if either
             Index20 or Index80 is still -1 after search
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="inData">Input argument #1</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.benEvents(System.Int32,System.Object,System.Object)">
             <summary>
             Provides the standard 2-input Object interface to the benEvents M-function.
             </summary>
             <remarks>
             M-Documentation:
             benEvents   4/23/10 last changed to bail out on slope calc if either
             Index20 or Index80 is still -1 after search
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="inData">Input argument #1</param>
             <param name="downEvents">Input argument #2</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.benEvents(System.Int32,System.Object,System.Object,System.Object)">
             <summary>
             Provides the standard 3-input Object interface to the benEvents M-function.
             </summary>
             <remarks>
             M-Documentation:
             benEvents   4/23/10 last changed to bail out on slope calc if either
             Index20 or Index80 is still -1 after search
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="inData">Input argument #1</param>
             <param name="downEvents">Input argument #2</param>
             <param name="MsPerPoint">Input argument #3</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.benEvents(System.Int32,System.Object,System.Object,System.Object,System.Object)">
             <summary>
             Provides the standard 4-input Object interface to the benEvents M-function.
             </summary>
             <remarks>
             M-Documentation:
             benEvents   4/23/10 last changed to bail out on slope calc if either
             Index20 or Index80 is still -1 after search
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="inData">Input argument #1</param>
             <param name="downEvents">Input argument #2</param>
             <param name="MsPerPoint">Input argument #3</param>
             <param name="startTime">Input argument #4</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.benEvents(System.Int32,System.Object,System.Object,System.Object,System.Object,System.Object)">
             <summary>
             Provides the standard 5-input Object interface to the benEvents M-function.
             </summary>
             <remarks>
             M-Documentation:
             benEvents   4/23/10 last changed to bail out on slope calc if either
             Index20 or Index80 is still -1 after search
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="inData">Input argument #1</param>
             <param name="downEvents">Input argument #2</param>
             <param name="MsPerPoint">Input argument #3</param>
             <param name="startTime">Input argument #4</param>
             <param name="endTime">Input argument #5</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.benEvents(System.Int32,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
             <summary>
             Provides the standard 6-input Object interface to the benEvents M-function.
             </summary>
             <remarks>
             M-Documentation:
             benEvents   4/23/10 last changed to bail out on slope calc if either
             Index20 or Index80 is still -1 after search
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="inData">Input argument #1</param>
             <param name="downEvents">Input argument #2</param>
             <param name="MsPerPoint">Input argument #3</param>
             <param name="startTime">Input argument #4</param>
             <param name="endTime">Input argument #5</param>
             <param name="parmList">Input argument #6</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.benEvents(System.Int32,System.Object[]@,System.Object[],System.Object[])">
             <summary>
             Provides an interface for the benEvents function in which the input and output
             arguments are specified as an array of Objects.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             M-Documentation:
             benEvents   4/23/10 last changed to bail out on slope calc if either
             Index20 or Index80 is still -1 after search
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of Object output arguments</param>
             <param name= "argsIn">Array of Object input arguments</param>
             <param name= "varArgsIn">Array of Object representing variable input
             arguments</param>
            
        </member>
        <member name="M:mPhysNative.Class1.benEventsOld">
             <summary>
             Provides a single output, 0-input Objectinterface to the benEventsOld M-function.
             </summary>
             <remarks>
             M-Documentation:
             benEvents   9/5/09
             </remarks>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.benEventsOld(System.Object)">
             <summary>
             Provides a single output, 1-input Objectinterface to the benEventsOld M-function.
             </summary>
             <remarks>
             M-Documentation:
             benEvents   9/5/09
             </remarks>
             <param name="data">Input argument #1</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.benEventsOld(System.Object,System.Object)">
             <summary>
             Provides a single output, 2-input Objectinterface to the benEventsOld M-function.
             </summary>
             <remarks>
             M-Documentation:
             benEvents   9/5/09
             </remarks>
             <param name="data">Input argument #1</param>
             <param name="downEvents">Input argument #2</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.benEventsOld(System.Object,System.Object,System.Object)">
             <summary>
             Provides a single output, 3-input Objectinterface to the benEventsOld M-function.
             </summary>
             <remarks>
             M-Documentation:
             benEvents   9/5/09
             </remarks>
             <param name="data">Input argument #1</param>
             <param name="downEvents">Input argument #2</param>
             <param name="MsPerPoint">Input argument #3</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.benEventsOld(System.Object,System.Object,System.Object,System.Object)">
             <summary>
             Provides a single output, 4-input Objectinterface to the benEventsOld M-function.
             </summary>
             <remarks>
             M-Documentation:
             benEvents   9/5/09
             </remarks>
             <param name="data">Input argument #1</param>
             <param name="downEvents">Input argument #2</param>
             <param name="MsPerPoint">Input argument #3</param>
             <param name="startTime">Input argument #4</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.benEventsOld(System.Object,System.Object,System.Object,System.Object,System.Object)">
             <summary>
             Provides a single output, 5-input Objectinterface to the benEventsOld M-function.
             </summary>
             <remarks>
             M-Documentation:
             benEvents   9/5/09
             </remarks>
             <param name="data">Input argument #1</param>
             <param name="downEvents">Input argument #2</param>
             <param name="MsPerPoint">Input argument #3</param>
             <param name="startTime">Input argument #4</param>
             <param name="endTime">Input argument #5</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.benEventsOld(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
             <summary>
             Provides a single output, 6-input Objectinterface to the benEventsOld M-function.
             </summary>
             <remarks>
             M-Documentation:
             benEvents   9/5/09
             </remarks>
             <param name="data">Input argument #1</param>
             <param name="downEvents">Input argument #2</param>
             <param name="MsPerPoint">Input argument #3</param>
             <param name="startTime">Input argument #4</param>
             <param name="endTime">Input argument #5</param>
             <param name="parmList">Input argument #6</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.benEventsOld(System.Int32)">
             <summary>
             Provides the standard 0-input Object interface to the benEventsOld M-function.
             </summary>
             <remarks>
             M-Documentation:
             benEvents   9/5/09
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.benEventsOld(System.Int32,System.Object)">
             <summary>
             Provides the standard 1-input Object interface to the benEventsOld M-function.
             </summary>
             <remarks>
             M-Documentation:
             benEvents   9/5/09
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="data">Input argument #1</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.benEventsOld(System.Int32,System.Object,System.Object)">
             <summary>
             Provides the standard 2-input Object interface to the benEventsOld M-function.
             </summary>
             <remarks>
             M-Documentation:
             benEvents   9/5/09
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="data">Input argument #1</param>
             <param name="downEvents">Input argument #2</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.benEventsOld(System.Int32,System.Object,System.Object,System.Object)">
             <summary>
             Provides the standard 3-input Object interface to the benEventsOld M-function.
             </summary>
             <remarks>
             M-Documentation:
             benEvents   9/5/09
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="data">Input argument #1</param>
             <param name="downEvents">Input argument #2</param>
             <param name="MsPerPoint">Input argument #3</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.benEventsOld(System.Int32,System.Object,System.Object,System.Object,System.Object)">
             <summary>
             Provides the standard 4-input Object interface to the benEventsOld M-function.
             </summary>
             <remarks>
             M-Documentation:
             benEvents   9/5/09
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="data">Input argument #1</param>
             <param name="downEvents">Input argument #2</param>
             <param name="MsPerPoint">Input argument #3</param>
             <param name="startTime">Input argument #4</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.benEventsOld(System.Int32,System.Object,System.Object,System.Object,System.Object,System.Object)">
             <summary>
             Provides the standard 5-input Object interface to the benEventsOld M-function.
             </summary>
             <remarks>
             M-Documentation:
             benEvents   9/5/09
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="data">Input argument #1</param>
             <param name="downEvents">Input argument #2</param>
             <param name="MsPerPoint">Input argument #3</param>
             <param name="startTime">Input argument #4</param>
             <param name="endTime">Input argument #5</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.benEventsOld(System.Int32,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
             <summary>
             Provides the standard 6-input Object interface to the benEventsOld M-function.
             </summary>
             <remarks>
             M-Documentation:
             benEvents   9/5/09
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="data">Input argument #1</param>
             <param name="downEvents">Input argument #2</param>
             <param name="MsPerPoint">Input argument #3</param>
             <param name="startTime">Input argument #4</param>
             <param name="endTime">Input argument #5</param>
             <param name="parmList">Input argument #6</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.benEventsOld(System.Int32,System.Object[]@,System.Object[],System.Object[])">
             <summary>
             Provides an interface for the benEventsOld function in which the input and output
             arguments are specified as an array of Objects.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             M-Documentation:
             benEvents   9/5/09
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of Object output arguments</param>
             <param name= "argsIn">Array of Object input arguments</param>
             <param name= "varArgsIn">Array of Object representing variable input
             arguments</param>
            
        </member>
        <member name="M:mPhysNative.Class1.BenFitLine">
             <summary>
             Provides a single output, 0-input Objectinterface to the BenFitLine M-function.
             </summary>
             <remarks>
             M-Documentation:
             fits line to data
             </remarks>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.BenFitLine(System.Object)">
             <summary>
             Provides a single output, 1-input Objectinterface to the BenFitLine M-function.
             </summary>
             <remarks>
             M-Documentation:
             fits line to data
             </remarks>
             <param name="yData">Input argument #1</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.BenFitLine(System.Object,System.Object)">
             <summary>
             Provides a single output, 2-input Objectinterface to the BenFitLine M-function.
             </summary>
             <remarks>
             M-Documentation:
             fits line to data
             </remarks>
             <param name="yData">Input argument #1</param>
             <param name="timePerPoint">Input argument #2</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.BenFitLine(System.Int32)">
             <summary>
             Provides the standard 0-input Object interface to the BenFitLine M-function.
             </summary>
             <remarks>
             M-Documentation:
             fits line to data
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.BenFitLine(System.Int32,System.Object)">
             <summary>
             Provides the standard 1-input Object interface to the BenFitLine M-function.
             </summary>
             <remarks>
             M-Documentation:
             fits line to data
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="yData">Input argument #1</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.BenFitLine(System.Int32,System.Object,System.Object)">
             <summary>
             Provides the standard 2-input Object interface to the BenFitLine M-function.
             </summary>
             <remarks>
             M-Documentation:
             fits line to data
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="yData">Input argument #1</param>
             <param name="timePerPoint">Input argument #2</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.BenFitLine(System.Int32,System.Object[]@,System.Object[],System.Object[])">
             <summary>
             Provides an interface for the BenFitLine function in which the input and output
             arguments are specified as an array of Objects.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             M-Documentation:
             fits line to data
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of Object output arguments</param>
             <param name= "argsIn">Array of Object input arguments</param>
             <param name= "varArgsIn">Array of Object representing variable input
             arguments</param>
            
        </member>
        <member name="M:mPhysNative.Class1.BenFitPolynomial">
             <summary>
             Provides a single output, 0-input Objectinterface to the BenFitPolynomial
             M-function.
             </summary>
             <remarks>
             M-Documentation:
             fits line to data
             </remarks>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.BenFitPolynomial(System.Object)">
             <summary>
             Provides a single output, 1-input Objectinterface to the BenFitPolynomial
             M-function.
             </summary>
             <remarks>
             M-Documentation:
             fits line to data
             </remarks>
             <param name="yData">Input argument #1</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.BenFitPolynomial(System.Object,System.Object)">
             <summary>
             Provides a single output, 2-input Objectinterface to the BenFitPolynomial
             M-function.
             </summary>
             <remarks>
             M-Documentation:
             fits line to data
             </remarks>
             <param name="yData">Input argument #1</param>
             <param name="timePerPoint">Input argument #2</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.BenFitPolynomial(System.Object,System.Object,System.Object)">
             <summary>
             Provides a single output, 3-input Objectinterface to the BenFitPolynomial
             M-function.
             </summary>
             <remarks>
             M-Documentation:
             fits line to data
             </remarks>
             <param name="yData">Input argument #1</param>
             <param name="timePerPoint">Input argument #2</param>
             <param name="PolyOrder">Input argument #3</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.BenFitPolynomial(System.Int32)">
             <summary>
             Provides the standard 0-input Object interface to the BenFitPolynomial
             M-function.
             </summary>
             <remarks>
             M-Documentation:
             fits line to data
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.BenFitPolynomial(System.Int32,System.Object)">
             <summary>
             Provides the standard 1-input Object interface to the BenFitPolynomial
             M-function.
             </summary>
             <remarks>
             M-Documentation:
             fits line to data
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="yData">Input argument #1</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.BenFitPolynomial(System.Int32,System.Object,System.Object)">
             <summary>
             Provides the standard 2-input Object interface to the BenFitPolynomial
             M-function.
             </summary>
             <remarks>
             M-Documentation:
             fits line to data
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="yData">Input argument #1</param>
             <param name="timePerPoint">Input argument #2</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.BenFitPolynomial(System.Int32,System.Object,System.Object,System.Object)">
             <summary>
             Provides the standard 3-input Object interface to the BenFitPolynomial
             M-function.
             </summary>
             <remarks>
             M-Documentation:
             fits line to data
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="yData">Input argument #1</param>
             <param name="timePerPoint">Input argument #2</param>
             <param name="PolyOrder">Input argument #3</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.BenFitPolynomial(System.Int32,System.Object[]@,System.Object[],System.Object[])">
             <summary>
             Provides an interface for the BenFitPolynomial function in which the input and
             output
             arguments are specified as an array of Objects.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             M-Documentation:
             fits line to data
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of Object output arguments</param>
             <param name= "argsIn">Array of Object input arguments</param>
             <param name= "varArgsIn">Array of Object representing variable input
             arguments</param>
            
        </member>
        <member name="M:mPhysNative.Class1.benGenerateStim">
             <summary>
             Provides a single output, 0-input Objectinterface to the benGenerateStim
             M-function.
             </summary>
             <remarks>
             M-Documentation:
             goes through DAC data array and makes fake stim
             last revised 29 Jan 2012 BWS
             </remarks>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.benGenerateStim(System.Object)">
             <summary>
             Provides a single output, 1-input Objectinterface to the benGenerateStim
             M-function.
             </summary>
             <remarks>
             M-Documentation:
             goes through DAC data array and makes fake stim
             last revised 29 Jan 2012 BWS
             </remarks>
             <param name="zData">Input argument #1</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.benGenerateStim(System.Object,System.Object)">
             <summary>
             Provides a single output, 2-input Objectinterface to the benGenerateStim
             M-function.
             </summary>
             <remarks>
             M-Documentation:
             goes through DAC data array and makes fake stim
             last revised 29 Jan 2012 BWS
             </remarks>
             <param name="zData">Input argument #1</param>
             <param name="chanNum">Input argument #2</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.benGenerateStim(System.Int32)">
             <summary>
             Provides the standard 0-input Object interface to the benGenerateStim M-function.
             </summary>
             <remarks>
             M-Documentation:
             goes through DAC data array and makes fake stim
             last revised 29 Jan 2012 BWS
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.benGenerateStim(System.Int32,System.Object)">
             <summary>
             Provides the standard 1-input Object interface to the benGenerateStim M-function.
             </summary>
             <remarks>
             M-Documentation:
             goes through DAC data array and makes fake stim
             last revised 29 Jan 2012 BWS
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="zData">Input argument #1</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.benGenerateStim(System.Int32,System.Object,System.Object)">
             <summary>
             Provides the standard 2-input Object interface to the benGenerateStim M-function.
             </summary>
             <remarks>
             M-Documentation:
             goes through DAC data array and makes fake stim
             last revised 29 Jan 2012 BWS
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="zData">Input argument #1</param>
             <param name="chanNum">Input argument #2</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.benGenerateStim(System.Int32,System.Object[]@,System.Object[],System.Object[])">
             <summary>
             Provides an interface for the benGenerateStim function in which the input and
             output
             arguments are specified as an array of Objects.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             M-Documentation:
             goes through DAC data array and makes fake stim
             last revised 29 Jan 2012 BWS
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of Object output arguments</param>
             <param name= "argsIn">Array of Object input arguments</param>
             <param name= "varArgsIn">Array of Object representing variable input
             arguments</param>
            
        </member>
        <member name="M:mPhysNative.Class1.benPeakAllPoints">
             <summary>
             Provides a single output, 0-input Objectinterface to the benPeakAllPoints
             M-function.
             </summary>
             <remarks>
             M-Documentation:
             this function returns the integer value that represents the peak of the
             all points histogram of the data array
             </remarks>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.benPeakAllPoints(System.Object)">
             <summary>
             Provides a single output, 1-input Objectinterface to the benPeakAllPoints
             M-function.
             </summary>
             <remarks>
             M-Documentation:
             this function returns the integer value that represents the peak of the
             all points histogram of the data array
             </remarks>
             <param name="inData">Input argument #1</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.benPeakAllPoints(System.Int32)">
             <summary>
             Provides the standard 0-input Object interface to the benPeakAllPoints
             M-function.
             </summary>
             <remarks>
             M-Documentation:
             this function returns the integer value that represents the peak of the
             all points histogram of the data array
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.benPeakAllPoints(System.Int32,System.Object)">
             <summary>
             Provides the standard 1-input Object interface to the benPeakAllPoints
             M-function.
             </summary>
             <remarks>
             M-Documentation:
             this function returns the integer value that represents the peak of the
             all points histogram of the data array
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="inData">Input argument #1</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.benPeakAllPoints(System.Int32,System.Object[]@,System.Object[],System.Object[])">
             <summary>
             Provides an interface for the benPeakAllPoints function in which the input and
             output
             arguments are specified as an array of Objects.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             M-Documentation:
             this function returns the integer value that represents the peak of the
             all points histogram of the data array
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of Object output arguments</param>
             <param name= "argsIn">Array of Object input arguments</param>
             <param name= "varArgsIn">Array of Object representing variable input
             arguments</param>
            
        </member>
        <member name="M:mPhysNative.Class1.benPeakAllPointsTenths">
             <summary>
             Provides a single output, 0-input Objectinterface to the benPeakAllPointsTenths
             M-function.
             </summary>
             <remarks>
             M-Documentation:
             this function returns the integer value that represents the peak of the
             all points histogram of the data array
             </remarks>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.benPeakAllPointsTenths(System.Object)">
             <summary>
             Provides a single output, 1-input Objectinterface to the benPeakAllPointsTenths
             M-function.
             </summary>
             <remarks>
             M-Documentation:
             this function returns the integer value that represents the peak of the
             all points histogram of the data array
             </remarks>
             <param name="inData">Input argument #1</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.benPeakAllPointsTenths(System.Int32)">
             <summary>
             Provides the standard 0-input Object interface to the benPeakAllPointsTenths
             M-function.
             </summary>
             <remarks>
             M-Documentation:
             this function returns the integer value that represents the peak of the
             all points histogram of the data array
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.benPeakAllPointsTenths(System.Int32,System.Object)">
             <summary>
             Provides the standard 1-input Object interface to the benPeakAllPointsTenths
             M-function.
             </summary>
             <remarks>
             M-Documentation:
             this function returns the integer value that represents the peak of the
             all points histogram of the data array
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="inData">Input argument #1</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.benPeakAllPointsTenths(System.Int32,System.Object[]@,System.Object[],System.Object[])">
             <summary>
             Provides an interface for the benPeakAllPointsTenths function in which the input
             and output
             arguments are specified as an array of Objects.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             M-Documentation:
             this function returns the integer value that represents the peak of the
             all points histogram of the data array
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of Object output arguments</param>
             <param name= "argsIn">Array of Object input arguments</param>
             <param name= "varArgsIn">Array of Object representing variable input
             arguments</param>
            
        </member>
        <member name="M:mPhysNative.Class1.benProtocolViewer">
             <summary>
             Provides a void output, 0-input Objectinterface to the benProtocolViewer
             M-function.
             </summary>
             <remarks>
             M-Documentation:
             loadProtocol(fileName);
             </remarks>
            
        </member>
        <member name="M:mPhysNative.Class1.benProtocolViewer(System.Object)">
             <summary>
             Provides a void output, 1-input Objectinterface to the benProtocolViewer
             M-function.
             </summary>
             <remarks>
             M-Documentation:
             loadProtocol(fileName);
             </remarks>
             <param name="fileName">Input argument #1</param>
            
        </member>
        <member name="M:mPhysNative.Class1.benProtocolViewer(System.Int32)">
             <summary>
             Provides the standard 0-input Object interface to the benProtocolViewer
             M-function.
             </summary>
             <remarks>
             M-Documentation:
             loadProtocol(fileName);
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.benProtocolViewer(System.Int32,System.Object)">
             <summary>
             Provides the standard 1-input Object interface to the benProtocolViewer
             M-function.
             </summary>
             <remarks>
             M-Documentation:
             loadProtocol(fileName);
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="fileName">Input argument #1</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.benProtocolViewer(System.Int32,System.Object[]@,System.Object[],System.Object[])">
             <summary>
             Provides an interface for the benProtocolViewer function in which the input and
             output
             arguments are specified as an array of Objects.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             M-Documentation:
             loadProtocol(fileName);
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of Object output arguments</param>
             <param name= "argsIn">Array of Object input arguments</param>
             <param name= "varArgsIn">Array of Object representing variable input
             arguments</param>
            
        </member>
        <member name="M:mPhysNative.Class1.benStats1Array">
             <summary>
             Provides a single output, 0-input Objectinterface to the benStats1Array
             M-function.
             </summary>
             <remarks>
             </remarks>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.benStats1Array(System.Object)">
             <summary>
             Provides a single output, 1-input Objectinterface to the benStats1Array
             M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="inArray1">Input argument #1</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.benStats1Array(System.Object,System.Object)">
             <summary>
             Provides a single output, 2-input Objectinterface to the benStats1Array
             M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="inArray1">Input argument #1</param>
             <param name="testValue">Input argument #2</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.benStats1Array(System.Int32)">
             <summary>
             Provides the standard 0-input Object interface to the benStats1Array M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.benStats1Array(System.Int32,System.Object)">
             <summary>
             Provides the standard 1-input Object interface to the benStats1Array M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="inArray1">Input argument #1</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.benStats1Array(System.Int32,System.Object,System.Object)">
             <summary>
             Provides the standard 2-input Object interface to the benStats1Array M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="inArray1">Input argument #1</param>
             <param name="testValue">Input argument #2</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.benStats1Array(System.Int32,System.Object[]@,System.Object[],System.Object[])">
             <summary>
             Provides an interface for the benStats1Array function in which the input and
             output
             arguments are specified as an array of Objects.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of Object output arguments</param>
             <param name= "argsIn">Array of Object input arguments</param>
             <param name= "varArgsIn">Array of Object representing variable input
             arguments</param>
            
        </member>
        <member name="M:mPhysNative.Class1.benStats2Arrays">
             <summary>
             Provides a single output, 0-input Objectinterface to the benStats2Arrays
             M-function.
             </summary>
             <remarks>
             </remarks>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.benStats2Arrays(System.Object)">
             <summary>
             Provides a single output, 1-input Objectinterface to the benStats2Arrays
             M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="inArray1">Input argument #1</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.benStats2Arrays(System.Object,System.Object)">
             <summary>
             Provides a single output, 2-input Objectinterface to the benStats2Arrays
             M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="inArray1">Input argument #1</param>
             <param name="inArray2">Input argument #2</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.benStats2Arrays(System.Int32)">
             <summary>
             Provides the standard 0-input Object interface to the benStats2Arrays M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.benStats2Arrays(System.Int32,System.Object)">
             <summary>
             Provides the standard 1-input Object interface to the benStats2Arrays M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="inArray1">Input argument #1</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.benStats2Arrays(System.Int32,System.Object,System.Object)">
             <summary>
             Provides the standard 2-input Object interface to the benStats2Arrays M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="inArray1">Input argument #1</param>
             <param name="inArray2">Input argument #2</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.benStats2Arrays(System.Int32,System.Object[]@,System.Object[],System.Object[])">
             <summary>
             Provides an interface for the benStats2Arrays function in which the input and
             output
             arguments are specified as an array of Objects.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of Object output arguments</param>
             <param name= "argsIn">Array of Object input arguments</param>
             <param name= "varArgsIn">Array of Object representing variable input
             arguments</param>
            
        </member>
        <member name="M:mPhysNative.Class1.BenVectorMedian">
             <summary>
             Provides a single output, 0-input Objectinterface to the BenVectorMedian
             M-function.
             </summary>
             <remarks>
             </remarks>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.BenVectorMedian(System.Object)">
             <summary>
             Provides a single output, 1-input Objectinterface to the BenVectorMedian
             M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="inArray">Input argument #1</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.BenVectorMedian(System.Int32)">
             <summary>
             Provides the standard 0-input Object interface to the BenVectorMedian M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.BenVectorMedian(System.Int32,System.Object)">
             <summary>
             Provides the standard 1-input Object interface to the BenVectorMedian M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="inArray">Input argument #1</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.BenVectorMedian(System.Int32,System.Object[]@,System.Object[],System.Object[])">
             <summary>
             Provides an interface for the BenVectorMedian function in which the input and
             output
             arguments are specified as an array of Objects.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of Object output arguments</param>
             <param name= "argsIn">Array of Object input arguments</param>
             <param name= "varArgsIn">Array of Object representing variable input
             arguments</param>
            
        </member>
        <member name="M:mPhysNative.Class1.BenWrapPolyFit">
             <summary>
             Provides a single output, 0-input Objectinterface to the BenWrapPolyFit
             M-function.
             </summary>
             <remarks>
             M-Documentation:
             fits line to data
             </remarks>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.BenWrapPolyFit(System.Object)">
             <summary>
             Provides a single output, 1-input Objectinterface to the BenWrapPolyFit
             M-function.
             </summary>
             <remarks>
             M-Documentation:
             fits line to data
             </remarks>
             <param name="yData">Input argument #1</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.BenWrapPolyFit(System.Object,System.Object)">
             <summary>
             Provides a single output, 2-input Objectinterface to the BenWrapPolyFit
             M-function.
             </summary>
             <remarks>
             M-Documentation:
             fits line to data
             </remarks>
             <param name="yData">Input argument #1</param>
             <param name="timePerPoint">Input argument #2</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.BenWrapPolyFit(System.Object,System.Object,System.Object)">
             <summary>
             Provides a single output, 3-input Objectinterface to the BenWrapPolyFit
             M-function.
             </summary>
             <remarks>
             M-Documentation:
             fits line to data
             </remarks>
             <param name="yData">Input argument #1</param>
             <param name="timePerPoint">Input argument #2</param>
             <param name="PolyOrder">Input argument #3</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.BenWrapPolyFit(System.Int32)">
             <summary>
             Provides the standard 0-input Object interface to the BenWrapPolyFit M-function.
             </summary>
             <remarks>
             M-Documentation:
             fits line to data
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.BenWrapPolyFit(System.Int32,System.Object)">
             <summary>
             Provides the standard 1-input Object interface to the BenWrapPolyFit M-function.
             </summary>
             <remarks>
             M-Documentation:
             fits line to data
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="yData">Input argument #1</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.BenWrapPolyFit(System.Int32,System.Object,System.Object)">
             <summary>
             Provides the standard 2-input Object interface to the BenWrapPolyFit M-function.
             </summary>
             <remarks>
             M-Documentation:
             fits line to data
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="yData">Input argument #1</param>
             <param name="timePerPoint">Input argument #2</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.BenWrapPolyFit(System.Int32,System.Object,System.Object,System.Object)">
             <summary>
             Provides the standard 3-input Object interface to the BenWrapPolyFit M-function.
             </summary>
             <remarks>
             M-Documentation:
             fits line to data
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="yData">Input argument #1</param>
             <param name="timePerPoint">Input argument #2</param>
             <param name="PolyOrder">Input argument #3</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.BenWrapPolyFit(System.Int32,System.Object[]@,System.Object[],System.Object[])">
             <summary>
             Provides an interface for the BenWrapPolyFit function in which the input and
             output
             arguments are specified as an array of Objects.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             M-Documentation:
             fits line to data
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of Object output arguments</param>
             <param name= "argsIn">Array of Object input arguments</param>
             <param name= "varArgsIn">Array of Object representing variable input
             arguments</param>
            
        </member>
        <member name="M:mPhysNative.Class1.BenWrapSGolayFilt">
             <summary>
             Provides a single output, 0-input Objectinterface to the BenWrapSGolayFilt
             M-function.
             </summary>
             <remarks>
             </remarks>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.BenWrapSGolayFilt(System.Object)">
             <summary>
             Provides a single output, 1-input Objectinterface to the BenWrapSGolayFilt
             M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="InVector">Input argument #1</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.BenWrapSGolayFilt(System.Object,System.Object)">
             <summary>
             Provides a single output, 2-input Objectinterface to the BenWrapSGolayFilt
             M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="InVector">Input argument #1</param>
             <param name="PolyOrder">Input argument #2</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.BenWrapSGolayFilt(System.Object,System.Object,System.Object)">
             <summary>
             Provides a single output, 3-input Objectinterface to the BenWrapSGolayFilt
             M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="InVector">Input argument #1</param>
             <param name="PolyOrder">Input argument #2</param>
             <param name="FrameSize">Input argument #3</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.BenWrapSGolayFilt(System.Int32)">
             <summary>
             Provides the standard 0-input Object interface to the BenWrapSGolayFilt
             M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.BenWrapSGolayFilt(System.Int32,System.Object)">
             <summary>
             Provides the standard 1-input Object interface to the BenWrapSGolayFilt
             M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="InVector">Input argument #1</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.BenWrapSGolayFilt(System.Int32,System.Object,System.Object)">
             <summary>
             Provides the standard 2-input Object interface to the BenWrapSGolayFilt
             M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="InVector">Input argument #1</param>
             <param name="PolyOrder">Input argument #2</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.BenWrapSGolayFilt(System.Int32,System.Object,System.Object,System.Object)">
             <summary>
             Provides the standard 3-input Object interface to the BenWrapSGolayFilt
             M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="InVector">Input argument #1</param>
             <param name="PolyOrder">Input argument #2</param>
             <param name="FrameSize">Input argument #3</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.BenWrapSGolayFilt(System.Int32,System.Object[]@,System.Object[],System.Object[])">
             <summary>
             Provides an interface for the BenWrapSGolayFilt function in which the input and
             output
             arguments are specified as an array of Objects.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of Object output arguments</param>
             <param name= "argsIn">Array of Object input arguments</param>
             <param name= "varArgsIn">Array of Object representing variable input
             arguments</param>
            
        </member>
        <member name="M:mPhysNative.Class1.besselFilter">
             <summary>
             Provides a single output, 0-input Objectinterface to the besselFilter M-function.
             </summary>
             <remarks>
             </remarks>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.besselFilter(System.Object)">
             <summary>
             Provides a single output, 1-input Objectinterface to the besselFilter M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="inData">Input argument #1</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.besselFilter(System.Object,System.Object)">
             <summary>
             Provides a single output, 2-input Objectinterface to the besselFilter M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="inData">Input argument #1</param>
             <param name="samplingFreq">Input argument #2</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.besselFilter(System.Object,System.Object,System.Object)">
             <summary>
             Provides a single output, 3-input Objectinterface to the besselFilter M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="inData">Input argument #1</param>
             <param name="samplingFreq">Input argument #2</param>
             <param name="order">Input argument #3</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.besselFilter(System.Object,System.Object,System.Object,System.Object)">
             <summary>
             Provides a single output, 4-input Objectinterface to the besselFilter M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="inData">Input argument #1</param>
             <param name="samplingFreq">Input argument #2</param>
             <param name="order">Input argument #3</param>
             <param name="cutOff">Input argument #4</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.besselFilter(System.Int32)">
             <summary>
             Provides the standard 0-input Object interface to the besselFilter M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.besselFilter(System.Int32,System.Object)">
             <summary>
             Provides the standard 1-input Object interface to the besselFilter M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="inData">Input argument #1</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.besselFilter(System.Int32,System.Object,System.Object)">
             <summary>
             Provides the standard 2-input Object interface to the besselFilter M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="inData">Input argument #1</param>
             <param name="samplingFreq">Input argument #2</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.besselFilter(System.Int32,System.Object,System.Object,System.Object)">
             <summary>
             Provides the standard 3-input Object interface to the besselFilter M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="inData">Input argument #1</param>
             <param name="samplingFreq">Input argument #2</param>
             <param name="order">Input argument #3</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.besselFilter(System.Int32,System.Object,System.Object,System.Object,System.Object)">
             <summary>
             Provides the standard 4-input Object interface to the besselFilter M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="inData">Input argument #1</param>
             <param name="samplingFreq">Input argument #2</param>
             <param name="order">Input argument #3</param>
             <param name="cutOff">Input argument #4</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.besselFilter(System.Int32,System.Object[]@,System.Object[],System.Object[])">
             <summary>
             Provides an interface for the besselFilter function in which the input and output
             arguments are specified as an array of Objects.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of Object output arguments</param>
             <param name= "argsIn">Array of Object input arguments</param>
             <param name= "varArgsIn">Array of Object representing variable input
             arguments</param>
            
        </member>
        <member name="M:mPhysNative.Class1.blankAPsWithConstant">
             <summary>
             Provides a single output, 0-input Objectinterface to the blankAPsWithConstant
             M-function.
             </summary>
             <remarks>
             </remarks>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.blankAPsWithConstant(System.Object)">
             <summary>
             Provides a single output, 1-input Objectinterface to the blankAPsWithConstant
             M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="inData">Input argument #1</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.blankAPsWithConstant(System.Object,System.Object)">
             <summary>
             Provides a single output, 2-input Objectinterface to the blankAPsWithConstant
             M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="inData">Input argument #1</param>
             <param name="thresh">Input argument #2</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.blankAPsWithConstant(System.Int32)">
             <summary>
             Provides the standard 0-input Object interface to the blankAPsWithConstant
             M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.blankAPsWithConstant(System.Int32,System.Object)">
             <summary>
             Provides the standard 1-input Object interface to the blankAPsWithConstant
             M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="inData">Input argument #1</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.blankAPsWithConstant(System.Int32,System.Object,System.Object)">
             <summary>
             Provides the standard 2-input Object interface to the blankAPsWithConstant
             M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="inData">Input argument #1</param>
             <param name="thresh">Input argument #2</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.blankAPsWithConstant(System.Int32,System.Object[]@,System.Object[],System.Object[])">
             <summary>
             Provides an interface for the blankAPsWithConstant function in which the input
             and output
             arguments are specified as an array of Objects.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of Object output arguments</param>
             <param name= "argsIn">Array of Object input arguments</param>
             <param name= "varArgsIn">Array of Object representing variable input
             arguments</param>
            
        </member>
        <member name="M:mPhysNative.Class1.blankAPsWithNaNs">
             <summary>
             Provides a single output, 0-input Objectinterface to the blankAPsWithNaNs
             M-function.
             </summary>
             <remarks>
             </remarks>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.blankAPsWithNaNs(System.Object)">
             <summary>
             Provides a single output, 1-input Objectinterface to the blankAPsWithNaNs
             M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="inData">Input argument #1</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.blankAPsWithNaNs(System.Object,System.Object)">
             <summary>
             Provides a single output, 2-input Objectinterface to the blankAPsWithNaNs
             M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="inData">Input argument #1</param>
             <param name="thresh">Input argument #2</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.blankAPsWithNaNs(System.Int32)">
             <summary>
             Provides the standard 0-input Object interface to the blankAPsWithNaNs
             M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.blankAPsWithNaNs(System.Int32,System.Object)">
             <summary>
             Provides the standard 1-input Object interface to the blankAPsWithNaNs
             M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="inData">Input argument #1</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.blankAPsWithNaNs(System.Int32,System.Object,System.Object)">
             <summary>
             Provides the standard 2-input Object interface to the blankAPsWithNaNs
             M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="inData">Input argument #1</param>
             <param name="thresh">Input argument #2</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.blankAPsWithNaNs(System.Int32,System.Object[]@,System.Object[],System.Object[])">
             <summary>
             Provides an interface for the blankAPsWithNaNs function in which the input and
             output
             arguments are specified as an array of Objects.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of Object output arguments</param>
             <param name= "argsIn">Array of Object input arguments</param>
             <param name= "varArgsIn">Array of Object representing variable input
             arguments</param>
            
        </member>
        <member name="M:mPhysNative.Class1.burstingProbability">
             <summary>
             Provides a single output, 0-input Objectinterface to the burstingProbability
             M-function.
             </summary>
             <remarks>
             M-Documentation:
             pValue = burstingProbability(traceData, threshTime);
             pValue = burstingProbability(eventTimes, threshTime);
             defaults:
             threshTime = mean(interevent_interval);
             use the joint distribution (left-handed interevent interval vs right-
             handed interevent interval) to determine whether the events are bursty,
             as defined by more events with one of their nearest neighbors closer by
             in time than an evenly-spaced event distribution would assume
             </remarks>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.burstingProbability(System.Object)">
             <summary>
             Provides a single output, 1-input Objectinterface to the burstingProbability
             M-function.
             </summary>
             <remarks>
             M-Documentation:
             pValue = burstingProbability(traceData, threshTime);
             pValue = burstingProbability(eventTimes, threshTime);
             defaults:
             threshTime = mean(interevent_interval);
             use the joint distribution (left-handed interevent interval vs right-
             handed interevent interval) to determine whether the events are bursty,
             as defined by more events with one of their nearest neighbors closer by
             in time than an evenly-spaced event distribution would assume
             </remarks>
             <param name="inData">Input argument #1</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.burstingProbability(System.Object,System.Object)">
             <summary>
             Provides a single output, 2-input Objectinterface to the burstingProbability
             M-function.
             </summary>
             <remarks>
             M-Documentation:
             pValue = burstingProbability(traceData, threshTime);
             pValue = burstingProbability(eventTimes, threshTime);
             defaults:
             threshTime = mean(interevent_interval);
             use the joint distribution (left-handed interevent interval vs right-
             handed interevent interval) to determine whether the events are bursty,
             as defined by more events with one of their nearest neighbors closer by
             in time than an evenly-spaced event distribution would assume
             </remarks>
             <param name="inData">Input argument #1</param>
             <param name="timePerPoint">Input argument #2</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.burstingProbability(System.Object,System.Object,System.Object)">
             <summary>
             Provides a single output, 3-input Objectinterface to the burstingProbability
             M-function.
             </summary>
             <remarks>
             M-Documentation:
             pValue = burstingProbability(traceData, threshTime);
             pValue = burstingProbability(eventTimes, threshTime);
             defaults:
             threshTime = mean(interevent_interval);
             use the joint distribution (left-handed interevent interval vs right-
             handed interevent interval) to determine whether the events are bursty,
             as defined by more events with one of their nearest neighbors closer by
             in time than an evenly-spaced event distribution would assume
             </remarks>
             <param name="inData">Input argument #1</param>
             <param name="timePerPoint">Input argument #2</param>
             <param name="threshTime">Input argument #3</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.burstingProbability(System.Int32)">
             <summary>
             Provides the standard 0-input Object interface to the burstingProbability
             M-function.
             </summary>
             <remarks>
             M-Documentation:
             pValue = burstingProbability(traceData, threshTime);
             pValue = burstingProbability(eventTimes, threshTime);
             defaults:
             threshTime = mean(interevent_interval);
             use the joint distribution (left-handed interevent interval vs right-
             handed interevent interval) to determine whether the events are bursty,
             as defined by more events with one of their nearest neighbors closer by
             in time than an evenly-spaced event distribution would assume
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.burstingProbability(System.Int32,System.Object)">
             <summary>
             Provides the standard 1-input Object interface to the burstingProbability
             M-function.
             </summary>
             <remarks>
             M-Documentation:
             pValue = burstingProbability(traceData, threshTime);
             pValue = burstingProbability(eventTimes, threshTime);
             defaults:
             threshTime = mean(interevent_interval);
             use the joint distribution (left-handed interevent interval vs right-
             handed interevent interval) to determine whether the events are bursty,
             as defined by more events with one of their nearest neighbors closer by
             in time than an evenly-spaced event distribution would assume
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="inData">Input argument #1</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.burstingProbability(System.Int32,System.Object,System.Object)">
             <summary>
             Provides the standard 2-input Object interface to the burstingProbability
             M-function.
             </summary>
             <remarks>
             M-Documentation:
             pValue = burstingProbability(traceData, threshTime);
             pValue = burstingProbability(eventTimes, threshTime);
             defaults:
             threshTime = mean(interevent_interval);
             use the joint distribution (left-handed interevent interval vs right-
             handed interevent interval) to determine whether the events are bursty,
             as defined by more events with one of their nearest neighbors closer by
             in time than an evenly-spaced event distribution would assume
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="inData">Input argument #1</param>
             <param name="timePerPoint">Input argument #2</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.burstingProbability(System.Int32,System.Object,System.Object,System.Object)">
             <summary>
             Provides the standard 3-input Object interface to the burstingProbability
             M-function.
             </summary>
             <remarks>
             M-Documentation:
             pValue = burstingProbability(traceData, threshTime);
             pValue = burstingProbability(eventTimes, threshTime);
             defaults:
             threshTime = mean(interevent_interval);
             use the joint distribution (left-handed interevent interval vs right-
             handed interevent interval) to determine whether the events are bursty,
             as defined by more events with one of their nearest neighbors closer by
             in time than an evenly-spaced event distribution would assume
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="inData">Input argument #1</param>
             <param name="timePerPoint">Input argument #2</param>
             <param name="threshTime">Input argument #3</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.burstingProbability(System.Int32,System.Object[]@,System.Object[],System.Object[])">
             <summary>
             Provides an interface for the burstingProbability function in which the input and
             output
             arguments are specified as an array of Objects.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             M-Documentation:
             pValue = burstingProbability(traceData, threshTime);
             pValue = burstingProbability(eventTimes, threshTime);
             defaults:
             threshTime = mean(interevent_interval);
             use the joint distribution (left-handed interevent interval vs right-
             handed interevent interval) to determine whether the events are bursty,
             as defined by more events with one of their nearest neighbors closer by
             in time than an evenly-spaced event distribution would assume
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of Object output arguments</param>
             <param name= "argsIn">Array of Object input arguments</param>
             <param name= "varArgsIn">Array of Object representing variable input
             arguments</param>
            
        </member>
        <member name="M:mPhysNative.Class1.calcBurstProb">
             <summary>
             Provides a single output, 0-input Objectinterface to the calcBurstProb
             M-function.
             </summary>
             <remarks>
             </remarks>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.calcBurstProb(System.Object[])">
             <summary>
             Provides a single output, 1-input Objectinterface to the calcBurstProb
             M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="varargin">Array of Objects representing the input arguments 1
             through varargin.length</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.calcBurstProb(System.Int32)">
             <summary>
             Provides the standard 0-input Object interface to the calcBurstProb M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.calcBurstProb(System.Int32,System.Object[])">
             <summary>
             Provides the standard 1-input Object interface to the calcBurstProb M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="varargin">Array of Objects representing the input arguments 1
             through varargin.length</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.calcBurstProb(System.Int32,System.Object[]@,System.Object[],System.Object[])">
             <summary>
             Provides an interface for the calcBurstProb function in which the input and
             output
             arguments are specified as an array of Objects.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of Object output arguments</param>
             <param name= "argsIn">Array of Object input arguments</param>
             <param name= "varArgsIn">Array of Object representing variable input
             arguments</param>
            
        </member>
        <member name="M:mPhysNative.Class1.calcMean">
             <summary>
             Provides a single output, 0-input Objectinterface to the calcMean M-function.
             </summary>
             <remarks>
             M-Documentation:
             find the greatest value of the all points histogram
             meanValue = calcMean(inData);
             </remarks>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.calcMean(System.Object)">
             <summary>
             Provides a single output, 1-input Objectinterface to the calcMean M-function.
             </summary>
             <remarks>
             M-Documentation:
             find the greatest value of the all points histogram
             meanValue = calcMean(inData);
             </remarks>
             <param name="inData">Input argument #1</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.calcMean(System.Int32)">
             <summary>
             Provides the standard 0-input Object interface to the calcMean M-function.
             </summary>
             <remarks>
             M-Documentation:
             find the greatest value of the all points histogram
             meanValue = calcMean(inData);
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.calcMean(System.Int32,System.Object)">
             <summary>
             Provides the standard 1-input Object interface to the calcMean M-function.
             </summary>
             <remarks>
             M-Documentation:
             find the greatest value of the all points histogram
             meanValue = calcMean(inData);
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="inData">Input argument #1</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.calcMean(System.Int32,System.Object[]@,System.Object[],System.Object[])">
             <summary>
             Provides an interface for the calcMean function in which the input and output
             arguments are specified as an array of Objects.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             M-Documentation:
             find the greatest value of the all points histogram
             meanValue = calcMean(inData);
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of Object output arguments</param>
             <param name= "argsIn">Array of Object input arguments</param>
             <param name= "varArgsIn">Array of Object representing variable input
             arguments</param>
            
        </member>
        <member name="M:mPhysNative.Class1.calcSTA">
             <summary>
             Provides a single output, 0-input Objectinterface to the calcSTA M-function.
             </summary>
             <remarks>
             </remarks>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.calcSTA(System.Object[])">
             <summary>
             Provides a single output, 1-input Objectinterface to the calcSTA M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="varargin">Array of Objects representing the input arguments 1
             through varargin.length</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.calcSTA(System.Int32)">
             <summary>
             Provides the standard 0-input Object interface to the calcSTA M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.calcSTA(System.Int32,System.Object[])">
             <summary>
             Provides the standard 1-input Object interface to the calcSTA M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="varargin">Array of Objects representing the input arguments 1
             through varargin.length</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.calcSTA(System.Int32,System.Object[]@,System.Object[],System.Object[])">
             <summary>
             Provides an interface for the calcSTA function in which the input and output
             arguments are specified as an array of Objects.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of Object output arguments</param>
             <param name= "argsIn">Array of Object input arguments</param>
             <param name= "varArgsIn">Array of Object representing variable input
             arguments</param>
            
        </member>
        <member name="M:mPhysNative.Class1.calcSTO">
             <summary>
             Provides a single output, 0-input Objectinterface to the calcSTO M-function.
             </summary>
             <remarks>
             </remarks>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.calcSTO(System.Object[])">
             <summary>
             Provides a single output, 1-input Objectinterface to the calcSTO M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="varargin">Array of Objects representing the input arguments 1
             through varargin.length</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.calcSTO(System.Int32)">
             <summary>
             Provides the standard 0-input Object interface to the calcSTO M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.calcSTO(System.Int32,System.Object[])">
             <summary>
             Provides the standard 1-input Object interface to the calcSTO M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="varargin">Array of Objects representing the input arguments 1
             through varargin.length</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.calcSTO(System.Int32,System.Object[]@,System.Object[],System.Object[])">
             <summary>
             Provides an interface for the calcSTO function in which the input and output
             arguments are specified as an array of Objects.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of Object output arguments</param>
             <param name= "argsIn">Array of Object input arguments</param>
             <param name= "varArgsIn">Array of Object representing variable input
             arguments</param>
            
        </member>
        <member name="M:mPhysNative.Class1.cell2mat">
             <summary>
             Provides a single output, 0-input Objectinterface to the cell2mat M-function.
             </summary>
             <remarks>
             M-Documentation:
             CELL2MAT Convert the contents of a cell array into a single matrix.
             M = CELL2MAT(C) converts a multidimensional cell array with contents of
             the same data type into a single matrix. The contents of C must be able
             to concatenate into a hyperrectangle. Moreover, for each pair of
             neighboring cells, the dimensions of the cell's contents must match,
             excluding the dimension in which the cells are neighbors. This constraint
             must hold true for neighboring cells along all of the cell array's
             dimensions.
             The dimensionality of M, i.e. the number of dimensions of M, will match
             the highest dimensionality contained in the cell array.
             CELL2MAT is not supported for cell arrays containing cell arrays or
             objects.
             Example:
             C = {[1] [2 3 4]; [5; 9] [6 7 8; 10 11 12]};
             M = cell2mat(C)
             See also MAT2CELL, NUM2CELL
             </remarks>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.cell2mat(System.Object)">
             <summary>
             Provides a single output, 1-input Objectinterface to the cell2mat M-function.
             </summary>
             <remarks>
             M-Documentation:
             CELL2MAT Convert the contents of a cell array into a single matrix.
             M = CELL2MAT(C) converts a multidimensional cell array with contents of
             the same data type into a single matrix. The contents of C must be able
             to concatenate into a hyperrectangle. Moreover, for each pair of
             neighboring cells, the dimensions of the cell's contents must match,
             excluding the dimension in which the cells are neighbors. This constraint
             must hold true for neighboring cells along all of the cell array's
             dimensions.
             The dimensionality of M, i.e. the number of dimensions of M, will match
             the highest dimensionality contained in the cell array.
             CELL2MAT is not supported for cell arrays containing cell arrays or
             objects.
             Example:
             C = {[1] [2 3 4]; [5; 9] [6 7 8; 10 11 12]};
             M = cell2mat(C)
             See also MAT2CELL, NUM2CELL
             </remarks>
             <param name="c">Input argument #1</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.cell2mat(System.Int32)">
             <summary>
             Provides the standard 0-input Object interface to the cell2mat M-function.
             </summary>
             <remarks>
             M-Documentation:
             CELL2MAT Convert the contents of a cell array into a single matrix.
             M = CELL2MAT(C) converts a multidimensional cell array with contents of
             the same data type into a single matrix. The contents of C must be able
             to concatenate into a hyperrectangle. Moreover, for each pair of
             neighboring cells, the dimensions of the cell's contents must match,
             excluding the dimension in which the cells are neighbors. This constraint
             must hold true for neighboring cells along all of the cell array's
             dimensions.
             The dimensionality of M, i.e. the number of dimensions of M, will match
             the highest dimensionality contained in the cell array.
             CELL2MAT is not supported for cell arrays containing cell arrays or
             objects.
             Example:
             C = {[1] [2 3 4]; [5; 9] [6 7 8; 10 11 12]};
             M = cell2mat(C)
             See also MAT2CELL, NUM2CELL
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.cell2mat(System.Int32,System.Object)">
             <summary>
             Provides the standard 1-input Object interface to the cell2mat M-function.
             </summary>
             <remarks>
             M-Documentation:
             CELL2MAT Convert the contents of a cell array into a single matrix.
             M = CELL2MAT(C) converts a multidimensional cell array with contents of
             the same data type into a single matrix. The contents of C must be able
             to concatenate into a hyperrectangle. Moreover, for each pair of
             neighboring cells, the dimensions of the cell's contents must match,
             excluding the dimension in which the cells are neighbors. This constraint
             must hold true for neighboring cells along all of the cell array's
             dimensions.
             The dimensionality of M, i.e. the number of dimensions of M, will match
             the highest dimensionality contained in the cell array.
             CELL2MAT is not supported for cell arrays containing cell arrays or
             objects.
             Example:
             C = {[1] [2 3 4]; [5; 9] [6 7 8; 10 11 12]};
             M = cell2mat(C)
             See also MAT2CELL, NUM2CELL
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="c">Input argument #1</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.cell2mat(System.Int32,System.Object[]@,System.Object[],System.Object[])">
             <summary>
             Provides an interface for the cell2mat function in which the input and output
             arguments are specified as an array of Objects.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             M-Documentation:
             CELL2MAT Convert the contents of a cell array into a single matrix.
             M = CELL2MAT(C) converts a multidimensional cell array with contents of
             the same data type into a single matrix. The contents of C must be able
             to concatenate into a hyperrectangle. Moreover, for each pair of
             neighboring cells, the dimensions of the cell's contents must match,
             excluding the dimension in which the cells are neighbors. This constraint
             must hold true for neighboring cells along all of the cell array's
             dimensions.
             The dimensionality of M, i.e. the number of dimensions of M, will match
             the highest dimensionality contained in the cell array.
             CELL2MAT is not supported for cell arrays containing cell arrays or
             objects.
             Example:
             C = {[1] [2 3 4]; [5; 9] [6 7 8; 10 11 12]};
             M = cell2mat(C)
             See also MAT2CELL, NUM2CELL
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of Object output arguments</param>
             <param name= "argsIn">Array of Object input arguments</param>
             <param name= "varArgsIn">Array of Object representing variable input
             arguments</param>
            
        </member>
        <member name="M:mPhysNative.Class1.characterizePSPs">
             <summary>
             Provides a single output, 0-input Objectinterface to the characterizePSPs
             M-function.
             </summary>
             <remarks>
             M-Documentation:
             sort into I and E PSPs
             </remarks>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.characterizePSPs(System.Object)">
             <summary>
             Provides a single output, 1-input Objectinterface to the characterizePSPs
             M-function.
             </summary>
             <remarks>
             M-Documentation:
             sort into I and E PSPs
             </remarks>
             <param name="PSPs">Input argument #1</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.characterizePSPs(System.Object,System.Object)">
             <summary>
             Provides a single output, 2-input Objectinterface to the characterizePSPs
             M-function.
             </summary>
             <remarks>
             M-Documentation:
             sort into I and E PSPs
             </remarks>
             <param name="PSPs">Input argument #1</param>
             <param name="totalTime">Input argument #2</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.characterizePSPs(System.Int32)">
             <summary>
             Provides the standard 0-input Object interface to the characterizePSPs
             M-function.
             </summary>
             <remarks>
             M-Documentation:
             sort into I and E PSPs
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.characterizePSPs(System.Int32,System.Object)">
             <summary>
             Provides the standard 1-input Object interface to the characterizePSPs
             M-function.
             </summary>
             <remarks>
             M-Documentation:
             sort into I and E PSPs
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="PSPs">Input argument #1</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.characterizePSPs(System.Int32,System.Object,System.Object)">
             <summary>
             Provides the standard 2-input Object interface to the characterizePSPs
             M-function.
             </summary>
             <remarks>
             M-Documentation:
             sort into I and E PSPs
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="PSPs">Input argument #1</param>
             <param name="totalTime">Input argument #2</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.characterizePSPs(System.Int32,System.Object[]@,System.Object[],System.Object[])">
             <summary>
             Provides an interface for the characterizePSPs function in which the input and
             output
             arguments are specified as an array of Objects.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             M-Documentation:
             sort into I and E PSPs
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of Object output arguments</param>
             <param name= "argsIn">Array of Object input arguments</param>
             <param name= "varArgsIn">Array of Object representing variable input
             arguments</param>
            
        </member>
        <member name="M:mPhysNative.Class1.clearBonusText">
             <summary>
             Provides a void output, 0-input Objectinterface to the clearBonusText M-function.
             </summary>
             <remarks>
             M-Documentation:
             this clears text to the top line of the Scope window
             figHandle is optional, if not supplied text added to all scope windows
             </remarks>
            
        </member>
        <member name="M:mPhysNative.Class1.clearBonusText(System.Object)">
             <summary>
             Provides a void output, 1-input Objectinterface to the clearBonusText M-function.
             </summary>
             <remarks>
             M-Documentation:
             this clears text to the top line of the Scope window
             figHandle is optional, if not supplied text added to all scope windows
             </remarks>
             <param name="figHandle">Input argument #1</param>
            
        </member>
        <member name="M:mPhysNative.Class1.clearBonusText(System.Int32)">
             <summary>
             Provides the standard 0-input Object interface to the clearBonusText M-function.
             </summary>
             <remarks>
             M-Documentation:
             this clears text to the top line of the Scope window
             figHandle is optional, if not supplied text added to all scope windows
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.clearBonusText(System.Int32,System.Object)">
             <summary>
             Provides the standard 1-input Object interface to the clearBonusText M-function.
             </summary>
             <remarks>
             M-Documentation:
             this clears text to the top line of the Scope window
             figHandle is optional, if not supplied text added to all scope windows
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="figHandle">Input argument #1</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.clearBonusText(System.Int32,System.Object[]@,System.Object[],System.Object[])">
             <summary>
             Provides an interface for the clearBonusText function in which the input and
             output
             arguments are specified as an array of Objects.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             M-Documentation:
             this clears text to the top line of the Scope window
             figHandle is optional, if not supplied text added to all scope windows
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of Object output arguments</param>
             <param name= "argsIn">Array of Object input arguments</param>
             <param name= "varArgsIn">Array of Object representing variable input
             arguments</param>
            
        </member>
        <member name="M:mPhysNative.Class1.clearExtraLines">
             <summary>
             Provides a void output, 0-input Objectinterface to the clearExtraLines
             M-function.
             </summary>
             <remarks>
             </remarks>
            
        </member>
        <member name="M:mPhysNative.Class1.clearExtraLines(System.Int32)">
             <summary>
             Provides the standard 0-input Object interface to the clearExtraLines M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.clearExtraLines(System.Int32,System.Object[]@,System.Object[],System.Object[])">
             <summary>
             Provides an interface for the clearExtraLines function in which the input and
             output
             arguments are specified as an array of Objects.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of Object output arguments</param>
             <param name= "argsIn">Array of Object input arguments</param>
             <param name= "varArgsIn">Array of Object representing variable input
             arguments</param>
            
        </member>
        <member name="M:mPhysNative.Class1.colorSpread">
             <summary>
             Provides a single output, 0-input Objectinterface to the colorSpread M-function.
             </summary>
             <remarks>
             M-Documentation:
             COLORCUBE Enhanced color-cube color map.
             COLORCUBE(M) returns an M-by-3 matrix containing a colorcube.
             COLORCUBE, by itself, is the same length as the current colormap.
             The colorcube contains as many regularly spaced colors in RGB
             colorspace as possible, while attempting to provide more steps
             of gray, pure red, pure green, and pure blue.
             The algorithm for this cube was inspired by the default
             Macintosh system colortable, and for M = 256, COLORCUBE returns
             exactly the same colors.  For M &lt; 8, a gray ramp of length M
             is returned.
             See also COLORMAP, RGBPLOT.
             </remarks>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.colorSpread(System.Object)">
             <summary>
             Provides a single output, 1-input Objectinterface to the colorSpread M-function.
             </summary>
             <remarks>
             M-Documentation:
             COLORCUBE Enhanced color-cube color map.
             COLORCUBE(M) returns an M-by-3 matrix containing a colorcube.
             COLORCUBE, by itself, is the same length as the current colormap.
             The colorcube contains as many regularly spaced colors in RGB
             colorspace as possible, while attempting to provide more steps
             of gray, pure red, pure green, and pure blue.
             The algorithm for this cube was inspired by the default
             Macintosh system colortable, and for M = 256, COLORCUBE returns
             exactly the same colors.  For M &lt; 8, a gray ramp of length M
             is returned.
             See also COLORMAP, RGBPLOT.
             </remarks>
             <param name="m">Input argument #1</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.colorSpread(System.Int32)">
             <summary>
             Provides the standard 0-input Object interface to the colorSpread M-function.
             </summary>
             <remarks>
             M-Documentation:
             COLORCUBE Enhanced color-cube color map.
             COLORCUBE(M) returns an M-by-3 matrix containing a colorcube.
             COLORCUBE, by itself, is the same length as the current colormap.
             The colorcube contains as many regularly spaced colors in RGB
             colorspace as possible, while attempting to provide more steps
             of gray, pure red, pure green, and pure blue.
             The algorithm for this cube was inspired by the default
             Macintosh system colortable, and for M = 256, COLORCUBE returns
             exactly the same colors.  For M &lt; 8, a gray ramp of length M
             is returned.
             See also COLORMAP, RGBPLOT.
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.colorSpread(System.Int32,System.Object)">
             <summary>
             Provides the standard 1-input Object interface to the colorSpread M-function.
             </summary>
             <remarks>
             M-Documentation:
             COLORCUBE Enhanced color-cube color map.
             COLORCUBE(M) returns an M-by-3 matrix containing a colorcube.
             COLORCUBE, by itself, is the same length as the current colormap.
             The colorcube contains as many regularly spaced colors in RGB
             colorspace as possible, while attempting to provide more steps
             of gray, pure red, pure green, and pure blue.
             The algorithm for this cube was inspired by the default
             Macintosh system colortable, and for M = 256, COLORCUBE returns
             exactly the same colors.  For M &lt; 8, a gray ramp of length M
             is returned.
             See also COLORMAP, RGBPLOT.
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="m">Input argument #1</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.colorSpread(System.Int32,System.Object[]@,System.Object[],System.Object[])">
             <summary>
             Provides an interface for the colorSpread function in which the input and output
             arguments are specified as an array of Objects.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             M-Documentation:
             COLORCUBE Enhanced color-cube color map.
             COLORCUBE(M) returns an M-by-3 matrix containing a colorcube.
             COLORCUBE, by itself, is the same length as the current colormap.
             The colorcube contains as many regularly spaced colors in RGB
             colorspace as possible, while attempting to provide more steps
             of gray, pure red, pure green, and pure blue.
             The algorithm for this cube was inspired by the default
             Macintosh system colortable, and for M = 256, COLORCUBE returns
             exactly the same colors.  For M &lt; 8, a gray ramp of length M
             is returned.
             See also COLORMAP, RGBPLOT.
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of Object output arguments</param>
             <param name= "argsIn">Array of Object input arguments</param>
             <param name= "varArgsIn">Array of Object representing variable input
             arguments</param>
            
        </member>
        <member name="M:mPhysNative.Class1.combFilter">
             <summary>
             Provides a single output, 0-input Objectinterface to the combFilter M-function.
             </summary>
             <remarks>
             M-Documentation:
             remove sinusoidal noise at selectedFrequencies by finding the phase and
             amplitude of the signal at those frequencies and subtracting a
             complementary sine wave
             outData = combFilter(inData, selectedFrequencies, samplingFreq, whichPart)
             </remarks>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.combFilter(System.Object)">
             <summary>
             Provides a single output, 1-input Objectinterface to the combFilter M-function.
             </summary>
             <remarks>
             M-Documentation:
             remove sinusoidal noise at selectedFrequencies by finding the phase and
             amplitude of the signal at those frequencies and subtracting a
             complementary sine wave
             outData = combFilter(inData, selectedFrequencies, samplingFreq, whichPart)
             </remarks>
             <param name="inData">Input argument #1</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.combFilter(System.Object,System.Object)">
             <summary>
             Provides a single output, 2-input Objectinterface to the combFilter M-function.
             </summary>
             <remarks>
             M-Documentation:
             remove sinusoidal noise at selectedFrequencies by finding the phase and
             amplitude of the signal at those frequencies and subtracting a
             complementary sine wave
             outData = combFilter(inData, selectedFrequencies, samplingFreq, whichPart)
             </remarks>
             <param name="inData">Input argument #1</param>
             <param name="selectedFrequencies">Input argument #2</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.combFilter(System.Object,System.Object,System.Object)">
             <summary>
             Provides a single output, 3-input Objectinterface to the combFilter M-function.
             </summary>
             <remarks>
             M-Documentation:
             remove sinusoidal noise at selectedFrequencies by finding the phase and
             amplitude of the signal at those frequencies and subtracting a
             complementary sine wave
             outData = combFilter(inData, selectedFrequencies, samplingFreq, whichPart)
             </remarks>
             <param name="inData">Input argument #1</param>
             <param name="selectedFrequencies">Input argument #2</param>
             <param name="samplingFreq">Input argument #3</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.combFilter(System.Object,System.Object,System.Object,System.Object)">
             <summary>
             Provides a single output, 4-input Objectinterface to the combFilter M-function.
             </summary>
             <remarks>
             M-Documentation:
             remove sinusoidal noise at selectedFrequencies by finding the phase and
             amplitude of the signal at those frequencies and subtracting a
             complementary sine wave
             outData = combFilter(inData, selectedFrequencies, samplingFreq, whichPart)
             </remarks>
             <param name="inData">Input argument #1</param>
             <param name="selectedFrequencies">Input argument #2</param>
             <param name="samplingFreq">Input argument #3</param>
             <param name="whichPart">Input argument #4</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.combFilter(System.Int32)">
             <summary>
             Provides the standard 0-input Object interface to the combFilter M-function.
             </summary>
             <remarks>
             M-Documentation:
             remove sinusoidal noise at selectedFrequencies by finding the phase and
             amplitude of the signal at those frequencies and subtracting a
             complementary sine wave
             outData = combFilter(inData, selectedFrequencies, samplingFreq, whichPart)
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.combFilter(System.Int32,System.Object)">
             <summary>
             Provides the standard 1-input Object interface to the combFilter M-function.
             </summary>
             <remarks>
             M-Documentation:
             remove sinusoidal noise at selectedFrequencies by finding the phase and
             amplitude of the signal at those frequencies and subtracting a
             complementary sine wave
             outData = combFilter(inData, selectedFrequencies, samplingFreq, whichPart)
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="inData">Input argument #1</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.combFilter(System.Int32,System.Object,System.Object)">
             <summary>
             Provides the standard 2-input Object interface to the combFilter M-function.
             </summary>
             <remarks>
             M-Documentation:
             remove sinusoidal noise at selectedFrequencies by finding the phase and
             amplitude of the signal at those frequencies and subtracting a
             complementary sine wave
             outData = combFilter(inData, selectedFrequencies, samplingFreq, whichPart)
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="inData">Input argument #1</param>
             <param name="selectedFrequencies">Input argument #2</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.combFilter(System.Int32,System.Object,System.Object,System.Object)">
             <summary>
             Provides the standard 3-input Object interface to the combFilter M-function.
             </summary>
             <remarks>
             M-Documentation:
             remove sinusoidal noise at selectedFrequencies by finding the phase and
             amplitude of the signal at those frequencies and subtracting a
             complementary sine wave
             outData = combFilter(inData, selectedFrequencies, samplingFreq, whichPart)
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="inData">Input argument #1</param>
             <param name="selectedFrequencies">Input argument #2</param>
             <param name="samplingFreq">Input argument #3</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.combFilter(System.Int32,System.Object,System.Object,System.Object,System.Object)">
             <summary>
             Provides the standard 4-input Object interface to the combFilter M-function.
             </summary>
             <remarks>
             M-Documentation:
             remove sinusoidal noise at selectedFrequencies by finding the phase and
             amplitude of the signal at those frequencies and subtracting a
             complementary sine wave
             outData = combFilter(inData, selectedFrequencies, samplingFreq, whichPart)
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="inData">Input argument #1</param>
             <param name="selectedFrequencies">Input argument #2</param>
             <param name="samplingFreq">Input argument #3</param>
             <param name="whichPart">Input argument #4</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.combFilter(System.Int32,System.Object[]@,System.Object[],System.Object[])">
             <summary>
             Provides an interface for the combFilter function in which the input and output
             arguments are specified as an array of Objects.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             M-Documentation:
             remove sinusoidal noise at selectedFrequencies by finding the phase and
             amplitude of the signal at those frequencies and subtracting a
             complementary sine wave
             outData = combFilter(inData, selectedFrequencies, samplingFreq, whichPart)
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of Object output arguments</param>
             <param name= "argsIn">Array of Object input arguments</param>
             <param name= "varArgsIn">Array of Object representing variable input
             arguments</param>
            
        </member>
        <member name="M:mPhysNative.Class1.commonEvents">
             <summary>
             Provides a single output, 0-input Objectinterface to the commonEvents M-function.
             </summary>
             <remarks>
             M-Documentation:
             outData = allCoincidents;
             </remarks>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.commonEvents(System.Object[])">
             <summary>
             Provides a single output, 1-input Objectinterface to the commonEvents M-function.
             </summary>
             <remarks>
             M-Documentation:
             outData = allCoincidents;
             </remarks>
             <param name="varargin">Array of Objects representing the input arguments 1
             through varargin.length</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.commonEvents(System.Int32)">
             <summary>
             Provides the standard 0-input Object interface to the commonEvents M-function.
             </summary>
             <remarks>
             M-Documentation:
             outData = allCoincidents;
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.commonEvents(System.Int32,System.Object[])">
             <summary>
             Provides the standard 1-input Object interface to the commonEvents M-function.
             </summary>
             <remarks>
             M-Documentation:
             outData = allCoincidents;
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="varargin">Array of Objects representing the input arguments 1
             through varargin.length</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.commonEvents(System.Int32,System.Object[]@,System.Object[],System.Object[])">
             <summary>
             Provides an interface for the commonEvents function in which the input and output
             arguments are specified as an array of Objects.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             M-Documentation:
             outData = allCoincidents;
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of Object output arguments</param>
             <param name= "argsIn">Array of Object input arguments</param>
             <param name= "varArgsIn">Array of Object representing variable input
             arguments</param>
            
        </member>
        <member name="M:mPhysNative.Class1.Contents">
             <summary>
             Provides a void output, 0-input Objectinterface to the Contents M-function.
             </summary>
             <remarks>
             </remarks>
            
        </member>
        <member name="M:mPhysNative.Class1.Contents(System.Int32)">
             <summary>
             Provides the standard 0-input Object interface to the Contents M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.Contents(System.Int32,System.Object[]@,System.Object[],System.Object[])">
             <summary>
             Provides an interface for the Contents function in which the input and output
             arguments are specified as an array of Objects.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of Object output arguments</param>
             <param name= "argsIn">Array of Object input arguments</param>
             <param name= "varArgsIn">Array of Object representing variable input
             arguments</param>
            
        </member>
        <member name="M:mPhysNative.Class1.crossCorr">
             <summary>
             Provides a single output, 0-input Objectinterface to the crossCorr M-function.
             </summary>
             <remarks>
             M-Documentation:
             determine if we're doing an autocorrelogram
             </remarks>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.crossCorr(System.Object)">
             <summary>
             Provides a single output, 1-input Objectinterface to the crossCorr M-function.
             </summary>
             <remarks>
             M-Documentation:
             determine if we're doing an autocorrelogram
             </remarks>
             <param name="data">Input argument #1</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.crossCorr(System.Object,System.Object)">
             <summary>
             Provides a single output, 2-input Objectinterface to the crossCorr M-function.
             </summary>
             <remarks>
             M-Documentation:
             determine if we're doing an autocorrelogram
             </remarks>
             <param name="data">Input argument #1</param>
             <param name="corrVals">Input argument #2</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.crossCorr(System.Object,System.Object,System.Object)">
             <summary>
             Provides a single output, 3-input Objectinterface to the crossCorr M-function.
             </summary>
             <remarks>
             M-Documentation:
             determine if we're doing an autocorrelogram
             </remarks>
             <param name="data">Input argument #1</param>
             <param name="corrVals">Input argument #2</param>
             <param name="coincidenceInterval">Input argument #3</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.crossCorr(System.Int32)">
             <summary>
             Provides the standard 0-input Object interface to the crossCorr M-function.
             </summary>
             <remarks>
             M-Documentation:
             determine if we're doing an autocorrelogram
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.crossCorr(System.Int32,System.Object)">
             <summary>
             Provides the standard 1-input Object interface to the crossCorr M-function.
             </summary>
             <remarks>
             M-Documentation:
             determine if we're doing an autocorrelogram
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="data">Input argument #1</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.crossCorr(System.Int32,System.Object,System.Object)">
             <summary>
             Provides the standard 2-input Object interface to the crossCorr M-function.
             </summary>
             <remarks>
             M-Documentation:
             determine if we're doing an autocorrelogram
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="data">Input argument #1</param>
             <param name="corrVals">Input argument #2</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.crossCorr(System.Int32,System.Object,System.Object,System.Object)">
             <summary>
             Provides the standard 3-input Object interface to the crossCorr M-function.
             </summary>
             <remarks>
             M-Documentation:
             determine if we're doing an autocorrelogram
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="data">Input argument #1</param>
             <param name="corrVals">Input argument #2</param>
             <param name="coincidenceInterval">Input argument #3</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.crossCorr(System.Int32,System.Object[]@,System.Object[],System.Object[])">
             <summary>
             Provides an interface for the crossCorr function in which the input and output
             arguments are specified as an array of Objects.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             M-Documentation:
             determine if we're doing an autocorrelogram
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of Object output arguments</param>
             <param name= "argsIn">Array of Object input arguments</param>
             <param name= "varArgsIn">Array of Object representing variable input
             arguments</param>
            
        </member>
        <member name="M:mPhysNative.Class1.crosscorrelateSetup">
             <summary>
             Provides a single output, 0-input Objectinterface to the crosscorrelateSetup
             M-function.
             </summary>
             <remarks>
             M-Documentation:
             from events 
             </remarks>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.crosscorrelateSetup(System.Object[])">
             <summary>
             Provides a single output, 1-input Objectinterface to the crosscorrelateSetup
             M-function.
             </summary>
             <remarks>
             M-Documentation:
             from events 
             </remarks>
             <param name="varargin">Array of Objects representing the input arguments 1
             through varargin.length</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.crosscorrelateSetup(System.Int32)">
             <summary>
             Provides the standard 0-input Object interface to the crosscorrelateSetup
             M-function.
             </summary>
             <remarks>
             M-Documentation:
             from events 
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.crosscorrelateSetup(System.Int32,System.Object[])">
             <summary>
             Provides the standard 1-input Object interface to the crosscorrelateSetup
             M-function.
             </summary>
             <remarks>
             M-Documentation:
             from events 
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="varargin">Array of Objects representing the input arguments 1
             through varargin.length</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.crosscorrelateSetup(System.Int32,System.Object[]@,System.Object[],System.Object[])">
             <summary>
             Provides an interface for the crosscorrelateSetup function in which the input and
             output
             arguments are specified as an array of Objects.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             M-Documentation:
             from events 
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of Object output arguments</param>
             <param name= "argsIn">Array of Object input arguments</param>
             <param name= "varArgsIn">Array of Object representing variable input
             arguments</param>
            
        </member>
        <member name="M:mPhysNative.Class1.detectAPs">
             <summary>
             Provides a single output, 0-input Objectinterface to the detectAPs M-function.
             </summary>
             <remarks>
             M-Documentation:
             Ben routine to find APs in current clamp record
             Inputs  data, protocol, (AP threshold in mV), ([beginTimeMs, endTimeMs])
             Output is a list of AP times in ms or []
             this routine takes one current clamp record and returns the times of each
             AP in trace
             </remarks>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.detectAPs(System.Object)">
             <summary>
             Provides a single output, 1-input Objectinterface to the detectAPs M-function.
             </summary>
             <remarks>
             M-Documentation:
             Ben routine to find APs in current clamp record
             Inputs  data, protocol, (AP threshold in mV), ([beginTimeMs, endTimeMs])
             Output is a list of AP times in ms or []
             this routine takes one current clamp record and returns the times of each
             AP in trace
             </remarks>
             <param name="data">Input argument #1</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.detectAPs(System.Object,System.Object)">
             <summary>
             Provides a single output, 2-input Objectinterface to the detectAPs M-function.
             </summary>
             <remarks>
             M-Documentation:
             Ben routine to find APs in current clamp record
             Inputs  data, protocol, (AP threshold in mV), ([beginTimeMs, endTimeMs])
             Output is a list of AP times in ms or []
             this routine takes one current clamp record and returns the times of each
             AP in trace
             </remarks>
             <param name="data">Input argument #1</param>
             <param name="protocol">Input argument #2</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.detectAPs(System.Object,System.Object,System.Object[])">
             <summary>
             Provides a single output, 3-input Objectinterface to the detectAPs M-function.
             </summary>
             <remarks>
             M-Documentation:
             Ben routine to find APs in current clamp record
             Inputs  data, protocol, (AP threshold in mV), ([beginTimeMs, endTimeMs])
             Output is a list of AP times in ms or []
             this routine takes one current clamp record and returns the times of each
             AP in trace
             </remarks>
             <param name="data">Input argument #1</param>
             <param name="protocol">Input argument #2</param>
             <param name="varargin">Array of Objects representing the input arguments 3
             through varargin.length+2</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.detectAPs(System.Int32)">
             <summary>
             Provides the standard 0-input Object interface to the detectAPs M-function.
             </summary>
             <remarks>
             M-Documentation:
             Ben routine to find APs in current clamp record
             Inputs  data, protocol, (AP threshold in mV), ([beginTimeMs, endTimeMs])
             Output is a list of AP times in ms or []
             this routine takes one current clamp record and returns the times of each
             AP in trace
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.detectAPs(System.Int32,System.Object)">
             <summary>
             Provides the standard 1-input Object interface to the detectAPs M-function.
             </summary>
             <remarks>
             M-Documentation:
             Ben routine to find APs in current clamp record
             Inputs  data, protocol, (AP threshold in mV), ([beginTimeMs, endTimeMs])
             Output is a list of AP times in ms or []
             this routine takes one current clamp record and returns the times of each
             AP in trace
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="data">Input argument #1</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.detectAPs(System.Int32,System.Object,System.Object)">
             <summary>
             Provides the standard 2-input Object interface to the detectAPs M-function.
             </summary>
             <remarks>
             M-Documentation:
             Ben routine to find APs in current clamp record
             Inputs  data, protocol, (AP threshold in mV), ([beginTimeMs, endTimeMs])
             Output is a list of AP times in ms or []
             this routine takes one current clamp record and returns the times of each
             AP in trace
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="data">Input argument #1</param>
             <param name="protocol">Input argument #2</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.detectAPs(System.Int32,System.Object,System.Object,System.Object[])">
             <summary>
             Provides the standard 3-input Object interface to the detectAPs M-function.
             </summary>
             <remarks>
             M-Documentation:
             Ben routine to find APs in current clamp record
             Inputs  data, protocol, (AP threshold in mV), ([beginTimeMs, endTimeMs])
             Output is a list of AP times in ms or []
             this routine takes one current clamp record and returns the times of each
             AP in trace
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="data">Input argument #1</param>
             <param name="protocol">Input argument #2</param>
             <param name="varargin">Array of Objects representing the input arguments 3
             through varargin.length+2</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.detectAPs(System.Int32,System.Object[]@,System.Object[],System.Object[])">
             <summary>
             Provides an interface for the detectAPs function in which the input and output
             arguments are specified as an array of Objects.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             M-Documentation:
             Ben routine to find APs in current clamp record
             Inputs  data, protocol, (AP threshold in mV), ([beginTimeMs, endTimeMs])
             Output is a list of AP times in ms or []
             this routine takes one current clamp record and returns the times of each
             AP in trace
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of Object output arguments</param>
             <param name= "argsIn">Array of Object input arguments</param>
             <param name= "varArgsIn">Array of Object representing variable input
             arguments</param>
            
        </member>
        <member name="M:mPhysNative.Class1.detectPSPs">
             <summary>
             Provides a single output, 0-input Objectinterface to the detectPSPs M-function.
             </summary>
             <remarks>
             M-Documentation:
             Parse through the inputs
             </remarks>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.detectPSPs(System.Object)">
             <summary>
             Provides a single output, 1-input Objectinterface to the detectPSPs M-function.
             </summary>
             <remarks>
             M-Documentation:
             Parse through the inputs
             </remarks>
             <param name="data">Input argument #1</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.detectPSPs(System.Object,System.Object[])">
             <summary>
             Provides a single output, 2-input Objectinterface to the detectPSPs M-function.
             </summary>
             <remarks>
             M-Documentation:
             Parse through the inputs
             </remarks>
             <param name="data">Input argument #1</param>
             <param name="varargin">Array of Objects representing the input arguments 2
             through varargin.length+1</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.detectPSPs(System.Int32)">
             <summary>
             Provides the standard 0-input Object interface to the detectPSPs M-function.
             </summary>
             <remarks>
             M-Documentation:
             Parse through the inputs
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.detectPSPs(System.Int32,System.Object)">
             <summary>
             Provides the standard 1-input Object interface to the detectPSPs M-function.
             </summary>
             <remarks>
             M-Documentation:
             Parse through the inputs
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="data">Input argument #1</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.detectPSPs(System.Int32,System.Object,System.Object[])">
             <summary>
             Provides the standard 2-input Object interface to the detectPSPs M-function.
             </summary>
             <remarks>
             M-Documentation:
             Parse through the inputs
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="data">Input argument #1</param>
             <param name="varargin">Array of Objects representing the input arguments 2
             through varargin.length+1</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.detectPSPs(System.Int32,System.Object[]@,System.Object[],System.Object[])">
             <summary>
             Provides an interface for the detectPSPs function in which the input and output
             arguments are specified as an array of Objects.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             M-Documentation:
             Parse through the inputs
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of Object output arguments</param>
             <param name= "argsIn">Array of Object input arguments</param>
             <param name= "varArgsIn">Array of Object representing variable input
             arguments</param>
            
        </member>
        <member name="M:mPhysNative.Class1.detectPSPs3d">
             <summary>
             Provides a single output, 0-input Objectinterface to the detectPSPs3d M-function.
             </summary>
             <remarks>
             M-Documentation:
             this is a subfunction, so gets access to outside variables  
             3d version made to remove pump noise on 8.6.08
             </remarks>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.detectPSPs3d(System.Object)">
             <summary>
             Provides a single output, 1-input Objectinterface to the detectPSPs3d M-function.
             </summary>
             <remarks>
             M-Documentation:
             this is a subfunction, so gets access to outside variables  
             3d version made to remove pump noise on 8.6.08
             </remarks>
             <param name="data">Input argument #1</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.detectPSPs3d(System.Object,System.Object)">
             <summary>
             Provides a single output, 2-input Objectinterface to the detectPSPs3d M-function.
             </summary>
             <remarks>
             M-Documentation:
             this is a subfunction, so gets access to outside variables  
             3d version made to remove pump noise on 8.6.08
             </remarks>
             <param name="data">Input argument #1</param>
             <param name="protocol">Input argument #2</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.detectPSPs3d(System.Int32)">
             <summary>
             Provides the standard 0-input Object interface to the detectPSPs3d M-function.
             </summary>
             <remarks>
             M-Documentation:
             this is a subfunction, so gets access to outside variables  
             3d version made to remove pump noise on 8.6.08
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.detectPSPs3d(System.Int32,System.Object)">
             <summary>
             Provides the standard 1-input Object interface to the detectPSPs3d M-function.
             </summary>
             <remarks>
             M-Documentation:
             this is a subfunction, so gets access to outside variables  
             3d version made to remove pump noise on 8.6.08
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="data">Input argument #1</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.detectPSPs3d(System.Int32,System.Object,System.Object)">
             <summary>
             Provides the standard 2-input Object interface to the detectPSPs3d M-function.
             </summary>
             <remarks>
             M-Documentation:
             this is a subfunction, so gets access to outside variables  
             3d version made to remove pump noise on 8.6.08
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="data">Input argument #1</param>
             <param name="protocol">Input argument #2</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.detectPSPs3d(System.Int32,System.Object[]@,System.Object[],System.Object[])">
             <summary>
             Provides an interface for the detectPSPs3d function in which the input and output
             arguments are specified as an array of Objects.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             M-Documentation:
             this is a subfunction, so gets access to outside variables  
             3d version made to remove pump noise on 8.6.08
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of Object output arguments</param>
             <param name= "argsIn">Array of Object input arguments</param>
             <param name= "varArgsIn">Array of Object representing variable input
             arguments</param>
            
        </member>
        <member name="M:mPhysNative.Class1.detectSpikes">
             <summary>
             Provides a single output, 0-input Objectinterface to the detectSpikes M-function.
             </summary>
             <remarks>
             M-Documentation:
             spikes = detectSpikes(inData, spikeHeight, whereCall)
             whereCall determines what is returned for spike locations
             whereCall = 1 => AP threshold
             whereCall = 2 => time midpoint of peak and threshold
             whereCall = 3 => height midpoint of peak and threshold (default)
             whereCall = 4 => peak
             whereCall = 5 => sloppy peak
             spikeHeight not specified => 25 mV above baseline
             the results are filtered such that spikes with a frequency of greater
             than one per every 10 samples will be rejected
             </remarks>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.detectSpikes(System.Object)">
             <summary>
             Provides a single output, 1-input Objectinterface to the detectSpikes M-function.
             </summary>
             <remarks>
             M-Documentation:
             spikes = detectSpikes(inData, spikeHeight, whereCall)
             whereCall determines what is returned for spike locations
             whereCall = 1 => AP threshold
             whereCall = 2 => time midpoint of peak and threshold
             whereCall = 3 => height midpoint of peak and threshold (default)
             whereCall = 4 => peak
             whereCall = 5 => sloppy peak
             spikeHeight not specified => 25 mV above baseline
             the results are filtered such that spikes with a frequency of greater
             than one per every 10 samples will be rejected
             </remarks>
             <param name="inData">Input argument #1</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.detectSpikes(System.Object,System.Object)">
             <summary>
             Provides a single output, 2-input Objectinterface to the detectSpikes M-function.
             </summary>
             <remarks>
             M-Documentation:
             spikes = detectSpikes(inData, spikeHeight, whereCall)
             whereCall determines what is returned for spike locations
             whereCall = 1 => AP threshold
             whereCall = 2 => time midpoint of peak and threshold
             whereCall = 3 => height midpoint of peak and threshold (default)
             whereCall = 4 => peak
             whereCall = 5 => sloppy peak
             spikeHeight not specified => 25 mV above baseline
             the results are filtered such that spikes with a frequency of greater
             than one per every 10 samples will be rejected
             </remarks>
             <param name="inData">Input argument #1</param>
             <param name="spikeHeight">Input argument #2</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.detectSpikes(System.Object,System.Object,System.Object)">
             <summary>
             Provides a single output, 3-input Objectinterface to the detectSpikes M-function.
             </summary>
             <remarks>
             M-Documentation:
             spikes = detectSpikes(inData, spikeHeight, whereCall)
             whereCall determines what is returned for spike locations
             whereCall = 1 => AP threshold
             whereCall = 2 => time midpoint of peak and threshold
             whereCall = 3 => height midpoint of peak and threshold (default)
             whereCall = 4 => peak
             whereCall = 5 => sloppy peak
             spikeHeight not specified => 25 mV above baseline
             the results are filtered such that spikes with a frequency of greater
             than one per every 10 samples will be rejected
             </remarks>
             <param name="inData">Input argument #1</param>
             <param name="spikeHeight">Input argument #2</param>
             <param name="whereCall">Input argument #3</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.detectSpikes(System.Int32)">
             <summary>
             Provides the standard 0-input Object interface to the detectSpikes M-function.
             </summary>
             <remarks>
             M-Documentation:
             spikes = detectSpikes(inData, spikeHeight, whereCall)
             whereCall determines what is returned for spike locations
             whereCall = 1 => AP threshold
             whereCall = 2 => time midpoint of peak and threshold
             whereCall = 3 => height midpoint of peak and threshold (default)
             whereCall = 4 => peak
             whereCall = 5 => sloppy peak
             spikeHeight not specified => 25 mV above baseline
             the results are filtered such that spikes with a frequency of greater
             than one per every 10 samples will be rejected
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.detectSpikes(System.Int32,System.Object)">
             <summary>
             Provides the standard 1-input Object interface to the detectSpikes M-function.
             </summary>
             <remarks>
             M-Documentation:
             spikes = detectSpikes(inData, spikeHeight, whereCall)
             whereCall determines what is returned for spike locations
             whereCall = 1 => AP threshold
             whereCall = 2 => time midpoint of peak and threshold
             whereCall = 3 => height midpoint of peak and threshold (default)
             whereCall = 4 => peak
             whereCall = 5 => sloppy peak
             spikeHeight not specified => 25 mV above baseline
             the results are filtered such that spikes with a frequency of greater
             than one per every 10 samples will be rejected
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="inData">Input argument #1</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.detectSpikes(System.Int32,System.Object,System.Object)">
             <summary>
             Provides the standard 2-input Object interface to the detectSpikes M-function.
             </summary>
             <remarks>
             M-Documentation:
             spikes = detectSpikes(inData, spikeHeight, whereCall)
             whereCall determines what is returned for spike locations
             whereCall = 1 => AP threshold
             whereCall = 2 => time midpoint of peak and threshold
             whereCall = 3 => height midpoint of peak and threshold (default)
             whereCall = 4 => peak
             whereCall = 5 => sloppy peak
             spikeHeight not specified => 25 mV above baseline
             the results are filtered such that spikes with a frequency of greater
             than one per every 10 samples will be rejected
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="inData">Input argument #1</param>
             <param name="spikeHeight">Input argument #2</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.detectSpikes(System.Int32,System.Object,System.Object,System.Object)">
             <summary>
             Provides the standard 3-input Object interface to the detectSpikes M-function.
             </summary>
             <remarks>
             M-Documentation:
             spikes = detectSpikes(inData, spikeHeight, whereCall)
             whereCall determines what is returned for spike locations
             whereCall = 1 => AP threshold
             whereCall = 2 => time midpoint of peak and threshold
             whereCall = 3 => height midpoint of peak and threshold (default)
             whereCall = 4 => peak
             whereCall = 5 => sloppy peak
             spikeHeight not specified => 25 mV above baseline
             the results are filtered such that spikes with a frequency of greater
             than one per every 10 samples will be rejected
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="inData">Input argument #1</param>
             <param name="spikeHeight">Input argument #2</param>
             <param name="whereCall">Input argument #3</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.detectSpikes(System.Int32,System.Object[]@,System.Object[],System.Object[])">
             <summary>
             Provides an interface for the detectSpikes function in which the input and output
             arguments are specified as an array of Objects.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             M-Documentation:
             spikes = detectSpikes(inData, spikeHeight, whereCall)
             whereCall determines what is returned for spike locations
             whereCall = 1 => AP threshold
             whereCall = 2 => time midpoint of peak and threshold
             whereCall = 3 => height midpoint of peak and threshold (default)
             whereCall = 4 => peak
             whereCall = 5 => sloppy peak
             spikeHeight not specified => 25 mV above baseline
             the results are filtered such that spikes with a frequency of greater
             than one per every 10 samples will be rejected
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of Object output arguments</param>
             <param name= "argsIn">Array of Object input arguments</param>
             <param name= "varArgsIn">Array of Object representing variable input
             arguments</param>
            
        </member>
        <member name="M:mPhysNative.Class1.displayEventLines">
             <summary>
             Provides a void output, 0-input Objectinterface to the displayEventLines
             M-function.
             </summary>
             <remarks>
             </remarks>
            
        </member>
        <member name="M:mPhysNative.Class1.displayEventLines(System.Object)">
             <summary>
             Provides a void output, 1-input Objectinterface to the displayEventLines
             M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="channelName">Input argument #1</param>
            
        </member>
        <member name="M:mPhysNative.Class1.displayEventLines(System.Object,System.Object)">
             <summary>
             Provides a void output, 2-input Objectinterface to the displayEventLines
             M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="channelName">Input argument #1</param>
             <param name="baselineValue">Input argument #2</param>
            
        </member>
        <member name="M:mPhysNative.Class1.displayEventLines(System.Object,System.Object,System.Object)">
             <summary>
             Provides a void output, 3-input Objectinterface to the displayEventLines
             M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="channelName">Input argument #1</param>
             <param name="baselineValue">Input argument #2</param>
             <param name="eventTimes">Input argument #3</param>
            
        </member>
        <member name="M:mPhysNative.Class1.displayEventLines(System.Object,System.Object,System.Object,System.Object)">
             <summary>
             Provides a void output, 4-input Objectinterface to the displayEventLines
             M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="channelName">Input argument #1</param>
             <param name="baselineValue">Input argument #2</param>
             <param name="eventTimes">Input argument #3</param>
             <param name="eventAmps">Input argument #4</param>
            
        </member>
        <member name="M:mPhysNative.Class1.displayEventLines(System.Object,System.Object,System.Object,System.Object,System.Object)">
             <summary>
             Provides a void output, 5-input Objectinterface to the displayEventLines
             M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="channelName">Input argument #1</param>
             <param name="baselineValue">Input argument #2</param>
             <param name="eventTimes">Input argument #3</param>
             <param name="eventAmps">Input argument #4</param>
             <param name="eventColors">Input argument #5</param>
            
        </member>
        <member name="M:mPhysNative.Class1.displayEventLines(System.Int32)">
             <summary>
             Provides the standard 0-input Object interface to the displayEventLines
             M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.displayEventLines(System.Int32,System.Object)">
             <summary>
             Provides the standard 1-input Object interface to the displayEventLines
             M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="channelName">Input argument #1</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.displayEventLines(System.Int32,System.Object,System.Object)">
             <summary>
             Provides the standard 2-input Object interface to the displayEventLines
             M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="channelName">Input argument #1</param>
             <param name="baselineValue">Input argument #2</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.displayEventLines(System.Int32,System.Object,System.Object,System.Object)">
             <summary>
             Provides the standard 3-input Object interface to the displayEventLines
             M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="channelName">Input argument #1</param>
             <param name="baselineValue">Input argument #2</param>
             <param name="eventTimes">Input argument #3</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.displayEventLines(System.Int32,System.Object,System.Object,System.Object,System.Object)">
             <summary>
             Provides the standard 4-input Object interface to the displayEventLines
             M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="channelName">Input argument #1</param>
             <param name="baselineValue">Input argument #2</param>
             <param name="eventTimes">Input argument #3</param>
             <param name="eventAmps">Input argument #4</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.displayEventLines(System.Int32,System.Object,System.Object,System.Object,System.Object,System.Object)">
             <summary>
             Provides the standard 5-input Object interface to the displayEventLines
             M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="channelName">Input argument #1</param>
             <param name="baselineValue">Input argument #2</param>
             <param name="eventTimes">Input argument #3</param>
             <param name="eventAmps">Input argument #4</param>
             <param name="eventColors">Input argument #5</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.displayEventLines(System.Int32,System.Object[]@,System.Object[],System.Object[])">
             <summary>
             Provides an interface for the displayEventLines function in which the input and
             output
             arguments are specified as an array of Objects.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of Object output arguments</param>
             <param name= "argsIn">Array of Object input arguments</param>
             <param name= "varArgsIn">Array of Object representing variable input
             arguments</param>
            
        </member>
        <member name="M:mPhysNative.Class1.displayEventLinesSimple">
             <summary>
             Provides a single output, 0-input Objectinterface to the displayEventLinesSimple
             M-function.
             </summary>
             <remarks>
             </remarks>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.displayEventLinesSimple(System.Object)">
             <summary>
             Provides a single output, 1-input Objectinterface to the displayEventLinesSimple
             M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="eventTimes">Input argument #1</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.displayEventLinesSimple(System.Object,System.Object)">
             <summary>
             Provides a single output, 2-input Objectinterface to the displayEventLinesSimple
             M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="eventTimes">Input argument #1</param>
             <param name="lineMin">Input argument #2</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.displayEventLinesSimple(System.Object,System.Object,System.Object)">
             <summary>
             Provides a single output, 3-input Objectinterface to the displayEventLinesSimple
             M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="eventTimes">Input argument #1</param>
             <param name="lineMin">Input argument #2</param>
             <param name="lineMax">Input argument #3</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.displayEventLinesSimple(System.Int32)">
             <summary>
             Provides the standard 0-input Object interface to the displayEventLinesSimple
             M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.displayEventLinesSimple(System.Int32,System.Object)">
             <summary>
             Provides the standard 1-input Object interface to the displayEventLinesSimple
             M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="eventTimes">Input argument #1</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.displayEventLinesSimple(System.Int32,System.Object,System.Object)">
             <summary>
             Provides the standard 2-input Object interface to the displayEventLinesSimple
             M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="eventTimes">Input argument #1</param>
             <param name="lineMin">Input argument #2</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.displayEventLinesSimple(System.Int32,System.Object,System.Object,System.Object)">
             <summary>
             Provides the standard 3-input Object interface to the displayEventLinesSimple
             M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="eventTimes">Input argument #1</param>
             <param name="lineMin">Input argument #2</param>
             <param name="lineMax">Input argument #3</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.displayEventLinesSimple(System.Int32,System.Object[]@,System.Object[],System.Object[])">
             <summary>
             Provides an interface for the displayEventLinesSimple function in which the input
             and output
             arguments are specified as an array of Objects.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of Object output arguments</param>
             <param name= "argsIn">Array of Object input arguments</param>
             <param name= "varArgsIn">Array of Object representing variable input
             arguments</param>
            
        </member>
        <member name="M:mPhysNative.Class1.dumpPreferences">
             <summary>
             Provides a void output, 0-input Objectinterface to the dumpPreferences
             M-function.
             </summary>
             <remarks>
             </remarks>
            
        </member>
        <member name="M:mPhysNative.Class1.dumpPreferences(System.Int32)">
             <summary>
             Provides the standard 0-input Object interface to the dumpPreferences M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.dumpPreferences(System.Int32,System.Object[]@,System.Object[],System.Object[])">
             <summary>
             Provides an interface for the dumpPreferences function in which the input and
             output
             arguments are specified as an array of Objects.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of Object output arguments</param>
             <param name= "argsIn">Array of Object input arguments</param>
             <param name= "varArgsIn">Array of Object representing variable input
             arguments</param>
            
        </member>
        <member name="M:mPhysNative.Class1.evaluateBonusText">
             <summary>
             Provides a single output, 0-input Objectinterface to the evaluateBonusText
             M-function.
             </summary>
             <remarks>
             M-Documentation:
             short and long concentrations are the same
             </remarks>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.evaluateBonusText(System.Object)">
             <summary>
             Provides a single output, 1-input Objectinterface to the evaluateBonusText
             M-function.
             </summary>
             <remarks>
             M-Documentation:
             short and long concentrations are the same
             </remarks>
             <param name="protocol">Input argument #1</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.evaluateBonusText(System.Int32)">
             <summary>
             Provides the standard 0-input Object interface to the evaluateBonusText
             M-function.
             </summary>
             <remarks>
             M-Documentation:
             short and long concentrations are the same
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.evaluateBonusText(System.Int32,System.Object)">
             <summary>
             Provides the standard 1-input Object interface to the evaluateBonusText
             M-function.
             </summary>
             <remarks>
             M-Documentation:
             short and long concentrations are the same
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="protocol">Input argument #1</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.evaluateBonusText(System.Int32,System.Object[]@,System.Object[],System.Object[])">
             <summary>
             Provides an interface for the evaluateBonusText function in which the input and
             output
             arguments are specified as an array of Objects.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             M-Documentation:
             short and long concentrations are the same
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of Object output arguments</param>
             <param name= "argsIn">Array of Object input arguments</param>
             <param name= "varArgsIn">Array of Object representing variable input
             arguments</param>
            
        </member>
        <member name="M:mPhysNative.Class1.evaluateExportText">
             <summary>
             Provides a single output, 0-input Objectinterface to the evaluateExportText
             M-function.
             </summary>
             <remarks>
             M-Documentation:
             short and long concentrations are the same
             </remarks>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.evaluateExportText(System.Int32)">
             <summary>
             Provides the standard 0-input Object interface to the evaluateExportText
             M-function.
             </summary>
             <remarks>
             M-Documentation:
             short and long concentrations are the same
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.evaluateExportText(System.Int32,System.Object[]@,System.Object[],System.Object[])">
             <summary>
             Provides an interface for the evaluateExportText function in which the input and
             output
             arguments are specified as an array of Objects.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             M-Documentation:
             short and long concentrations are the same
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of Object output arguments</param>
             <param name= "argsIn">Array of Object input arguments</param>
             <param name= "varArgsIn">Array of Object representing variable input
             arguments</param>
            
        </member>
        <member name="M:mPhysNative.Class1.eventTriggeredAverage">
             <summary>
             Provides a single output, 0-input Objectinterface to the eventTriggeredAverage
             M-function.
             </summary>
             <remarks>
             M-Documentation:
             calculate the event-triggered average in postTrace using preTrace's spikes
             outData = eventTriggeredAverage(events, postTraces, [startTime endTime],
             timePerPoint, showAllTraces);
             outData = eventTriggeredAverage(tracePaths, [preCell postCell1 postCell 2],
             [startTime endTime], timePerPoint, showAllTraces);
             defaults:
             window = [-10 100] ms
             timePerPoint = 0.2 ms
             showAllTraces = false
             </remarks>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.eventTriggeredAverage(System.Object)">
             <summary>
             Provides a single output, 1-input Objectinterface to the eventTriggeredAverage
             M-function.
             </summary>
             <remarks>
             M-Documentation:
             calculate the event-triggered average in postTrace using preTrace's spikes
             outData = eventTriggeredAverage(events, postTraces, [startTime endTime],
             timePerPoint, showAllTraces);
             outData = eventTriggeredAverage(tracePaths, [preCell postCell1 postCell 2],
             [startTime endTime], timePerPoint, showAllTraces);
             defaults:
             window = [-10 100] ms
             timePerPoint = 0.2 ms
             showAllTraces = false
             </remarks>
             <param name="events">Input argument #1</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.eventTriggeredAverage(System.Object,System.Object)">
             <summary>
             Provides a single output, 2-input Objectinterface to the eventTriggeredAverage
             M-function.
             </summary>
             <remarks>
             M-Documentation:
             calculate the event-triggered average in postTrace using preTrace's spikes
             outData = eventTriggeredAverage(events, postTraces, [startTime endTime],
             timePerPoint, showAllTraces);
             outData = eventTriggeredAverage(tracePaths, [preCell postCell1 postCell 2],
             [startTime endTime], timePerPoint, showAllTraces);
             defaults:
             window = [-10 100] ms
             timePerPoint = 0.2 ms
             showAllTraces = false
             </remarks>
             <param name="events">Input argument #1</param>
             <param name="postTrace">Input argument #2</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.eventTriggeredAverage(System.Object,System.Object,System.Object)">
             <summary>
             Provides a single output, 3-input Objectinterface to the eventTriggeredAverage
             M-function.
             </summary>
             <remarks>
             M-Documentation:
             calculate the event-triggered average in postTrace using preTrace's spikes
             outData = eventTriggeredAverage(events, postTraces, [startTime endTime],
             timePerPoint, showAllTraces);
             outData = eventTriggeredAverage(tracePaths, [preCell postCell1 postCell 2],
             [startTime endTime], timePerPoint, showAllTraces);
             defaults:
             window = [-10 100] ms
             timePerPoint = 0.2 ms
             showAllTraces = false
             </remarks>
             <param name="events">Input argument #1</param>
             <param name="postTrace">Input argument #2</param>
             <param name="window">Input argument #3</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.eventTriggeredAverage(System.Object,System.Object,System.Object,System.Object)">
             <summary>
             Provides a single output, 4-input Objectinterface to the eventTriggeredAverage
             M-function.
             </summary>
             <remarks>
             M-Documentation:
             calculate the event-triggered average in postTrace using preTrace's spikes
             outData = eventTriggeredAverage(events, postTraces, [startTime endTime],
             timePerPoint, showAllTraces);
             outData = eventTriggeredAverage(tracePaths, [preCell postCell1 postCell 2],
             [startTime endTime], timePerPoint, showAllTraces);
             defaults:
             window = [-10 100] ms
             timePerPoint = 0.2 ms
             showAllTraces = false
             </remarks>
             <param name="events">Input argument #1</param>
             <param name="postTrace">Input argument #2</param>
             <param name="window">Input argument #3</param>
             <param name="timePerPoint">Input argument #4</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.eventTriggeredAverage(System.Object,System.Object,System.Object,System.Object,System.Object)">
             <summary>
             Provides a single output, 5-input Objectinterface to the eventTriggeredAverage
             M-function.
             </summary>
             <remarks>
             M-Documentation:
             calculate the event-triggered average in postTrace using preTrace's spikes
             outData = eventTriggeredAverage(events, postTraces, [startTime endTime],
             timePerPoint, showAllTraces);
             outData = eventTriggeredAverage(tracePaths, [preCell postCell1 postCell 2],
             [startTime endTime], timePerPoint, showAllTraces);
             defaults:
             window = [-10 100] ms
             timePerPoint = 0.2 ms
             showAllTraces = false
             </remarks>
             <param name="events">Input argument #1</param>
             <param name="postTrace">Input argument #2</param>
             <param name="window">Input argument #3</param>
             <param name="timePerPoint">Input argument #4</param>
             <param name="showAllTraces">Input argument #5</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.eventTriggeredAverage(System.Int32)">
             <summary>
             Provides the standard 0-input Object interface to the eventTriggeredAverage
             M-function.
             </summary>
             <remarks>
             M-Documentation:
             calculate the event-triggered average in postTrace using preTrace's spikes
             outData = eventTriggeredAverage(events, postTraces, [startTime endTime],
             timePerPoint, showAllTraces);
             outData = eventTriggeredAverage(tracePaths, [preCell postCell1 postCell 2],
             [startTime endTime], timePerPoint, showAllTraces);
             defaults:
             window = [-10 100] ms
             timePerPoint = 0.2 ms
             showAllTraces = false
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.eventTriggeredAverage(System.Int32,System.Object)">
             <summary>
             Provides the standard 1-input Object interface to the eventTriggeredAverage
             M-function.
             </summary>
             <remarks>
             M-Documentation:
             calculate the event-triggered average in postTrace using preTrace's spikes
             outData = eventTriggeredAverage(events, postTraces, [startTime endTime],
             timePerPoint, showAllTraces);
             outData = eventTriggeredAverage(tracePaths, [preCell postCell1 postCell 2],
             [startTime endTime], timePerPoint, showAllTraces);
             defaults:
             window = [-10 100] ms
             timePerPoint = 0.2 ms
             showAllTraces = false
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="events">Input argument #1</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.eventTriggeredAverage(System.Int32,System.Object,System.Object)">
             <summary>
             Provides the standard 2-input Object interface to the eventTriggeredAverage
             M-function.
             </summary>
             <remarks>
             M-Documentation:
             calculate the event-triggered average in postTrace using preTrace's spikes
             outData = eventTriggeredAverage(events, postTraces, [startTime endTime],
             timePerPoint, showAllTraces);
             outData = eventTriggeredAverage(tracePaths, [preCell postCell1 postCell 2],
             [startTime endTime], timePerPoint, showAllTraces);
             defaults:
             window = [-10 100] ms
             timePerPoint = 0.2 ms
             showAllTraces = false
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="events">Input argument #1</param>
             <param name="postTrace">Input argument #2</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.eventTriggeredAverage(System.Int32,System.Object,System.Object,System.Object)">
             <summary>
             Provides the standard 3-input Object interface to the eventTriggeredAverage
             M-function.
             </summary>
             <remarks>
             M-Documentation:
             calculate the event-triggered average in postTrace using preTrace's spikes
             outData = eventTriggeredAverage(events, postTraces, [startTime endTime],
             timePerPoint, showAllTraces);
             outData = eventTriggeredAverage(tracePaths, [preCell postCell1 postCell 2],
             [startTime endTime], timePerPoint, showAllTraces);
             defaults:
             window = [-10 100] ms
             timePerPoint = 0.2 ms
             showAllTraces = false
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="events">Input argument #1</param>
             <param name="postTrace">Input argument #2</param>
             <param name="window">Input argument #3</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.eventTriggeredAverage(System.Int32,System.Object,System.Object,System.Object,System.Object)">
             <summary>
             Provides the standard 4-input Object interface to the eventTriggeredAverage
             M-function.
             </summary>
             <remarks>
             M-Documentation:
             calculate the event-triggered average in postTrace using preTrace's spikes
             outData = eventTriggeredAverage(events, postTraces, [startTime endTime],
             timePerPoint, showAllTraces);
             outData = eventTriggeredAverage(tracePaths, [preCell postCell1 postCell 2],
             [startTime endTime], timePerPoint, showAllTraces);
             defaults:
             window = [-10 100] ms
             timePerPoint = 0.2 ms
             showAllTraces = false
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="events">Input argument #1</param>
             <param name="postTrace">Input argument #2</param>
             <param name="window">Input argument #3</param>
             <param name="timePerPoint">Input argument #4</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.eventTriggeredAverage(System.Int32,System.Object,System.Object,System.Object,System.Object,System.Object)">
             <summary>
             Provides the standard 5-input Object interface to the eventTriggeredAverage
             M-function.
             </summary>
             <remarks>
             M-Documentation:
             calculate the event-triggered average in postTrace using preTrace's spikes
             outData = eventTriggeredAverage(events, postTraces, [startTime endTime],
             timePerPoint, showAllTraces);
             outData = eventTriggeredAverage(tracePaths, [preCell postCell1 postCell 2],
             [startTime endTime], timePerPoint, showAllTraces);
             defaults:
             window = [-10 100] ms
             timePerPoint = 0.2 ms
             showAllTraces = false
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="events">Input argument #1</param>
             <param name="postTrace">Input argument #2</param>
             <param name="window">Input argument #3</param>
             <param name="timePerPoint">Input argument #4</param>
             <param name="showAllTraces">Input argument #5</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.eventTriggeredAverage(System.Int32,System.Object[]@,System.Object[],System.Object[])">
             <summary>
             Provides an interface for the eventTriggeredAverage function in which the input
             and output
             arguments are specified as an array of Objects.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             M-Documentation:
             calculate the event-triggered average in postTrace using preTrace's spikes
             outData = eventTriggeredAverage(events, postTraces, [startTime endTime],
             timePerPoint, showAllTraces);
             outData = eventTriggeredAverage(tracePaths, [preCell postCell1 postCell 2],
             [startTime endTime], timePerPoint, showAllTraces);
             defaults:
             window = [-10 100] ms
             timePerPoint = 0.2 ms
             showAllTraces = false
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of Object output arguments</param>
             <param name= "argsIn">Array of Object input arguments</param>
             <param name= "varArgsIn">Array of Object representing variable input
             arguments</param>
            
        </member>
        <member name="M:mPhysNative.Class1.executeMatlabLine">
             <summary>
             Provides a single output, 0-input Objectinterface to the executeMatlabLine
             M-function.
             </summary>
             <remarks>
             </remarks>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.executeMatlabLine(System.Object)">
             <summary>
             Provides a single output, 1-input Objectinterface to the executeMatlabLine
             M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="inString">Input argument #1</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.executeMatlabLine(System.Int32)">
             <summary>
             Provides the standard 0-input Object interface to the executeMatlabLine
             M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.executeMatlabLine(System.Int32,System.Object)">
             <summary>
             Provides the standard 1-input Object interface to the executeMatlabLine
             M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="inString">Input argument #1</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.executeMatlabLine(System.Int32,System.Object[]@,System.Object[],System.Object[])">
             <summary>
             Provides an interface for the executeMatlabLine function in which the input and
             output
             arguments are specified as an array of Objects.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of Object output arguments</param>
             <param name= "argsIn">Array of Object input arguments</param>
             <param name= "varArgsIn">Array of Object representing variable input
             arguments</param>
            
        </member>
        <member name="M:mPhysNative.Class1.exportToRDrive">
             <summary>
             Provides a void output, 0-input Objectinterface to the exportToRDrive M-function.
             </summary>
             <remarks>
             M-Documentation:
             function for converting a newScope to an enhanced meta-file on the clipboard
             </remarks>
            
        </member>
        <member name="M:mPhysNative.Class1.exportToRDrive(System.Object)">
             <summary>
             Provides a void output, 1-input Objectinterface to the exportToRDrive M-function.
             </summary>
             <remarks>
             M-Documentation:
             function for converting a newScope to an enhanced meta-file on the clipboard
             </remarks>
             <param name="figure">Input argument #1</param>
            
        </member>
        <member name="M:mPhysNative.Class1.exportToRDrive(System.Int32)">
             <summary>
             Provides the standard 0-input Object interface to the exportToRDrive M-function.
             </summary>
             <remarks>
             M-Documentation:
             function for converting a newScope to an enhanced meta-file on the clipboard
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.exportToRDrive(System.Int32,System.Object)">
             <summary>
             Provides the standard 1-input Object interface to the exportToRDrive M-function.
             </summary>
             <remarks>
             M-Documentation:
             function for converting a newScope to an enhanced meta-file on the clipboard
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="figure">Input argument #1</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.exportToRDrive(System.Int32,System.Object[]@,System.Object[],System.Object[])">
             <summary>
             Provides an interface for the exportToRDrive function in which the input and
             output
             arguments are specified as an array of Objects.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             M-Documentation:
             function for converting a newScope to an enhanced meta-file on the clipboard
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of Object output arguments</param>
             <param name= "argsIn">Array of Object input arguments</param>
             <param name= "varArgsIn">Array of Object representing variable input
             arguments</param>
            
        </member>
        <member name="M:mPhysNative.Class1.exportWithAxes">
             <summary>
             Provides a void output, 0-input Objectinterface to the exportWithAxes M-function.
             </summary>
             <remarks>
             M-Documentation:
             function for converting a newScope to an enhanced meta-file on the clipboard
             </remarks>
            
        </member>
        <member name="M:mPhysNative.Class1.exportWithAxes(System.Object)">
             <summary>
             Provides a void output, 1-input Objectinterface to the exportWithAxes M-function.
             </summary>
             <remarks>
             M-Documentation:
             function for converting a newScope to an enhanced meta-file on the clipboard
             </remarks>
             <param name="figure">Input argument #1</param>
            
        </member>
        <member name="M:mPhysNative.Class1.exportWithAxes(System.Int32)">
             <summary>
             Provides the standard 0-input Object interface to the exportWithAxes M-function.
             </summary>
             <remarks>
             M-Documentation:
             function for converting a newScope to an enhanced meta-file on the clipboard
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.exportWithAxes(System.Int32,System.Object)">
             <summary>
             Provides the standard 1-input Object interface to the exportWithAxes M-function.
             </summary>
             <remarks>
             M-Documentation:
             function for converting a newScope to an enhanced meta-file on the clipboard
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="figure">Input argument #1</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.exportWithAxes(System.Int32,System.Object[]@,System.Object[],System.Object[])">
             <summary>
             Provides an interface for the exportWithAxes function in which the input and
             output
             arguments are specified as an array of Objects.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             M-Documentation:
             function for converting a newScope to an enhanced meta-file on the clipboard
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of Object output arguments</param>
             <param name= "argsIn">Array of Object input arguments</param>
             <param name= "varArgsIn">Array of Object representing variable input
             arguments</param>
            
        </member>
        <member name="M:mPhysNative.Class1.exportWithScaleBars">
             <summary>
             Provides a void output, 0-input Objectinterface to the exportWithScaleBars
             M-function.
             </summary>
             <remarks>
             M-Documentation:
             function for converting a newScope to an enhanced meta-file on the clipboard
             </remarks>
            
        </member>
        <member name="M:mPhysNative.Class1.exportWithScaleBars(System.Object)">
             <summary>
             Provides a void output, 1-input Objectinterface to the exportWithScaleBars
             M-function.
             </summary>
             <remarks>
             M-Documentation:
             function for converting a newScope to an enhanced meta-file on the clipboard
             </remarks>
             <param name="figure">Input argument #1</param>
            
        </member>
        <member name="M:mPhysNative.Class1.exportWithScaleBars(System.Int32)">
             <summary>
             Provides the standard 0-input Object interface to the exportWithScaleBars
             M-function.
             </summary>
             <remarks>
             M-Documentation:
             function for converting a newScope to an enhanced meta-file on the clipboard
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.exportWithScaleBars(System.Int32,System.Object)">
             <summary>
             Provides the standard 1-input Object interface to the exportWithScaleBars
             M-function.
             </summary>
             <remarks>
             M-Documentation:
             function for converting a newScope to an enhanced meta-file on the clipboard
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="figure">Input argument #1</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.exportWithScaleBars(System.Int32,System.Object[]@,System.Object[],System.Object[])">
             <summary>
             Provides an interface for the exportWithScaleBars function in which the input and
             output
             arguments are specified as an array of Objects.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             M-Documentation:
             function for converting a newScope to an enhanced meta-file on the clipboard
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of Object output arguments</param>
             <param name= "argsIn">Array of Object input arguments</param>
             <param name= "varArgsIn">Array of Object representing variable input
             arguments</param>
            
        </member>
        <member name="M:mPhysNative.Class1.fastAHP">
             <summary>
             Provides a single output, 0-input Objectinterface to the fastAHP M-function.
             </summary>
             <remarks>
             M-Documentation:
             ahpDepths = fastAHP(dataTrace, timerPerPoint, startTime, outputAxisHandle);
             defaults:
             timePerPoint = 0.2 ms
             startTime = 0 ms
             outputAxisHandle is a handle to a new newScope figure
             determine the distance (in mV) from spike threshold to the bottom of the
             AHP sag of the action potential in a minimally-stimulated cell
             After Luebke, Frotscher, and Spruston 1998
             </remarks>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.fastAHP(System.Object)">
             <summary>
             Provides a single output, 1-input Objectinterface to the fastAHP M-function.
             </summary>
             <remarks>
             M-Documentation:
             ahpDepths = fastAHP(dataTrace, timerPerPoint, startTime, outputAxisHandle);
             defaults:
             timePerPoint = 0.2 ms
             startTime = 0 ms
             outputAxisHandle is a handle to a new newScope figure
             determine the distance (in mV) from spike threshold to the bottom of the
             AHP sag of the action potential in a minimally-stimulated cell
             After Luebke, Frotscher, and Spruston 1998
             </remarks>
             <param name="inData">Input argument #1</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.fastAHP(System.Object,System.Object)">
             <summary>
             Provides a single output, 2-input Objectinterface to the fastAHP M-function.
             </summary>
             <remarks>
             M-Documentation:
             ahpDepths = fastAHP(dataTrace, timerPerPoint, startTime, outputAxisHandle);
             defaults:
             timePerPoint = 0.2 ms
             startTime = 0 ms
             outputAxisHandle is a handle to a new newScope figure
             determine the distance (in mV) from spike threshold to the bottom of the
             AHP sag of the action potential in a minimally-stimulated cell
             After Luebke, Frotscher, and Spruston 1998
             </remarks>
             <param name="inData">Input argument #1</param>
             <param name="timePerPoint">Input argument #2</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.fastAHP(System.Object,System.Object,System.Object)">
             <summary>
             Provides a single output, 3-input Objectinterface to the fastAHP M-function.
             </summary>
             <remarks>
             M-Documentation:
             ahpDepths = fastAHP(dataTrace, timerPerPoint, startTime, outputAxisHandle);
             defaults:
             timePerPoint = 0.2 ms
             startTime = 0 ms
             outputAxisHandle is a handle to a new newScope figure
             determine the distance (in mV) from spike threshold to the bottom of the
             AHP sag of the action potential in a minimally-stimulated cell
             After Luebke, Frotscher, and Spruston 1998
             </remarks>
             <param name="inData">Input argument #1</param>
             <param name="timePerPoint">Input argument #2</param>
             <param name="startTime">Input argument #3</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.fastAHP(System.Object,System.Object,System.Object,System.Object)">
             <summary>
             Provides a single output, 4-input Objectinterface to the fastAHP M-function.
             </summary>
             <remarks>
             M-Documentation:
             ahpDepths = fastAHP(dataTrace, timerPerPoint, startTime, outputAxisHandle);
             defaults:
             timePerPoint = 0.2 ms
             startTime = 0 ms
             outputAxisHandle is a handle to a new newScope figure
             determine the distance (in mV) from spike threshold to the bottom of the
             AHP sag of the action potential in a minimally-stimulated cell
             After Luebke, Frotscher, and Spruston 1998
             </remarks>
             <param name="inData">Input argument #1</param>
             <param name="timePerPoint">Input argument #2</param>
             <param name="startTime">Input argument #3</param>
             <param name="axisHandle">Input argument #4</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.fastAHP(System.Int32)">
             <summary>
             Provides the standard 0-input Object interface to the fastAHP M-function.
             </summary>
             <remarks>
             M-Documentation:
             ahpDepths = fastAHP(dataTrace, timerPerPoint, startTime, outputAxisHandle);
             defaults:
             timePerPoint = 0.2 ms
             startTime = 0 ms
             outputAxisHandle is a handle to a new newScope figure
             determine the distance (in mV) from spike threshold to the bottom of the
             AHP sag of the action potential in a minimally-stimulated cell
             After Luebke, Frotscher, and Spruston 1998
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.fastAHP(System.Int32,System.Object)">
             <summary>
             Provides the standard 1-input Object interface to the fastAHP M-function.
             </summary>
             <remarks>
             M-Documentation:
             ahpDepths = fastAHP(dataTrace, timerPerPoint, startTime, outputAxisHandle);
             defaults:
             timePerPoint = 0.2 ms
             startTime = 0 ms
             outputAxisHandle is a handle to a new newScope figure
             determine the distance (in mV) from spike threshold to the bottom of the
             AHP sag of the action potential in a minimally-stimulated cell
             After Luebke, Frotscher, and Spruston 1998
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="inData">Input argument #1</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.fastAHP(System.Int32,System.Object,System.Object)">
             <summary>
             Provides the standard 2-input Object interface to the fastAHP M-function.
             </summary>
             <remarks>
             M-Documentation:
             ahpDepths = fastAHP(dataTrace, timerPerPoint, startTime, outputAxisHandle);
             defaults:
             timePerPoint = 0.2 ms
             startTime = 0 ms
             outputAxisHandle is a handle to a new newScope figure
             determine the distance (in mV) from spike threshold to the bottom of the
             AHP sag of the action potential in a minimally-stimulated cell
             After Luebke, Frotscher, and Spruston 1998
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="inData">Input argument #1</param>
             <param name="timePerPoint">Input argument #2</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.fastAHP(System.Int32,System.Object,System.Object,System.Object)">
             <summary>
             Provides the standard 3-input Object interface to the fastAHP M-function.
             </summary>
             <remarks>
             M-Documentation:
             ahpDepths = fastAHP(dataTrace, timerPerPoint, startTime, outputAxisHandle);
             defaults:
             timePerPoint = 0.2 ms
             startTime = 0 ms
             outputAxisHandle is a handle to a new newScope figure
             determine the distance (in mV) from spike threshold to the bottom of the
             AHP sag of the action potential in a minimally-stimulated cell
             After Luebke, Frotscher, and Spruston 1998
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="inData">Input argument #1</param>
             <param name="timePerPoint">Input argument #2</param>
             <param name="startTime">Input argument #3</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.fastAHP(System.Int32,System.Object,System.Object,System.Object,System.Object)">
             <summary>
             Provides the standard 4-input Object interface to the fastAHP M-function.
             </summary>
             <remarks>
             M-Documentation:
             ahpDepths = fastAHP(dataTrace, timerPerPoint, startTime, outputAxisHandle);
             defaults:
             timePerPoint = 0.2 ms
             startTime = 0 ms
             outputAxisHandle is a handle to a new newScope figure
             determine the distance (in mV) from spike threshold to the bottom of the
             AHP sag of the action potential in a minimally-stimulated cell
             After Luebke, Frotscher, and Spruston 1998
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="inData">Input argument #1</param>
             <param name="timePerPoint">Input argument #2</param>
             <param name="startTime">Input argument #3</param>
             <param name="axisHandle">Input argument #4</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.fastAHP(System.Int32,System.Object[]@,System.Object[],System.Object[])">
             <summary>
             Provides an interface for the fastAHP function in which the input and output
             arguments are specified as an array of Objects.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             M-Documentation:
             ahpDepths = fastAHP(dataTrace, timerPerPoint, startTime, outputAxisHandle);
             defaults:
             timePerPoint = 0.2 ms
             startTime = 0 ms
             outputAxisHandle is a handle to a new newScope figure
             determine the distance (in mV) from spike threshold to the bottom of the
             AHP sag of the action potential in a minimally-stimulated cell
             After Luebke, Frotscher, and Spruston 1998
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of Object output arguments</param>
             <param name= "argsIn">Array of Object input arguments</param>
             <param name= "varArgsIn">Array of Object representing variable input
             arguments</param>
            
        </member>
        <member name="M:mPhysNative.Class1.fastAHPSlope">
             <summary>
             Provides a single output, 0-input Objectinterface to the fastAHPSlope M-function.
             </summary>
             <remarks>
             M-Documentation:
             ahpDepths = fastAHP(dataTrace, timerPerPoint, startTime, outputAxisHandle);
             defaults:
             timePerPoint = 0.2 ms
             startTime = 0 ms
             outputAxisHandle is a handle to a new newScope figure
             determine the distance (in mV) from spike threshold to the bottom of the
             AHP sag of the action potential in a minimally-stimulated cell
             After Luebke, Frotscher, and Spruston 1998
             </remarks>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.fastAHPSlope(System.Object)">
             <summary>
             Provides a single output, 1-input Objectinterface to the fastAHPSlope M-function.
             </summary>
             <remarks>
             M-Documentation:
             ahpDepths = fastAHP(dataTrace, timerPerPoint, startTime, outputAxisHandle);
             defaults:
             timePerPoint = 0.2 ms
             startTime = 0 ms
             outputAxisHandle is a handle to a new newScope figure
             determine the distance (in mV) from spike threshold to the bottom of the
             AHP sag of the action potential in a minimally-stimulated cell
             After Luebke, Frotscher, and Spruston 1998
             </remarks>
             <param name="inData">Input argument #1</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.fastAHPSlope(System.Object,System.Object)">
             <summary>
             Provides a single output, 2-input Objectinterface to the fastAHPSlope M-function.
             </summary>
             <remarks>
             M-Documentation:
             ahpDepths = fastAHP(dataTrace, timerPerPoint, startTime, outputAxisHandle);
             defaults:
             timePerPoint = 0.2 ms
             startTime = 0 ms
             outputAxisHandle is a handle to a new newScope figure
             determine the distance (in mV) from spike threshold to the bottom of the
             AHP sag of the action potential in a minimally-stimulated cell
             After Luebke, Frotscher, and Spruston 1998
             </remarks>
             <param name="inData">Input argument #1</param>
             <param name="timePerPoint">Input argument #2</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.fastAHPSlope(System.Object,System.Object,System.Object)">
             <summary>
             Provides a single output, 3-input Objectinterface to the fastAHPSlope M-function.
             </summary>
             <remarks>
             M-Documentation:
             ahpDepths = fastAHP(dataTrace, timerPerPoint, startTime, outputAxisHandle);
             defaults:
             timePerPoint = 0.2 ms
             startTime = 0 ms
             outputAxisHandle is a handle to a new newScope figure
             determine the distance (in mV) from spike threshold to the bottom of the
             AHP sag of the action potential in a minimally-stimulated cell
             After Luebke, Frotscher, and Spruston 1998
             </remarks>
             <param name="inData">Input argument #1</param>
             <param name="timePerPoint">Input argument #2</param>
             <param name="startTime">Input argument #3</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.fastAHPSlope(System.Object,System.Object,System.Object,System.Object)">
             <summary>
             Provides a single output, 4-input Objectinterface to the fastAHPSlope M-function.
             </summary>
             <remarks>
             M-Documentation:
             ahpDepths = fastAHP(dataTrace, timerPerPoint, startTime, outputAxisHandle);
             defaults:
             timePerPoint = 0.2 ms
             startTime = 0 ms
             outputAxisHandle is a handle to a new newScope figure
             determine the distance (in mV) from spike threshold to the bottom of the
             AHP sag of the action potential in a minimally-stimulated cell
             After Luebke, Frotscher, and Spruston 1998
             </remarks>
             <param name="inData">Input argument #1</param>
             <param name="timePerPoint">Input argument #2</param>
             <param name="startTime">Input argument #3</param>
             <param name="axisHandle">Input argument #4</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.fastAHPSlope(System.Int32)">
             <summary>
             Provides the standard 0-input Object interface to the fastAHPSlope M-function.
             </summary>
             <remarks>
             M-Documentation:
             ahpDepths = fastAHP(dataTrace, timerPerPoint, startTime, outputAxisHandle);
             defaults:
             timePerPoint = 0.2 ms
             startTime = 0 ms
             outputAxisHandle is a handle to a new newScope figure
             determine the distance (in mV) from spike threshold to the bottom of the
             AHP sag of the action potential in a minimally-stimulated cell
             After Luebke, Frotscher, and Spruston 1998
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.fastAHPSlope(System.Int32,System.Object)">
             <summary>
             Provides the standard 1-input Object interface to the fastAHPSlope M-function.
             </summary>
             <remarks>
             M-Documentation:
             ahpDepths = fastAHP(dataTrace, timerPerPoint, startTime, outputAxisHandle);
             defaults:
             timePerPoint = 0.2 ms
             startTime = 0 ms
             outputAxisHandle is a handle to a new newScope figure
             determine the distance (in mV) from spike threshold to the bottom of the
             AHP sag of the action potential in a minimally-stimulated cell
             After Luebke, Frotscher, and Spruston 1998
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="inData">Input argument #1</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.fastAHPSlope(System.Int32,System.Object,System.Object)">
             <summary>
             Provides the standard 2-input Object interface to the fastAHPSlope M-function.
             </summary>
             <remarks>
             M-Documentation:
             ahpDepths = fastAHP(dataTrace, timerPerPoint, startTime, outputAxisHandle);
             defaults:
             timePerPoint = 0.2 ms
             startTime = 0 ms
             outputAxisHandle is a handle to a new newScope figure
             determine the distance (in mV) from spike threshold to the bottom of the
             AHP sag of the action potential in a minimally-stimulated cell
             After Luebke, Frotscher, and Spruston 1998
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="inData">Input argument #1</param>
             <param name="timePerPoint">Input argument #2</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.fastAHPSlope(System.Int32,System.Object,System.Object,System.Object)">
             <summary>
             Provides the standard 3-input Object interface to the fastAHPSlope M-function.
             </summary>
             <remarks>
             M-Documentation:
             ahpDepths = fastAHP(dataTrace, timerPerPoint, startTime, outputAxisHandle);
             defaults:
             timePerPoint = 0.2 ms
             startTime = 0 ms
             outputAxisHandle is a handle to a new newScope figure
             determine the distance (in mV) from spike threshold to the bottom of the
             AHP sag of the action potential in a minimally-stimulated cell
             After Luebke, Frotscher, and Spruston 1998
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="inData">Input argument #1</param>
             <param name="timePerPoint">Input argument #2</param>
             <param name="startTime">Input argument #3</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.fastAHPSlope(System.Int32,System.Object,System.Object,System.Object,System.Object)">
             <summary>
             Provides the standard 4-input Object interface to the fastAHPSlope M-function.
             </summary>
             <remarks>
             M-Documentation:
             ahpDepths = fastAHP(dataTrace, timerPerPoint, startTime, outputAxisHandle);
             defaults:
             timePerPoint = 0.2 ms
             startTime = 0 ms
             outputAxisHandle is a handle to a new newScope figure
             determine the distance (in mV) from spike threshold to the bottom of the
             AHP sag of the action potential in a minimally-stimulated cell
             After Luebke, Frotscher, and Spruston 1998
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="inData">Input argument #1</param>
             <param name="timePerPoint">Input argument #2</param>
             <param name="startTime">Input argument #3</param>
             <param name="axisHandle">Input argument #4</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.fastAHPSlope(System.Int32,System.Object[]@,System.Object[],System.Object[])">
             <summary>
             Provides an interface for the fastAHPSlope function in which the input and output
             arguments are specified as an array of Objects.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             M-Documentation:
             ahpDepths = fastAHP(dataTrace, timerPerPoint, startTime, outputAxisHandle);
             defaults:
             timePerPoint = 0.2 ms
             startTime = 0 ms
             outputAxisHandle is a handle to a new newScope figure
             determine the distance (in mV) from spike threshold to the bottom of the
             AHP sag of the action potential in a minimally-stimulated cell
             After Luebke, Frotscher, and Spruston 1998
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of Object output arguments</param>
             <param name= "argsIn">Array of Object input arguments</param>
             <param name= "varArgsIn">Array of Object representing variable input
             arguments</param>
            
        </member>
        <member name="M:mPhysNative.Class1.fcnMin">
             <summary>
             Provides a single output, 0-input Objectinterface to the fcnMin M-function.
             </summary>
             <remarks>
             M-Documentation:
             finds the minima of the given input data
             second two arguements function like those of the find command
             </remarks>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.fcnMin(System.Object)">
             <summary>
             Provides a single output, 1-input Objectinterface to the fcnMin M-function.
             </summary>
             <remarks>
             M-Documentation:
             finds the minima of the given input data
             second two arguements function like those of the find command
             </remarks>
             <param name="inData">Input argument #1</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.fcnMin(System.Object,System.Object)">
             <summary>
             Provides a single output, 2-input Objectinterface to the fcnMin M-function.
             </summary>
             <remarks>
             M-Documentation:
             finds the minima of the given input data
             second two arguements function like those of the find command
             </remarks>
             <param name="inData">Input argument #1</param>
             <param name="number">Input argument #2</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.fcnMin(System.Object,System.Object,System.Object)">
             <summary>
             Provides a single output, 3-input Objectinterface to the fcnMin M-function.
             </summary>
             <remarks>
             M-Documentation:
             finds the minima of the given input data
             second two arguements function like those of the find command
             </remarks>
             <param name="inData">Input argument #1</param>
             <param name="number">Input argument #2</param>
             <param name="type">Input argument #3</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.fcnMin(System.Int32)">
             <summary>
             Provides the standard 0-input Object interface to the fcnMin M-function.
             </summary>
             <remarks>
             M-Documentation:
             finds the minima of the given input data
             second two arguements function like those of the find command
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.fcnMin(System.Int32,System.Object)">
             <summary>
             Provides the standard 1-input Object interface to the fcnMin M-function.
             </summary>
             <remarks>
             M-Documentation:
             finds the minima of the given input data
             second two arguements function like those of the find command
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="inData">Input argument #1</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.fcnMin(System.Int32,System.Object,System.Object)">
             <summary>
             Provides the standard 2-input Object interface to the fcnMin M-function.
             </summary>
             <remarks>
             M-Documentation:
             finds the minima of the given input data
             second two arguements function like those of the find command
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="inData">Input argument #1</param>
             <param name="number">Input argument #2</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.fcnMin(System.Int32,System.Object,System.Object,System.Object)">
             <summary>
             Provides the standard 3-input Object interface to the fcnMin M-function.
             </summary>
             <remarks>
             M-Documentation:
             finds the minima of the given input data
             second two arguements function like those of the find command
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="inData">Input argument #1</param>
             <param name="number">Input argument #2</param>
             <param name="type">Input argument #3</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.fcnMin(System.Int32,System.Object[]@,System.Object[],System.Object[])">
             <summary>
             Provides an interface for the fcnMin function in which the input and output
             arguments are specified as an array of Objects.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             M-Documentation:
             finds the minima of the given input data
             second two arguements function like those of the find command
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of Object output arguments</param>
             <param name= "argsIn">Array of Object input arguments</param>
             <param name= "varArgsIn">Array of Object representing variable input
             arguments</param>
            
        </member>
        <member name="M:mPhysNative.Class1.findSteps">
             <summary>
             Provides a single output, 0-input Objectinterface to the findSteps M-function.
             </summary>
             <remarks>
             M-Documentation:
             function stepData = findSteps(protocol, ampNum)
             stepData is of the form [stepNumber, [changeTime changeAmplitude]]
             or if no ampNum is passed then [ampNumber, stepNumber, [changeTime
             changeAmplitude]]
             </remarks>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.findSteps(System.Object)">
             <summary>
             Provides a single output, 1-input Objectinterface to the findSteps M-function.
             </summary>
             <remarks>
             M-Documentation:
             function stepData = findSteps(protocol, ampNum)
             stepData is of the form [stepNumber, [changeTime changeAmplitude]]
             or if no ampNum is passed then [ampNumber, stepNumber, [changeTime
             changeAmplitude]]
             </remarks>
             <param name="protocol">Input argument #1</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.findSteps(System.Object,System.Object)">
             <summary>
             Provides a single output, 2-input Objectinterface to the findSteps M-function.
             </summary>
             <remarks>
             M-Documentation:
             function stepData = findSteps(protocol, ampNum)
             stepData is of the form [stepNumber, [changeTime changeAmplitude]]
             or if no ampNum is passed then [ampNumber, stepNumber, [changeTime
             changeAmplitude]]
             </remarks>
             <param name="protocol">Input argument #1</param>
             <param name="ampNum">Input argument #2</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.findSteps(System.Int32)">
             <summary>
             Provides the standard 0-input Object interface to the findSteps M-function.
             </summary>
             <remarks>
             M-Documentation:
             function stepData = findSteps(protocol, ampNum)
             stepData is of the form [stepNumber, [changeTime changeAmplitude]]
             or if no ampNum is passed then [ampNumber, stepNumber, [changeTime
             changeAmplitude]]
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.findSteps(System.Int32,System.Object)">
             <summary>
             Provides the standard 1-input Object interface to the findSteps M-function.
             </summary>
             <remarks>
             M-Documentation:
             function stepData = findSteps(protocol, ampNum)
             stepData is of the form [stepNumber, [changeTime changeAmplitude]]
             or if no ampNum is passed then [ampNumber, stepNumber, [changeTime
             changeAmplitude]]
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="protocol">Input argument #1</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.findSteps(System.Int32,System.Object,System.Object)">
             <summary>
             Provides the standard 2-input Object interface to the findSteps M-function.
             </summary>
             <remarks>
             M-Documentation:
             function stepData = findSteps(protocol, ampNum)
             stepData is of the form [stepNumber, [changeTime changeAmplitude]]
             or if no ampNum is passed then [ampNumber, stepNumber, [changeTime
             changeAmplitude]]
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="protocol">Input argument #1</param>
             <param name="ampNum">Input argument #2</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.findSteps(System.Int32,System.Object[]@,System.Object[],System.Object[])">
             <summary>
             Provides an interface for the findSteps function in which the input and output
             arguments are specified as an array of Objects.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             M-Documentation:
             function stepData = findSteps(protocol, ampNum)
             stepData is of the form [stepNumber, [changeTime changeAmplitude]]
             or if no ampNum is passed then [ampNumber, stepNumber, [changeTime
             changeAmplitude]]
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of Object output arguments</param>
             <param name= "argsIn">Array of Object input arguments</param>
             <param name= "varArgsIn">Array of Object representing variable input
             arguments</param>
            
        </member>
        <member name="M:mPhysNative.Class1.findStims">
             <summary>
             Provides a single output, 0-input Objectinterface to the findStims M-function.
             </summary>
             <remarks>
             M-Documentation:
             stimTimes is a cell array of n x 2 matrices where column one is the
             start, and column two is the stop time for stimuli
             </remarks>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.findStims(System.Object)">
             <summary>
             Provides a single output, 1-input Objectinterface to the findStims M-function.
             </summary>
             <remarks>
             M-Documentation:
             stimTimes is a cell array of n x 2 matrices where column one is the
             start, and column two is the stop time for stimuli
             </remarks>
             <param name="protocol">Input argument #1</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.findStims(System.Object,System.Object)">
             <summary>
             Provides a single output, 2-input Objectinterface to the findStims M-function.
             </summary>
             <remarks>
             M-Documentation:
             stimTimes is a cell array of n x 2 matrices where column one is the
             start, and column two is the stop time for stimuli
             </remarks>
             <param name="protocol">Input argument #1</param>
             <param name="isIndex">Input argument #2</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.findStims(System.Int32)">
             <summary>
             Provides the standard 0-input Object interface to the findStims M-function.
             </summary>
             <remarks>
             M-Documentation:
             stimTimes is a cell array of n x 2 matrices where column one is the
             start, and column two is the stop time for stimuli
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.findStims(System.Int32,System.Object)">
             <summary>
             Provides the standard 1-input Object interface to the findStims M-function.
             </summary>
             <remarks>
             M-Documentation:
             stimTimes is a cell array of n x 2 matrices where column one is the
             start, and column two is the stop time for stimuli
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="protocol">Input argument #1</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.findStims(System.Int32,System.Object,System.Object)">
             <summary>
             Provides the standard 2-input Object interface to the findStims M-function.
             </summary>
             <remarks>
             M-Documentation:
             stimTimes is a cell array of n x 2 matrices where column one is the
             start, and column two is the stop time for stimuli
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="protocol">Input argument #1</param>
             <param name="isIndex">Input argument #2</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.findStims(System.Int32,System.Object[]@,System.Object[],System.Object[])">
             <summary>
             Provides an interface for the findStims function in which the input and output
             arguments are specified as an array of Objects.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             M-Documentation:
             stimTimes is a cell array of n x 2 matrices where column one is the
             start, and column two is the stop time for stimuli
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of Object output arguments</param>
             <param name= "argsIn">Array of Object input arguments</param>
             <param name= "varArgsIn">Array of Object representing variable input
             arguments</param>
            
        </member>
        <member name="M:mPhysNative.Class1.fit1Exp">
             <summary>
             Provides a single output, 0-input Objectinterface to the fit1Exp M-function.
             </summary>
             <remarks>
             M-Documentation:
             fits single exponent to data
             </remarks>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.fit1Exp(System.Object)">
             <summary>
             Provides a single output, 1-input Objectinterface to the fit1Exp M-function.
             </summary>
             <remarks>
             M-Documentation:
             fits single exponent to data
             </remarks>
             <param name="yData">Input argument #1</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.fit1Exp(System.Object,System.Object)">
             <summary>
             Provides a single output, 2-input Objectinterface to the fit1Exp M-function.
             </summary>
             <remarks>
             M-Documentation:
             fits single exponent to data
             </remarks>
             <param name="yData">Input argument #1</param>
             <param name="timePerPoint">Input argument #2</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.fit1Exp(System.Object,System.Object,System.Object)">
             <summary>
             Provides a single output, 3-input Objectinterface to the fit1Exp M-function.
             </summary>
             <remarks>
             M-Documentation:
             fits single exponent to data
             </remarks>
             <param name="yData">Input argument #1</param>
             <param name="timePerPoint">Input argument #2</param>
             <param name="startingTime">Input argument #3</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.fit1Exp(System.Object,System.Object,System.Object,System.Object)">
             <summary>
             Provides a single output, 4-input Objectinterface to the fit1Exp M-function.
             </summary>
             <remarks>
             M-Documentation:
             fits single exponent to data
             </remarks>
             <param name="yData">Input argument #1</param>
             <param name="timePerPoint">Input argument #2</param>
             <param name="startingTime">Input argument #3</param>
             <param name="axisHandle">Input argument #4</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.fit1Exp(System.Int32)">
             <summary>
             Provides the standard 0-input Object interface to the fit1Exp M-function.
             </summary>
             <remarks>
             M-Documentation:
             fits single exponent to data
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.fit1Exp(System.Int32,System.Object)">
             <summary>
             Provides the standard 1-input Object interface to the fit1Exp M-function.
             </summary>
             <remarks>
             M-Documentation:
             fits single exponent to data
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="yData">Input argument #1</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.fit1Exp(System.Int32,System.Object,System.Object)">
             <summary>
             Provides the standard 2-input Object interface to the fit1Exp M-function.
             </summary>
             <remarks>
             M-Documentation:
             fits single exponent to data
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="yData">Input argument #1</param>
             <param name="timePerPoint">Input argument #2</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.fit1Exp(System.Int32,System.Object,System.Object,System.Object)">
             <summary>
             Provides the standard 3-input Object interface to the fit1Exp M-function.
             </summary>
             <remarks>
             M-Documentation:
             fits single exponent to data
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="yData">Input argument #1</param>
             <param name="timePerPoint">Input argument #2</param>
             <param name="startingTime">Input argument #3</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.fit1Exp(System.Int32,System.Object,System.Object,System.Object,System.Object)">
             <summary>
             Provides the standard 4-input Object interface to the fit1Exp M-function.
             </summary>
             <remarks>
             M-Documentation:
             fits single exponent to data
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="yData">Input argument #1</param>
             <param name="timePerPoint">Input argument #2</param>
             <param name="startingTime">Input argument #3</param>
             <param name="axisHandle">Input argument #4</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.fit1Exp(System.Int32,System.Object[]@,System.Object[],System.Object[])">
             <summary>
             Provides an interface for the fit1Exp function in which the input and output
             arguments are specified as an array of Objects.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             M-Documentation:
             fits single exponent to data
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of Object output arguments</param>
             <param name= "argsIn">Array of Object input arguments</param>
             <param name= "varArgsIn">Array of Object representing variable input
             arguments</param>
            
        </member>
        <member name="M:mPhysNative.Class1.fit2Exp">
             <summary>
             Provides a single output, 0-input Objectinterface to the fit2Exp M-function.
             </summary>
             <remarks>
             M-Documentation:
             fits two exponents to data
             </remarks>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.fit2Exp(System.Object)">
             <summary>
             Provides a single output, 1-input Objectinterface to the fit2Exp M-function.
             </summary>
             <remarks>
             M-Documentation:
             fits two exponents to data
             </remarks>
             <param name="yData">Input argument #1</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.fit2Exp(System.Object,System.Object)">
             <summary>
             Provides a single output, 2-input Objectinterface to the fit2Exp M-function.
             </summary>
             <remarks>
             M-Documentation:
             fits two exponents to data
             </remarks>
             <param name="yData">Input argument #1</param>
             <param name="timePerPoint">Input argument #2</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.fit2Exp(System.Object,System.Object,System.Object)">
             <summary>
             Provides a single output, 3-input Objectinterface to the fit2Exp M-function.
             </summary>
             <remarks>
             M-Documentation:
             fits two exponents to data
             </remarks>
             <param name="yData">Input argument #1</param>
             <param name="timePerPoint">Input argument #2</param>
             <param name="startingTime">Input argument #3</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.fit2Exp(System.Object,System.Object,System.Object,System.Object)">
             <summary>
             Provides a single output, 4-input Objectinterface to the fit2Exp M-function.
             </summary>
             <remarks>
             M-Documentation:
             fits two exponents to data
             </remarks>
             <param name="yData">Input argument #1</param>
             <param name="timePerPoint">Input argument #2</param>
             <param name="startingTime">Input argument #3</param>
             <param name="axisHandle">Input argument #4</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.fit2Exp(System.Int32)">
             <summary>
             Provides the standard 0-input Object interface to the fit2Exp M-function.
             </summary>
             <remarks>
             M-Documentation:
             fits two exponents to data
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.fit2Exp(System.Int32,System.Object)">
             <summary>
             Provides the standard 1-input Object interface to the fit2Exp M-function.
             </summary>
             <remarks>
             M-Documentation:
             fits two exponents to data
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="yData">Input argument #1</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.fit2Exp(System.Int32,System.Object,System.Object)">
             <summary>
             Provides the standard 2-input Object interface to the fit2Exp M-function.
             </summary>
             <remarks>
             M-Documentation:
             fits two exponents to data
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="yData">Input argument #1</param>
             <param name="timePerPoint">Input argument #2</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.fit2Exp(System.Int32,System.Object,System.Object,System.Object)">
             <summary>
             Provides the standard 3-input Object interface to the fit2Exp M-function.
             </summary>
             <remarks>
             M-Documentation:
             fits two exponents to data
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="yData">Input argument #1</param>
             <param name="timePerPoint">Input argument #2</param>
             <param name="startingTime">Input argument #3</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.fit2Exp(System.Int32,System.Object,System.Object,System.Object,System.Object)">
             <summary>
             Provides the standard 4-input Object interface to the fit2Exp M-function.
             </summary>
             <remarks>
             M-Documentation:
             fits two exponents to data
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="yData">Input argument #1</param>
             <param name="timePerPoint">Input argument #2</param>
             <param name="startingTime">Input argument #3</param>
             <param name="axisHandle">Input argument #4</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.fit2Exp(System.Int32,System.Object[]@,System.Object[],System.Object[])">
             <summary>
             Provides an interface for the fit2Exp function in which the input and output
             arguments are specified as an array of Objects.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             M-Documentation:
             fits two exponents to data
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of Object output arguments</param>
             <param name= "argsIn">Array of Object input arguments</param>
             <param name= "varArgsIn">Array of Object representing variable input
             arguments</param>
            
        </member>
        <member name="M:mPhysNative.Class1.fit3Exp">
             <summary>
             Provides a single output, 0-input Objectinterface to the fit3Exp M-function.
             </summary>
             <remarks>
             M-Documentation:
             fits three exponents to data
             </remarks>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.fit3Exp(System.Object)">
             <summary>
             Provides a single output, 1-input Objectinterface to the fit3Exp M-function.
             </summary>
             <remarks>
             M-Documentation:
             fits three exponents to data
             </remarks>
             <param name="yData">Input argument #1</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.fit3Exp(System.Object,System.Object)">
             <summary>
             Provides a single output, 2-input Objectinterface to the fit3Exp M-function.
             </summary>
             <remarks>
             M-Documentation:
             fits three exponents to data
             </remarks>
             <param name="yData">Input argument #1</param>
             <param name="timePerPoint">Input argument #2</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.fit3Exp(System.Object,System.Object,System.Object)">
             <summary>
             Provides a single output, 3-input Objectinterface to the fit3Exp M-function.
             </summary>
             <remarks>
             M-Documentation:
             fits three exponents to data
             </remarks>
             <param name="yData">Input argument #1</param>
             <param name="timePerPoint">Input argument #2</param>
             <param name="startingTime">Input argument #3</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.fit3Exp(System.Object,System.Object,System.Object,System.Object)">
             <summary>
             Provides a single output, 4-input Objectinterface to the fit3Exp M-function.
             </summary>
             <remarks>
             M-Documentation:
             fits three exponents to data
             </remarks>
             <param name="yData">Input argument #1</param>
             <param name="timePerPoint">Input argument #2</param>
             <param name="startingTime">Input argument #3</param>
             <param name="axisHandle">Input argument #4</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.fit3Exp(System.Int32)">
             <summary>
             Provides the standard 0-input Object interface to the fit3Exp M-function.
             </summary>
             <remarks>
             M-Documentation:
             fits three exponents to data
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.fit3Exp(System.Int32,System.Object)">
             <summary>
             Provides the standard 1-input Object interface to the fit3Exp M-function.
             </summary>
             <remarks>
             M-Documentation:
             fits three exponents to data
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="yData">Input argument #1</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.fit3Exp(System.Int32,System.Object,System.Object)">
             <summary>
             Provides the standard 2-input Object interface to the fit3Exp M-function.
             </summary>
             <remarks>
             M-Documentation:
             fits three exponents to data
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="yData">Input argument #1</param>
             <param name="timePerPoint">Input argument #2</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.fit3Exp(System.Int32,System.Object,System.Object,System.Object)">
             <summary>
             Provides the standard 3-input Object interface to the fit3Exp M-function.
             </summary>
             <remarks>
             M-Documentation:
             fits three exponents to data
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="yData">Input argument #1</param>
             <param name="timePerPoint">Input argument #2</param>
             <param name="startingTime">Input argument #3</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.fit3Exp(System.Int32,System.Object,System.Object,System.Object,System.Object)">
             <summary>
             Provides the standard 4-input Object interface to the fit3Exp M-function.
             </summary>
             <remarks>
             M-Documentation:
             fits three exponents to data
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="yData">Input argument #1</param>
             <param name="timePerPoint">Input argument #2</param>
             <param name="startingTime">Input argument #3</param>
             <param name="axisHandle">Input argument #4</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.fit3Exp(System.Int32,System.Object[]@,System.Object[],System.Object[])">
             <summary>
             Provides an interface for the fit3Exp function in which the input and output
             arguments are specified as an array of Objects.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             M-Documentation:
             fits three exponents to data
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of Object output arguments</param>
             <param name= "argsIn">Array of Object input arguments</param>
             <param name= "varArgsIn">Array of Object representing variable input
             arguments</param>
            
        </member>
        <member name="M:mPhysNative.Class1.fitAlpha">
             <summary>
             Provides a single output, 0-input Objectinterface to the fitAlpha M-function.
             </summary>
             <remarks>
             M-Documentation:
             fits single alpha function to data
             </remarks>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.fitAlpha(System.Object)">
             <summary>
             Provides a single output, 1-input Objectinterface to the fitAlpha M-function.
             </summary>
             <remarks>
             M-Documentation:
             fits single alpha function to data
             </remarks>
             <param name="yData">Input argument #1</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.fitAlpha(System.Object,System.Object)">
             <summary>
             Provides a single output, 2-input Objectinterface to the fitAlpha M-function.
             </summary>
             <remarks>
             M-Documentation:
             fits single alpha function to data
             </remarks>
             <param name="yData">Input argument #1</param>
             <param name="timePerPoint">Input argument #2</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.fitAlpha(System.Object,System.Object,System.Object)">
             <summary>
             Provides a single output, 3-input Objectinterface to the fitAlpha M-function.
             </summary>
             <remarks>
             M-Documentation:
             fits single alpha function to data
             </remarks>
             <param name="yData">Input argument #1</param>
             <param name="timePerPoint">Input argument #2</param>
             <param name="startingTime">Input argument #3</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.fitAlpha(System.Object,System.Object,System.Object,System.Object)">
             <summary>
             Provides a single output, 4-input Objectinterface to the fitAlpha M-function.
             </summary>
             <remarks>
             M-Documentation:
             fits single alpha function to data
             </remarks>
             <param name="yData">Input argument #1</param>
             <param name="timePerPoint">Input argument #2</param>
             <param name="startingTime">Input argument #3</param>
             <param name="axisHandle">Input argument #4</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.fitAlpha(System.Int32)">
             <summary>
             Provides the standard 0-input Object interface to the fitAlpha M-function.
             </summary>
             <remarks>
             M-Documentation:
             fits single alpha function to data
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.fitAlpha(System.Int32,System.Object)">
             <summary>
             Provides the standard 1-input Object interface to the fitAlpha M-function.
             </summary>
             <remarks>
             M-Documentation:
             fits single alpha function to data
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="yData">Input argument #1</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.fitAlpha(System.Int32,System.Object,System.Object)">
             <summary>
             Provides the standard 2-input Object interface to the fitAlpha M-function.
             </summary>
             <remarks>
             M-Documentation:
             fits single alpha function to data
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="yData">Input argument #1</param>
             <param name="timePerPoint">Input argument #2</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.fitAlpha(System.Int32,System.Object,System.Object,System.Object)">
             <summary>
             Provides the standard 3-input Object interface to the fitAlpha M-function.
             </summary>
             <remarks>
             M-Documentation:
             fits single alpha function to data
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="yData">Input argument #1</param>
             <param name="timePerPoint">Input argument #2</param>
             <param name="startingTime">Input argument #3</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.fitAlpha(System.Int32,System.Object,System.Object,System.Object,System.Object)">
             <summary>
             Provides the standard 4-input Object interface to the fitAlpha M-function.
             </summary>
             <remarks>
             M-Documentation:
             fits single alpha function to data
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="yData">Input argument #1</param>
             <param name="timePerPoint">Input argument #2</param>
             <param name="startingTime">Input argument #3</param>
             <param name="axisHandle">Input argument #4</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.fitAlpha(System.Int32,System.Object[]@,System.Object[],System.Object[])">
             <summary>
             Provides an interface for the fitAlpha function in which the input and output
             arguments are specified as an array of Objects.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             M-Documentation:
             fits single alpha function to data
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of Object output arguments</param>
             <param name= "argsIn">Array of Object input arguments</param>
             <param name= "varArgsIn">Array of Object representing variable input
             arguments</param>
            
        </member>
        <member name="M:mPhysNative.Class1.fitBoltzmann">
             <summary>
             Provides a single output, 0-input Objectinterface to the fitBoltzmann M-function.
             </summary>
             <remarks>
             M-Documentation:
             fits single sine wave to data
             </remarks>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.fitBoltzmann(System.Object)">
             <summary>
             Provides a single output, 1-input Objectinterface to the fitBoltzmann M-function.
             </summary>
             <remarks>
             M-Documentation:
             fits single sine wave to data
             </remarks>
             <param name="yData">Input argument #1</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.fitBoltzmann(System.Object,System.Object)">
             <summary>
             Provides a single output, 2-input Objectinterface to the fitBoltzmann M-function.
             </summary>
             <remarks>
             M-Documentation:
             fits single sine wave to data
             </remarks>
             <param name="yData">Input argument #1</param>
             <param name="timePerPoint">Input argument #2</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.fitBoltzmann(System.Object,System.Object,System.Object)">
             <summary>
             Provides a single output, 3-input Objectinterface to the fitBoltzmann M-function.
             </summary>
             <remarks>
             M-Documentation:
             fits single sine wave to data
             </remarks>
             <param name="yData">Input argument #1</param>
             <param name="timePerPoint">Input argument #2</param>
             <param name="startingTime">Input argument #3</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.fitBoltzmann(System.Object,System.Object,System.Object,System.Object)">
             <summary>
             Provides a single output, 4-input Objectinterface to the fitBoltzmann M-function.
             </summary>
             <remarks>
             M-Documentation:
             fits single sine wave to data
             </remarks>
             <param name="yData">Input argument #1</param>
             <param name="timePerPoint">Input argument #2</param>
             <param name="startingTime">Input argument #3</param>
             <param name="axisHandle">Input argument #4</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.fitBoltzmann(System.Object,System.Object,System.Object,System.Object,System.Object)">
             <summary>
             Provides a single output, 5-input Objectinterface to the fitBoltzmann M-function.
             </summary>
             <remarks>
             M-Documentation:
             fits single sine wave to data
             </remarks>
             <param name="yData">Input argument #1</param>
             <param name="timePerPoint">Input argument #2</param>
             <param name="startingTime">Input argument #3</param>
             <param name="axisHandle">Input argument #4</param>
             <param name="traceName">Input argument #5</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.fitBoltzmann(System.Int32)">
             <summary>
             Provides the standard 0-input Object interface to the fitBoltzmann M-function.
             </summary>
             <remarks>
             M-Documentation:
             fits single sine wave to data
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.fitBoltzmann(System.Int32,System.Object)">
             <summary>
             Provides the standard 1-input Object interface to the fitBoltzmann M-function.
             </summary>
             <remarks>
             M-Documentation:
             fits single sine wave to data
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="yData">Input argument #1</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.fitBoltzmann(System.Int32,System.Object,System.Object)">
             <summary>
             Provides the standard 2-input Object interface to the fitBoltzmann M-function.
             </summary>
             <remarks>
             M-Documentation:
             fits single sine wave to data
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="yData">Input argument #1</param>
             <param name="timePerPoint">Input argument #2</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.fitBoltzmann(System.Int32,System.Object,System.Object,System.Object)">
             <summary>
             Provides the standard 3-input Object interface to the fitBoltzmann M-function.
             </summary>
             <remarks>
             M-Documentation:
             fits single sine wave to data
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="yData">Input argument #1</param>
             <param name="timePerPoint">Input argument #2</param>
             <param name="startingTime">Input argument #3</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.fitBoltzmann(System.Int32,System.Object,System.Object,System.Object,System.Object)">
             <summary>
             Provides the standard 4-input Object interface to the fitBoltzmann M-function.
             </summary>
             <remarks>
             M-Documentation:
             fits single sine wave to data
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="yData">Input argument #1</param>
             <param name="timePerPoint">Input argument #2</param>
             <param name="startingTime">Input argument #3</param>
             <param name="axisHandle">Input argument #4</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.fitBoltzmann(System.Int32,System.Object,System.Object,System.Object,System.Object,System.Object)">
             <summary>
             Provides the standard 5-input Object interface to the fitBoltzmann M-function.
             </summary>
             <remarks>
             M-Documentation:
             fits single sine wave to data
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="yData">Input argument #1</param>
             <param name="timePerPoint">Input argument #2</param>
             <param name="startingTime">Input argument #3</param>
             <param name="axisHandle">Input argument #4</param>
             <param name="traceName">Input argument #5</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.fitBoltzmann(System.Int32,System.Object[]@,System.Object[],System.Object[])">
             <summary>
             Provides an interface for the fitBoltzmann function in which the input and output
             arguments are specified as an array of Objects.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             M-Documentation:
             fits single sine wave to data
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of Object output arguments</param>
             <param name= "argsIn">Array of Object input arguments</param>
             <param name= "varArgsIn">Array of Object representing variable input
             arguments</param>
            
        </member>
        <member name="M:mPhysNative.Class1.fitBoltzmannBen">
             <summary>
             Provides a single output, 0-input Objectinterface to the fitBoltzmannBen
             M-function.
             </summary>
             <remarks>
             M-Documentation:
             fits single sine wave to data
             </remarks>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.fitBoltzmannBen(System.Object)">
             <summary>
             Provides a single output, 1-input Objectinterface to the fitBoltzmannBen
             M-function.
             </summary>
             <remarks>
             M-Documentation:
             fits single sine wave to data
             </remarks>
             <param name="yData">Input argument #1</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.fitBoltzmannBen(System.Object,System.Object)">
             <summary>
             Provides a single output, 2-input Objectinterface to the fitBoltzmannBen
             M-function.
             </summary>
             <remarks>
             M-Documentation:
             fits single sine wave to data
             </remarks>
             <param name="yData">Input argument #1</param>
             <param name="timePerPoint">Input argument #2</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.fitBoltzmannBen(System.Object,System.Object,System.Object)">
             <summary>
             Provides a single output, 3-input Objectinterface to the fitBoltzmannBen
             M-function.
             </summary>
             <remarks>
             M-Documentation:
             fits single sine wave to data
             </remarks>
             <param name="yData">Input argument #1</param>
             <param name="timePerPoint">Input argument #2</param>
             <param name="startingTime">Input argument #3</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.fitBoltzmannBen(System.Object,System.Object,System.Object,System.Object)">
             <summary>
             Provides a single output, 4-input Objectinterface to the fitBoltzmannBen
             M-function.
             </summary>
             <remarks>
             M-Documentation:
             fits single sine wave to data
             </remarks>
             <param name="yData">Input argument #1</param>
             <param name="timePerPoint">Input argument #2</param>
             <param name="startingTime">Input argument #3</param>
             <param name="axisHandle">Input argument #4</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.fitBoltzmannBen(System.Object,System.Object,System.Object,System.Object,System.Object)">
             <summary>
             Provides a single output, 5-input Objectinterface to the fitBoltzmannBen
             M-function.
             </summary>
             <remarks>
             M-Documentation:
             fits single sine wave to data
             </remarks>
             <param name="yData">Input argument #1</param>
             <param name="timePerPoint">Input argument #2</param>
             <param name="startingTime">Input argument #3</param>
             <param name="axisHandle">Input argument #4</param>
             <param name="traceName">Input argument #5</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.fitBoltzmannBen(System.Int32)">
             <summary>
             Provides the standard 0-input Object interface to the fitBoltzmannBen M-function.
             </summary>
             <remarks>
             M-Documentation:
             fits single sine wave to data
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.fitBoltzmannBen(System.Int32,System.Object)">
             <summary>
             Provides the standard 1-input Object interface to the fitBoltzmannBen M-function.
             </summary>
             <remarks>
             M-Documentation:
             fits single sine wave to data
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="yData">Input argument #1</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.fitBoltzmannBen(System.Int32,System.Object,System.Object)">
             <summary>
             Provides the standard 2-input Object interface to the fitBoltzmannBen M-function.
             </summary>
             <remarks>
             M-Documentation:
             fits single sine wave to data
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="yData">Input argument #1</param>
             <param name="timePerPoint">Input argument #2</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.fitBoltzmannBen(System.Int32,System.Object,System.Object,System.Object)">
             <summary>
             Provides the standard 3-input Object interface to the fitBoltzmannBen M-function.
             </summary>
             <remarks>
             M-Documentation:
             fits single sine wave to data
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="yData">Input argument #1</param>
             <param name="timePerPoint">Input argument #2</param>
             <param name="startingTime">Input argument #3</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.fitBoltzmannBen(System.Int32,System.Object,System.Object,System.Object,System.Object)">
             <summary>
             Provides the standard 4-input Object interface to the fitBoltzmannBen M-function.
             </summary>
             <remarks>
             M-Documentation:
             fits single sine wave to data
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="yData">Input argument #1</param>
             <param name="timePerPoint">Input argument #2</param>
             <param name="startingTime">Input argument #3</param>
             <param name="axisHandle">Input argument #4</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.fitBoltzmannBen(System.Int32,System.Object,System.Object,System.Object,System.Object,System.Object)">
             <summary>
             Provides the standard 5-input Object interface to the fitBoltzmannBen M-function.
             </summary>
             <remarks>
             M-Documentation:
             fits single sine wave to data
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="yData">Input argument #1</param>
             <param name="timePerPoint">Input argument #2</param>
             <param name="startingTime">Input argument #3</param>
             <param name="axisHandle">Input argument #4</param>
             <param name="traceName">Input argument #5</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.fitBoltzmannBen(System.Int32,System.Object[]@,System.Object[],System.Object[])">
             <summary>
             Provides an interface for the fitBoltzmannBen function in which the input and
             output
             arguments are specified as an array of Objects.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             M-Documentation:
             fits single sine wave to data
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of Object output arguments</param>
             <param name= "argsIn">Array of Object input arguments</param>
             <param name= "varArgsIn">Array of Object representing variable input
             arguments</param>
            
        </member>
        <member name="M:mPhysNative.Class1.fitDecayDouble">
             <summary>
             Provides a single output, 0-input Objectinterface to the fitDecayDouble
             M-function.
             </summary>
             <remarks>
             M-Documentation:
             fits taus to ydata that is slowing in x (only determined by the initial offset)
             [decayTau1 decayTau2 FittedCurve estimates] = fitDecayDouble(yData, PSPtype);
             </remarks>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.fitDecayDouble(System.Object)">
             <summary>
             Provides a single output, 1-input Objectinterface to the fitDecayDouble
             M-function.
             </summary>
             <remarks>
             M-Documentation:
             fits taus to ydata that is slowing in x (only determined by the initial offset)
             [decayTau1 decayTau2 FittedCurve estimates] = fitDecayDouble(yData, PSPtype);
             </remarks>
             <param name="yData">Input argument #1</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.fitDecayDouble(System.Object,System.Object)">
             <summary>
             Provides a single output, 2-input Objectinterface to the fitDecayDouble
             M-function.
             </summary>
             <remarks>
             M-Documentation:
             fits taus to ydata that is slowing in x (only determined by the initial offset)
             [decayTau1 decayTau2 FittedCurve estimates] = fitDecayDouble(yData, PSPtype);
             </remarks>
             <param name="yData">Input argument #1</param>
             <param name="PSPtype">Input argument #2</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.fitDecayDouble(System.Int32)">
             <summary>
             Provides the standard 0-input Object interface to the fitDecayDouble M-function.
             </summary>
             <remarks>
             M-Documentation:
             fits taus to ydata that is slowing in x (only determined by the initial offset)
             [decayTau1 decayTau2 FittedCurve estimates] = fitDecayDouble(yData, PSPtype);
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.fitDecayDouble(System.Int32,System.Object)">
             <summary>
             Provides the standard 1-input Object interface to the fitDecayDouble M-function.
             </summary>
             <remarks>
             M-Documentation:
             fits taus to ydata that is slowing in x (only determined by the initial offset)
             [decayTau1 decayTau2 FittedCurve estimates] = fitDecayDouble(yData, PSPtype);
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="yData">Input argument #1</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.fitDecayDouble(System.Int32,System.Object,System.Object)">
             <summary>
             Provides the standard 2-input Object interface to the fitDecayDouble M-function.
             </summary>
             <remarks>
             M-Documentation:
             fits taus to ydata that is slowing in x (only determined by the initial offset)
             [decayTau1 decayTau2 FittedCurve estimates] = fitDecayDouble(yData, PSPtype);
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="yData">Input argument #1</param>
             <param name="PSPtype">Input argument #2</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.fitDecayDouble(System.Int32,System.Object[]@,System.Object[],System.Object[])">
             <summary>
             Provides an interface for the fitDecayDouble function in which the input and
             output
             arguments are specified as an array of Objects.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             M-Documentation:
             fits taus to ydata that is slowing in x (only determined by the initial offset)
             [decayTau1 decayTau2 FittedCurve estimates] = fitDecayDouble(yData, PSPtype);
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of Object output arguments</param>
             <param name= "argsIn">Array of Object input arguments</param>
             <param name= "varArgsIn">Array of Object representing variable input
             arguments</param>
            
        </member>
        <member name="M:mPhysNative.Class1.fitDecaySingle">
             <summary>
             Provides a single output, 0-input Objectinterface to the fitDecaySingle
             M-function.
             </summary>
             <remarks>
             M-Documentation:
             fits tau to ydata that is slowing in x (only determined by the initial offset)
             [decayTau1 FittedCurve estimates] = fitDecaySingle(yData, PSPtype);
             </remarks>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.fitDecaySingle(System.Object)">
             <summary>
             Provides a single output, 1-input Objectinterface to the fitDecaySingle
             M-function.
             </summary>
             <remarks>
             M-Documentation:
             fits tau to ydata that is slowing in x (only determined by the initial offset)
             [decayTau1 FittedCurve estimates] = fitDecaySingle(yData, PSPtype);
             </remarks>
             <param name="yData">Input argument #1</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.fitDecaySingle(System.Object,System.Object)">
             <summary>
             Provides a single output, 2-input Objectinterface to the fitDecaySingle
             M-function.
             </summary>
             <remarks>
             M-Documentation:
             fits tau to ydata that is slowing in x (only determined by the initial offset)
             [decayTau1 FittedCurve estimates] = fitDecaySingle(yData, PSPtype);
             </remarks>
             <param name="yData">Input argument #1</param>
             <param name="PSPtype">Input argument #2</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.fitDecaySingle(System.Int32)">
             <summary>
             Provides the standard 0-input Object interface to the fitDecaySingle M-function.
             </summary>
             <remarks>
             M-Documentation:
             fits tau to ydata that is slowing in x (only determined by the initial offset)
             [decayTau1 FittedCurve estimates] = fitDecaySingle(yData, PSPtype);
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.fitDecaySingle(System.Int32,System.Object)">
             <summary>
             Provides the standard 1-input Object interface to the fitDecaySingle M-function.
             </summary>
             <remarks>
             M-Documentation:
             fits tau to ydata that is slowing in x (only determined by the initial offset)
             [decayTau1 FittedCurve estimates] = fitDecaySingle(yData, PSPtype);
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="yData">Input argument #1</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.fitDecaySingle(System.Int32,System.Object,System.Object)">
             <summary>
             Provides the standard 2-input Object interface to the fitDecaySingle M-function.
             </summary>
             <remarks>
             M-Documentation:
             fits tau to ydata that is slowing in x (only determined by the initial offset)
             [decayTau1 FittedCurve estimates] = fitDecaySingle(yData, PSPtype);
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="yData">Input argument #1</param>
             <param name="PSPtype">Input argument #2</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.fitDecaySingle(System.Int32,System.Object[]@,System.Object[],System.Object[])">
             <summary>
             Provides an interface for the fitDecaySingle function in which the input and
             output
             arguments are specified as an array of Objects.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             M-Documentation:
             fits tau to ydata that is slowing in x (only determined by the initial offset)
             [decayTau1 FittedCurve estimates] = fitDecaySingle(yData, PSPtype);
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of Object output arguments</param>
             <param name= "argsIn">Array of Object input arguments</param>
             <param name= "varArgsIn">Array of Object representing variable input
             arguments</param>
            
        </member>
        <member name="M:mPhysNative.Class1.fitDecayTriple">
             <summary>
             Provides a single output, 0-input Objectinterface to the fitDecayTriple
             M-function.
             </summary>
             <remarks>
             M-Documentation:
             fits taus to ydata that is slowing in x (only determined by the initial offset)
             [decayTau1 decayTau2 decayTau3 FittedCurve estimates] = fitDecayTriple(yData,
             PSPtype);
             </remarks>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.fitDecayTriple(System.Object)">
             <summary>
             Provides a single output, 1-input Objectinterface to the fitDecayTriple
             M-function.
             </summary>
             <remarks>
             M-Documentation:
             fits taus to ydata that is slowing in x (only determined by the initial offset)
             [decayTau1 decayTau2 decayTau3 FittedCurve estimates] = fitDecayTriple(yData,
             PSPtype);
             </remarks>
             <param name="yData">Input argument #1</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.fitDecayTriple(System.Object,System.Object)">
             <summary>
             Provides a single output, 2-input Objectinterface to the fitDecayTriple
             M-function.
             </summary>
             <remarks>
             M-Documentation:
             fits taus to ydata that is slowing in x (only determined by the initial offset)
             [decayTau1 decayTau2 decayTau3 FittedCurve estimates] = fitDecayTriple(yData,
             PSPtype);
             </remarks>
             <param name="yData">Input argument #1</param>
             <param name="PSPtype">Input argument #2</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.fitDecayTriple(System.Int32)">
             <summary>
             Provides the standard 0-input Object interface to the fitDecayTriple M-function.
             </summary>
             <remarks>
             M-Documentation:
             fits taus to ydata that is slowing in x (only determined by the initial offset)
             [decayTau1 decayTau2 decayTau3 FittedCurve estimates] = fitDecayTriple(yData,
             PSPtype);
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.fitDecayTriple(System.Int32,System.Object)">
             <summary>
             Provides the standard 1-input Object interface to the fitDecayTriple M-function.
             </summary>
             <remarks>
             M-Documentation:
             fits taus to ydata that is slowing in x (only determined by the initial offset)
             [decayTau1 decayTau2 decayTau3 FittedCurve estimates] = fitDecayTriple(yData,
             PSPtype);
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="yData">Input argument #1</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.fitDecayTriple(System.Int32,System.Object,System.Object)">
             <summary>
             Provides the standard 2-input Object interface to the fitDecayTriple M-function.
             </summary>
             <remarks>
             M-Documentation:
             fits taus to ydata that is slowing in x (only determined by the initial offset)
             [decayTau1 decayTau2 decayTau3 FittedCurve estimates] = fitDecayTriple(yData,
             PSPtype);
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="yData">Input argument #1</param>
             <param name="PSPtype">Input argument #2</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.fitDecayTriple(System.Int32,System.Object[]@,System.Object[],System.Object[])">
             <summary>
             Provides an interface for the fitDecayTriple function in which the input and
             output
             arguments are specified as an array of Objects.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             M-Documentation:
             fits taus to ydata that is slowing in x (only determined by the initial offset)
             [decayTau1 decayTau2 decayTau3 FittedCurve estimates] = fitDecayTriple(yData,
             PSPtype);
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of Object output arguments</param>
             <param name= "argsIn">Array of Object input arguments</param>
             <param name= "varArgsIn">Array of Object representing variable input
             arguments</param>
            
        </member>
        <member name="M:mPhysNative.Class1.fitLine">
             <summary>
             Provides a single output, 0-input Objectinterface to the fitLine M-function.
             </summary>
             <remarks>
             M-Documentation:
             fits line to data
             </remarks>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.fitLine(System.Object)">
             <summary>
             Provides a single output, 1-input Objectinterface to the fitLine M-function.
             </summary>
             <remarks>
             M-Documentation:
             fits line to data
             </remarks>
             <param name="yData">Input argument #1</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.fitLine(System.Object,System.Object)">
             <summary>
             Provides a single output, 2-input Objectinterface to the fitLine M-function.
             </summary>
             <remarks>
             M-Documentation:
             fits line to data
             </remarks>
             <param name="yData">Input argument #1</param>
             <param name="timePerPoint">Input argument #2</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.fitLine(System.Object,System.Object,System.Object)">
             <summary>
             Provides a single output, 3-input Objectinterface to the fitLine M-function.
             </summary>
             <remarks>
             M-Documentation:
             fits line to data
             </remarks>
             <param name="yData">Input argument #1</param>
             <param name="timePerPoint">Input argument #2</param>
             <param name="startingTime">Input argument #3</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.fitLine(System.Object,System.Object,System.Object,System.Object)">
             <summary>
             Provides a single output, 4-input Objectinterface to the fitLine M-function.
             </summary>
             <remarks>
             M-Documentation:
             fits line to data
             </remarks>
             <param name="yData">Input argument #1</param>
             <param name="timePerPoint">Input argument #2</param>
             <param name="startingTime">Input argument #3</param>
             <param name="axisHandle">Input argument #4</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.fitLine(System.Int32)">
             <summary>
             Provides the standard 0-input Object interface to the fitLine M-function.
             </summary>
             <remarks>
             M-Documentation:
             fits line to data
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.fitLine(System.Int32,System.Object)">
             <summary>
             Provides the standard 1-input Object interface to the fitLine M-function.
             </summary>
             <remarks>
             M-Documentation:
             fits line to data
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="yData">Input argument #1</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.fitLine(System.Int32,System.Object,System.Object)">
             <summary>
             Provides the standard 2-input Object interface to the fitLine M-function.
             </summary>
             <remarks>
             M-Documentation:
             fits line to data
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="yData">Input argument #1</param>
             <param name="timePerPoint">Input argument #2</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.fitLine(System.Int32,System.Object,System.Object,System.Object)">
             <summary>
             Provides the standard 3-input Object interface to the fitLine M-function.
             </summary>
             <remarks>
             M-Documentation:
             fits line to data
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="yData">Input argument #1</param>
             <param name="timePerPoint">Input argument #2</param>
             <param name="startingTime">Input argument #3</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.fitLine(System.Int32,System.Object,System.Object,System.Object,System.Object)">
             <summary>
             Provides the standard 4-input Object interface to the fitLine M-function.
             </summary>
             <remarks>
             M-Documentation:
             fits line to data
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="yData">Input argument #1</param>
             <param name="timePerPoint">Input argument #2</param>
             <param name="startingTime">Input argument #3</param>
             <param name="axisHandle">Input argument #4</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.fitLine(System.Int32,System.Object[]@,System.Object[],System.Object[])">
             <summary>
             Provides an interface for the fitLine function in which the input and output
             arguments are specified as an array of Objects.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             M-Documentation:
             fits line to data
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of Object output arguments</param>
             <param name= "argsIn">Array of Object input arguments</param>
             <param name= "varArgsIn">Array of Object representing variable input
             arguments</param>
            
        </member>
        <member name="M:mPhysNative.Class1.fitLineExtra">
             <summary>
             Provides a single output, 0-input Objectinterface to the fitLineExtra M-function.
             </summary>
             <remarks>
             M-Documentation:
             fits line to data
             </remarks>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.fitLineExtra(System.Object)">
             <summary>
             Provides a single output, 1-input Objectinterface to the fitLineExtra M-function.
             </summary>
             <remarks>
             M-Documentation:
             fits line to data
             </remarks>
             <param name="yData">Input argument #1</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.fitLineExtra(System.Object,System.Object)">
             <summary>
             Provides a single output, 2-input Objectinterface to the fitLineExtra M-function.
             </summary>
             <remarks>
             M-Documentation:
             fits line to data
             </remarks>
             <param name="yData">Input argument #1</param>
             <param name="timePerPoint">Input argument #2</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.fitLineExtra(System.Object,System.Object,System.Object)">
             <summary>
             Provides a single output, 3-input Objectinterface to the fitLineExtra M-function.
             </summary>
             <remarks>
             M-Documentation:
             fits line to data
             </remarks>
             <param name="yData">Input argument #1</param>
             <param name="timePerPoint">Input argument #2</param>
             <param name="startingTime">Input argument #3</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.fitLineExtra(System.Object,System.Object,System.Object,System.Object)">
             <summary>
             Provides a single output, 4-input Objectinterface to the fitLineExtra M-function.
             </summary>
             <remarks>
             M-Documentation:
             fits line to data
             </remarks>
             <param name="yData">Input argument #1</param>
             <param name="timePerPoint">Input argument #2</param>
             <param name="startingTime">Input argument #3</param>
             <param name="axisHandle">Input argument #4</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.fitLineExtra(System.Int32)">
             <summary>
             Provides the standard 0-input Object interface to the fitLineExtra M-function.
             </summary>
             <remarks>
             M-Documentation:
             fits line to data
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.fitLineExtra(System.Int32,System.Object)">
             <summary>
             Provides the standard 1-input Object interface to the fitLineExtra M-function.
             </summary>
             <remarks>
             M-Documentation:
             fits line to data
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="yData">Input argument #1</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.fitLineExtra(System.Int32,System.Object,System.Object)">
             <summary>
             Provides the standard 2-input Object interface to the fitLineExtra M-function.
             </summary>
             <remarks>
             M-Documentation:
             fits line to data
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="yData">Input argument #1</param>
             <param name="timePerPoint">Input argument #2</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.fitLineExtra(System.Int32,System.Object,System.Object,System.Object)">
             <summary>
             Provides the standard 3-input Object interface to the fitLineExtra M-function.
             </summary>
             <remarks>
             M-Documentation:
             fits line to data
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="yData">Input argument #1</param>
             <param name="timePerPoint">Input argument #2</param>
             <param name="startingTime">Input argument #3</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.fitLineExtra(System.Int32,System.Object,System.Object,System.Object,System.Object)">
             <summary>
             Provides the standard 4-input Object interface to the fitLineExtra M-function.
             </summary>
             <remarks>
             M-Documentation:
             fits line to data
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="yData">Input argument #1</param>
             <param name="timePerPoint">Input argument #2</param>
             <param name="startingTime">Input argument #3</param>
             <param name="axisHandle">Input argument #4</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.fitLineExtra(System.Int32,System.Object[]@,System.Object[],System.Object[])">
             <summary>
             Provides an interface for the fitLineExtra function in which the input and output
             arguments are specified as an array of Objects.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             M-Documentation:
             fits line to data
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of Object output arguments</param>
             <param name= "argsIn">Array of Object input arguments</param>
             <param name= "varArgsIn">Array of Object representing variable input
             arguments</param>
            
        </member>
        <member name="M:mPhysNative.Class1.fitSine">
             <summary>
             Provides a single output, 0-input Objectinterface to the fitSine M-function.
             </summary>
             <remarks>
             M-Documentation:
             fits single sine wave to data
             </remarks>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.fitSine(System.Object)">
             <summary>
             Provides a single output, 1-input Objectinterface to the fitSine M-function.
             </summary>
             <remarks>
             M-Documentation:
             fits single sine wave to data
             </remarks>
             <param name="yData">Input argument #1</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.fitSine(System.Object,System.Object)">
             <summary>
             Provides a single output, 2-input Objectinterface to the fitSine M-function.
             </summary>
             <remarks>
             M-Documentation:
             fits single sine wave to data
             </remarks>
             <param name="yData">Input argument #1</param>
             <param name="timePerPoint">Input argument #2</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.fitSine(System.Object,System.Object,System.Object)">
             <summary>
             Provides a single output, 3-input Objectinterface to the fitSine M-function.
             </summary>
             <remarks>
             M-Documentation:
             fits single sine wave to data
             </remarks>
             <param name="yData">Input argument #1</param>
             <param name="timePerPoint">Input argument #2</param>
             <param name="startingTime">Input argument #3</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.fitSine(System.Object,System.Object,System.Object,System.Object)">
             <summary>
             Provides a single output, 4-input Objectinterface to the fitSine M-function.
             </summary>
             <remarks>
             M-Documentation:
             fits single sine wave to data
             </remarks>
             <param name="yData">Input argument #1</param>
             <param name="timePerPoint">Input argument #2</param>
             <param name="startingTime">Input argument #3</param>
             <param name="axisHandle">Input argument #4</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.fitSine(System.Int32)">
             <summary>
             Provides the standard 0-input Object interface to the fitSine M-function.
             </summary>
             <remarks>
             M-Documentation:
             fits single sine wave to data
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.fitSine(System.Int32,System.Object)">
             <summary>
             Provides the standard 1-input Object interface to the fitSine M-function.
             </summary>
             <remarks>
             M-Documentation:
             fits single sine wave to data
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="yData">Input argument #1</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.fitSine(System.Int32,System.Object,System.Object)">
             <summary>
             Provides the standard 2-input Object interface to the fitSine M-function.
             </summary>
             <remarks>
             M-Documentation:
             fits single sine wave to data
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="yData">Input argument #1</param>
             <param name="timePerPoint">Input argument #2</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.fitSine(System.Int32,System.Object,System.Object,System.Object)">
             <summary>
             Provides the standard 3-input Object interface to the fitSine M-function.
             </summary>
             <remarks>
             M-Documentation:
             fits single sine wave to data
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="yData">Input argument #1</param>
             <param name="timePerPoint">Input argument #2</param>
             <param name="startingTime">Input argument #3</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.fitSine(System.Int32,System.Object,System.Object,System.Object,System.Object)">
             <summary>
             Provides the standard 4-input Object interface to the fitSine M-function.
             </summary>
             <remarks>
             M-Documentation:
             fits single sine wave to data
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="yData">Input argument #1</param>
             <param name="timePerPoint">Input argument #2</param>
             <param name="startingTime">Input argument #3</param>
             <param name="axisHandle">Input argument #4</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.fitSine(System.Int32,System.Object[]@,System.Object[],System.Object[])">
             <summary>
             Provides an interface for the fitSine function in which the input and output
             arguments are specified as an array of Objects.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             M-Documentation:
             fits single sine wave to data
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of Object output arguments</param>
             <param name= "argsIn">Array of Object input arguments</param>
             <param name= "varArgsIn">Array of Object representing variable input
             arguments</param>
            
        </member>
        <member name="M:mPhysNative.Class1.fourier">
             <summary>
             Provides a single output, 0-input Objectinterface to the fourier M-function.
             </summary>
             <remarks>
             </remarks>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.fourier(System.Object)">
             <summary>
             Provides a single output, 1-input Objectinterface to the fourier M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="yData">Input argument #1</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.fourier(System.Object,System.Object)">
             <summary>
             Provides a single output, 2-input Objectinterface to the fourier M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="yData">Input argument #1</param>
             <param name="fs">Input argument #2</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.fourier(System.Object,System.Object,System.Object)">
             <summary>
             Provides a single output, 3-input Objectinterface to the fourier M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="yData">Input argument #1</param>
             <param name="fs">Input argument #2</param>
             <param name="frequencies">Input argument #3</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.fourier(System.Int32)">
             <summary>
             Provides the standard 0-input Object interface to the fourier M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.fourier(System.Int32,System.Object)">
             <summary>
             Provides the standard 1-input Object interface to the fourier M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="yData">Input argument #1</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.fourier(System.Int32,System.Object,System.Object)">
             <summary>
             Provides the standard 2-input Object interface to the fourier M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="yData">Input argument #1</param>
             <param name="fs">Input argument #2</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.fourier(System.Int32,System.Object,System.Object,System.Object)">
             <summary>
             Provides the standard 3-input Object interface to the fourier M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="yData">Input argument #1</param>
             <param name="fs">Input argument #2</param>
             <param name="frequencies">Input argument #3</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.fourier(System.Int32,System.Object[]@,System.Object[],System.Object[])">
             <summary>
             Provides an interface for the fourier function in which the input and output
             arguments are specified as an array of Objects.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of Object output arguments</param>
             <param name= "argsIn">Array of Object input arguments</param>
             <param name= "varArgsIn">Array of Object representing variable input
             arguments</param>
            
        </member>
        <member name="M:mPhysNative.Class1.generateStim">
             <summary>
             Provides a single output, 0-input Objectinterface to the generateStim M-function.
             </summary>
             <remarks>
             M-Documentation:
             generates a stimulus vector that is numPoints by numChannels and starts
             with any enabled TTLs and then enabled amps.  Outputs are in pa/mV
             </remarks>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.generateStim(System.Object)">
             <summary>
             Provides a single output, 1-input Objectinterface to the generateStim M-function.
             </summary>
             <remarks>
             M-Documentation:
             generates a stimulus vector that is numPoints by numChannels and starts
             with any enabled TTLs and then enabled amps.  Outputs are in pa/mV
             </remarks>
             <param name="protocolData">Input argument #1</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.generateStim(System.Object,System.Object)">
             <summary>
             Provides a single output, 2-input Objectinterface to the generateStim M-function.
             </summary>
             <remarks>
             M-Documentation:
             generates a stimulus vector that is numPoints by numChannels and starts
             with any enabled TTLs and then enabled amps.  Outputs are in pa/mV
             </remarks>
             <param name="protocolData">Input argument #1</param>
             <param name="experimentData">Input argument #2</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.generateStim(System.Int32)">
             <summary>
             Provides the standard 0-input Object interface to the generateStim M-function.
             </summary>
             <remarks>
             M-Documentation:
             generates a stimulus vector that is numPoints by numChannels and starts
             with any enabled TTLs and then enabled amps.  Outputs are in pa/mV
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.generateStim(System.Int32,System.Object)">
             <summary>
             Provides the standard 1-input Object interface to the generateStim M-function.
             </summary>
             <remarks>
             M-Documentation:
             generates a stimulus vector that is numPoints by numChannels and starts
             with any enabled TTLs and then enabled amps.  Outputs are in pa/mV
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="protocolData">Input argument #1</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.generateStim(System.Int32,System.Object,System.Object)">
             <summary>
             Provides the standard 2-input Object interface to the generateStim M-function.
             </summary>
             <remarks>
             M-Documentation:
             generates a stimulus vector that is numPoints by numChannels and starts
             with any enabled TTLs and then enabled amps.  Outputs are in pa/mV
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="protocolData">Input argument #1</param>
             <param name="experimentData">Input argument #2</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.generateStim(System.Int32,System.Object[]@,System.Object[],System.Object[])">
             <summary>
             Provides an interface for the generateStim function in which the input and output
             arguments are specified as an array of Objects.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             M-Documentation:
             generates a stimulus vector that is numPoints by numChannels and starts
             with any enabled TTLs and then enabled amps.  Outputs are in pa/mV
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of Object output arguments</param>
             <param name= "argsIn">Array of Object input arguments</param>
             <param name= "varArgsIn">Array of Object representing variable input
             arguments</param>
            
        </member>
        <member name="M:mPhysNative.Class1.GetFromMatlab">
             <summary>
             Provides a single output, 0-input Objectinterface to the GetFromMatlab
             M-function.
             </summary>
             <remarks>
             </remarks>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.GetFromMatlab(System.Object)">
             <summary>
             Provides a single output, 1-input Objectinterface to the GetFromMatlab
             M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="oldVarName">Input argument #1</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.GetFromMatlab(System.Int32)">
             <summary>
             Provides the standard 0-input Object interface to the GetFromMatlab M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.GetFromMatlab(System.Int32,System.Object)">
             <summary>
             Provides the standard 1-input Object interface to the GetFromMatlab M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="oldVarName">Input argument #1</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.GetFromMatlab(System.Int32,System.Object[]@,System.Object[],System.Object[])">
             <summary>
             Provides an interface for the GetFromMatlab function in which the input and
             output
             arguments are specified as an array of Objects.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of Object output arguments</param>
             <param name= "argsIn">Array of Object input arguments</param>
             <param name= "varArgsIn">Array of Object representing variable input
             arguments</param>
            
        </member>
        <member name="M:mPhysNative.Class1.getScopeVersion">
             <summary>
             Provides a single output, 0-input Objectinterface to the getScopeVersion
             M-function.
             </summary>
             <remarks>
             </remarks>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.getScopeVersion(System.Int32)">
             <summary>
             Provides the standard 0-input Object interface to the getScopeVersion M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.getScopeVersion(System.Int32,System.Object[]@,System.Object[],System.Object[])">
             <summary>
             Provides an interface for the getScopeVersion function in which the input and
             output
             arguments are specified as an array of Objects.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of Object output arguments</param>
             <param name= "argsIn">Array of Object input arguments</param>
             <param name= "varArgsIn">Array of Object representing variable input
             arguments</param>
            
        </member>
        <member name="M:mPhysNative.Class1.getVoltTrace">
             <summary>
             Provides a single output, 0-input Objectinterface to the getVoltTrace M-function.
             </summary>
             <remarks>
             M-Documentation:
             [ApTimesinMs] = getVoltTrace(zData, TraceNumberFrom1toxx as optional);
             this routine gets the first voltage trace in the episode with no optional
             arguments
             </remarks>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.getVoltTrace(System.Object)">
             <summary>
             Provides a single output, 1-input Objectinterface to the getVoltTrace M-function.
             </summary>
             <remarks>
             M-Documentation:
             [ApTimesinMs] = getVoltTrace(zData, TraceNumberFrom1toxx as optional);
             this routine gets the first voltage trace in the episode with no optional
             arguments
             </remarks>
             <param name="zData">Input argument #1</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.getVoltTrace(System.Object,System.Object[])">
             <summary>
             Provides a single output, 2-input Objectinterface to the getVoltTrace M-function.
             </summary>
             <remarks>
             M-Documentation:
             [ApTimesinMs] = getVoltTrace(zData, TraceNumberFrom1toxx as optional);
             this routine gets the first voltage trace in the episode with no optional
             arguments
             </remarks>
             <param name="zData">Input argument #1</param>
             <param name="varargin">Array of Objects representing the input arguments 2
             through varargin.length+1</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.getVoltTrace(System.Int32)">
             <summary>
             Provides the standard 0-input Object interface to the getVoltTrace M-function.
             </summary>
             <remarks>
             M-Documentation:
             [ApTimesinMs] = getVoltTrace(zData, TraceNumberFrom1toxx as optional);
             this routine gets the first voltage trace in the episode with no optional
             arguments
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.getVoltTrace(System.Int32,System.Object)">
             <summary>
             Provides the standard 1-input Object interface to the getVoltTrace M-function.
             </summary>
             <remarks>
             M-Documentation:
             [ApTimesinMs] = getVoltTrace(zData, TraceNumberFrom1toxx as optional);
             this routine gets the first voltage trace in the episode with no optional
             arguments
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="zData">Input argument #1</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.getVoltTrace(System.Int32,System.Object,System.Object[])">
             <summary>
             Provides the standard 2-input Object interface to the getVoltTrace M-function.
             </summary>
             <remarks>
             M-Documentation:
             [ApTimesinMs] = getVoltTrace(zData, TraceNumberFrom1toxx as optional);
             this routine gets the first voltage trace in the episode with no optional
             arguments
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="zData">Input argument #1</param>
             <param name="varargin">Array of Objects representing the input arguments 2
             through varargin.length+1</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.getVoltTrace(System.Int32,System.Object[]@,System.Object[],System.Object[])">
             <summary>
             Provides an interface for the getVoltTrace function in which the input and output
             arguments are specified as an array of Objects.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             M-Documentation:
             [ApTimesinMs] = getVoltTrace(zData, TraceNumberFrom1toxx as optional);
             this routine gets the first voltage trace in the episode with no optional
             arguments
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of Object output arguments</param>
             <param name= "argsIn">Array of Object input arguments</param>
             <param name= "varArgsIn">Array of Object representing variable input
             arguments</param>
            
        </member>
        <member name="M:mPhysNative.Class1.highPass">
             <summary>
             Provides a single output, 0-input Objectinterface to the highPass M-function.
             </summary>
             <remarks>
             M-Documentation:
             high pass filter data
             filteredData = highPass(rawData, [passBandLowerLimit passBandUpperLimit],
             samplingFrequency)
             defaults:
             passBand = [150 300] Hz
             samplingFrequency = 5000 Hz
             </remarks>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.highPass(System.Object)">
             <summary>
             Provides a single output, 1-input Objectinterface to the highPass M-function.
             </summary>
             <remarks>
             M-Documentation:
             high pass filter data
             filteredData = highPass(rawData, [passBandLowerLimit passBandUpperLimit],
             samplingFrequency)
             defaults:
             passBand = [150 300] Hz
             samplingFrequency = 5000 Hz
             </remarks>
             <param name="inData">Input argument #1</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.highPass(System.Object,System.Object)">
             <summary>
             Provides a single output, 2-input Objectinterface to the highPass M-function.
             </summary>
             <remarks>
             M-Documentation:
             high pass filter data
             filteredData = highPass(rawData, [passBandLowerLimit passBandUpperLimit],
             samplingFrequency)
             defaults:
             passBand = [150 300] Hz
             samplingFrequency = 5000 Hz
             </remarks>
             <param name="inData">Input argument #1</param>
             <param name="passBand">Input argument #2</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.highPass(System.Object,System.Object,System.Object)">
             <summary>
             Provides a single output, 3-input Objectinterface to the highPass M-function.
             </summary>
             <remarks>
             M-Documentation:
             high pass filter data
             filteredData = highPass(rawData, [passBandLowerLimit passBandUpperLimit],
             samplingFrequency)
             defaults:
             passBand = [150 300] Hz
             samplingFrequency = 5000 Hz
             </remarks>
             <param name="inData">Input argument #1</param>
             <param name="passBand">Input argument #2</param>
             <param name="samplingFreq">Input argument #3</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.highPass(System.Int32)">
             <summary>
             Provides the standard 0-input Object interface to the highPass M-function.
             </summary>
             <remarks>
             M-Documentation:
             high pass filter data
             filteredData = highPass(rawData, [passBandLowerLimit passBandUpperLimit],
             samplingFrequency)
             defaults:
             passBand = [150 300] Hz
             samplingFrequency = 5000 Hz
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.highPass(System.Int32,System.Object)">
             <summary>
             Provides the standard 1-input Object interface to the highPass M-function.
             </summary>
             <remarks>
             M-Documentation:
             high pass filter data
             filteredData = highPass(rawData, [passBandLowerLimit passBandUpperLimit],
             samplingFrequency)
             defaults:
             passBand = [150 300] Hz
             samplingFrequency = 5000 Hz
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="inData">Input argument #1</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.highPass(System.Int32,System.Object,System.Object)">
             <summary>
             Provides the standard 2-input Object interface to the highPass M-function.
             </summary>
             <remarks>
             M-Documentation:
             high pass filter data
             filteredData = highPass(rawData, [passBandLowerLimit passBandUpperLimit],
             samplingFrequency)
             defaults:
             passBand = [150 300] Hz
             samplingFrequency = 5000 Hz
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="inData">Input argument #1</param>
             <param name="passBand">Input argument #2</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.highPass(System.Int32,System.Object,System.Object,System.Object)">
             <summary>
             Provides the standard 3-input Object interface to the highPass M-function.
             </summary>
             <remarks>
             M-Documentation:
             high pass filter data
             filteredData = highPass(rawData, [passBandLowerLimit passBandUpperLimit],
             samplingFrequency)
             defaults:
             passBand = [150 300] Hz
             samplingFrequency = 5000 Hz
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="inData">Input argument #1</param>
             <param name="passBand">Input argument #2</param>
             <param name="samplingFreq">Input argument #3</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.highPass(System.Int32,System.Object[]@,System.Object[],System.Object[])">
             <summary>
             Provides an interface for the highPass function in which the input and output
             arguments are specified as an array of Objects.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             M-Documentation:
             high pass filter data
             filteredData = highPass(rawData, [passBandLowerLimit passBandUpperLimit],
             samplingFrequency)
             defaults:
             passBand = [150 300] Hz
             samplingFrequency = 5000 Hz
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of Object output arguments</param>
             <param name= "argsIn">Array of Object input arguments</param>
             <param name= "varArgsIn">Array of Object representing variable input
             arguments</param>
            
        </member>
        <member name="M:mPhysNative.Class1.histfit">
             <summary>
             Provides a single output, 0-input Objectinterface to the histfit M-function.
             </summary>
             <remarks>
             M-Documentation:
             HISTFIT Histogram with superimposed fitted normal density.
             HISTFIT(DATA,NBINS) plots a histogram of the values in the vector DATA.
             using NBINS bars in the histogram. With one input argument, NBINS is set 
             to the square root of the number of elements in DATA. 
             H = HISTFIT(DATA,NBINS) returns a vector of handles to the plotted lines.
             H(1) is a handle to the histogram, H(2) is a handle to the density curve.
             </remarks>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.histfit(System.Object)">
             <summary>
             Provides a single output, 1-input Objectinterface to the histfit M-function.
             </summary>
             <remarks>
             M-Documentation:
             HISTFIT Histogram with superimposed fitted normal density.
             HISTFIT(DATA,NBINS) plots a histogram of the values in the vector DATA.
             using NBINS bars in the histogram. With one input argument, NBINS is set 
             to the square root of the number of elements in DATA. 
             H = HISTFIT(DATA,NBINS) returns a vector of handles to the plotted lines.
             H(1) is a handle to the histogram, H(2) is a handle to the density curve.
             </remarks>
             <param name="data">Input argument #1</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.histfit(System.Object,System.Object[])">
             <summary>
             Provides a single output, 2-input Objectinterface to the histfit M-function.
             </summary>
             <remarks>
             M-Documentation:
             HISTFIT Histogram with superimposed fitted normal density.
             HISTFIT(DATA,NBINS) plots a histogram of the values in the vector DATA.
             using NBINS bars in the histogram. With one input argument, NBINS is set 
             to the square root of the number of elements in DATA. 
             H = HISTFIT(DATA,NBINS) returns a vector of handles to the plotted lines.
             H(1) is a handle to the histogram, H(2) is a handle to the density curve.
             </remarks>
             <param name="data">Input argument #1</param>
             <param name="varargin">Array of Objects representing the input arguments 2
             through varargin.length+1</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.histfit(System.Int32)">
             <summary>
             Provides the standard 0-input Object interface to the histfit M-function.
             </summary>
             <remarks>
             M-Documentation:
             HISTFIT Histogram with superimposed fitted normal density.
             HISTFIT(DATA,NBINS) plots a histogram of the values in the vector DATA.
             using NBINS bars in the histogram. With one input argument, NBINS is set 
             to the square root of the number of elements in DATA. 
             H = HISTFIT(DATA,NBINS) returns a vector of handles to the plotted lines.
             H(1) is a handle to the histogram, H(2) is a handle to the density curve.
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.histfit(System.Int32,System.Object)">
             <summary>
             Provides the standard 1-input Object interface to the histfit M-function.
             </summary>
             <remarks>
             M-Documentation:
             HISTFIT Histogram with superimposed fitted normal density.
             HISTFIT(DATA,NBINS) plots a histogram of the values in the vector DATA.
             using NBINS bars in the histogram. With one input argument, NBINS is set 
             to the square root of the number of elements in DATA. 
             H = HISTFIT(DATA,NBINS) returns a vector of handles to the plotted lines.
             H(1) is a handle to the histogram, H(2) is a handle to the density curve.
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="data">Input argument #1</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.histfit(System.Int32,System.Object,System.Object[])">
             <summary>
             Provides the standard 2-input Object interface to the histfit M-function.
             </summary>
             <remarks>
             M-Documentation:
             HISTFIT Histogram with superimposed fitted normal density.
             HISTFIT(DATA,NBINS) plots a histogram of the values in the vector DATA.
             using NBINS bars in the histogram. With one input argument, NBINS is set 
             to the square root of the number of elements in DATA. 
             H = HISTFIT(DATA,NBINS) returns a vector of handles to the plotted lines.
             H(1) is a handle to the histogram, H(2) is a handle to the density curve.
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="data">Input argument #1</param>
             <param name="varargin">Array of Objects representing the input arguments 2
             through varargin.length+1</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.histfit(System.Int32,System.Object[]@,System.Object[],System.Object[])">
             <summary>
             Provides an interface for the histfit function in which the input and output
             arguments are specified as an array of Objects.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             M-Documentation:
             HISTFIT Histogram with superimposed fitted normal density.
             HISTFIT(DATA,NBINS) plots a histogram of the values in the vector DATA.
             using NBINS bars in the histogram. With one input argument, NBINS is set 
             to the square root of the number of elements in DATA. 
             H = HISTFIT(DATA,NBINS) returns a vector of handles to the plotted lines.
             H(1) is a handle to the histogram, H(2) is a handle to the density curve.
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of Object output arguments</param>
             <param name= "argsIn">Array of Object input arguments</param>
             <param name= "varArgsIn">Array of Object representing variable input
             arguments</param>
            
        </member>
        <member name="M:mPhysNative.Class1.intervalHist">
             <summary>
             Provides a single output, 0-input Objectinterface to the intervalHist M-function.
             </summary>
             <remarks>
             M-Documentation:
             show an interval histogram
             </remarks>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.intervalHist(System.Object[])">
             <summary>
             Provides a single output, 1-input Objectinterface to the intervalHist M-function.
             </summary>
             <remarks>
             M-Documentation:
             show an interval histogram
             </remarks>
             <param name="varargin">Array of Objects representing the input arguments 1
             through varargin.length</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.intervalHist(System.Int32)">
             <summary>
             Provides the standard 0-input Object interface to the intervalHist M-function.
             </summary>
             <remarks>
             M-Documentation:
             show an interval histogram
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.intervalHist(System.Int32,System.Object[])">
             <summary>
             Provides the standard 1-input Object interface to the intervalHist M-function.
             </summary>
             <remarks>
             M-Documentation:
             show an interval histogram
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="varargin">Array of Objects representing the input arguments 1
             through varargin.length</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.intervalHist(System.Int32,System.Object[]@,System.Object[],System.Object[])">
             <summary>
             Provides an interface for the intervalHist function in which the input and output
             arguments are specified as an array of Objects.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             M-Documentation:
             show an interval histogram
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of Object output arguments</param>
             <param name= "argsIn">Array of Object input arguments</param>
             <param name= "varArgsIn">Array of Object representing variable input
             arguments</param>
            
        </member>
        <member name="M:mPhysNative.Class1.isiCv">
             <summary>
             Provides a single output, 0-input Objectinterface to the isiCv M-function.
             </summary>
             <remarks>
             M-Documentation:
             calculates the coefficient of variation for the inter-spike interval
             standard deviation
             Coefficient_of_Variation =    ------------------
             mean
             </remarks>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.isiCv(System.Object)">
             <summary>
             Provides a single output, 1-input Objectinterface to the isiCv M-function.
             </summary>
             <remarks>
             M-Documentation:
             calculates the coefficient of variation for the inter-spike interval
             standard deviation
             Coefficient_of_Variation =    ------------------
             mean
             </remarks>
             <param name="inData">Input argument #1</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.isiCv(System.Int32)">
             <summary>
             Provides the standard 0-input Object interface to the isiCv M-function.
             </summary>
             <remarks>
             M-Documentation:
             calculates the coefficient of variation for the inter-spike interval
             standard deviation
             Coefficient_of_Variation =    ------------------
             mean
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.isiCv(System.Int32,System.Object)">
             <summary>
             Provides the standard 1-input Object interface to the isiCv M-function.
             </summary>
             <remarks>
             M-Documentation:
             calculates the coefficient of variation for the inter-spike interval
             standard deviation
             Coefficient_of_Variation =    ------------------
             mean
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="inData">Input argument #1</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.isiCv(System.Int32,System.Object[]@,System.Object[],System.Object[])">
             <summary>
             Provides an interface for the isiCv function in which the input and output
             arguments are specified as an array of Objects.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             M-Documentation:
             calculates the coefficient of variation for the inter-spike interval
             standard deviation
             Coefficient_of_Variation =    ------------------
             mean
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of Object output arguments</param>
             <param name= "argsIn">Array of Object input arguments</param>
             <param name= "varArgsIn">Array of Object representing variable input
             arguments</param>
            
        </member>
        <member name="M:mPhysNative.Class1.isiCvEvents">
             <summary>
             Provides a single output, 0-input Objectinterface to the isiCvEvents M-function.
             </summary>
             <remarks>
             </remarks>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.isiCvEvents(System.Object[])">
             <summary>
             Provides a single output, 1-input Objectinterface to the isiCvEvents M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="varargin">Array of Objects representing the input arguments 1
             through varargin.length</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.isiCvEvents(System.Int32)">
             <summary>
             Provides the standard 0-input Object interface to the isiCvEvents M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.isiCvEvents(System.Int32,System.Object[])">
             <summary>
             Provides the standard 1-input Object interface to the isiCvEvents M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="varargin">Array of Objects representing the input arguments 1
             through varargin.length</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.isiCvEvents(System.Int32,System.Object[]@,System.Object[],System.Object[])">
             <summary>
             Provides an interface for the isiCvEvents function in which the input and output
             arguments are specified as an array of Objects.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of Object output arguments</param>
             <param name= "argsIn">Array of Object input arguments</param>
             <param name= "varArgsIn">Array of Object representing variable input
             arguments</param>
            
        </member>
        <member name="M:mPhysNative.Class1.jointDist">
             <summary>
             Provides a single output, 0-input Objectinterface to the jointDist M-function.
             </summary>
             <remarks>
             M-Documentation:
             show a joint distribution
             </remarks>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.jointDist(System.Object[])">
             <summary>
             Provides a single output, 1-input Objectinterface to the jointDist M-function.
             </summary>
             <remarks>
             M-Documentation:
             show a joint distribution
             </remarks>
             <param name="varargin">Array of Objects representing the input arguments 1
             through varargin.length</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.jointDist(System.Int32)">
             <summary>
             Provides the standard 0-input Object interface to the jointDist M-function.
             </summary>
             <remarks>
             M-Documentation:
             show a joint distribution
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.jointDist(System.Int32,System.Object[])">
             <summary>
             Provides the standard 1-input Object interface to the jointDist M-function.
             </summary>
             <remarks>
             M-Documentation:
             show a joint distribution
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="varargin">Array of Objects representing the input arguments 1
             through varargin.length</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.jointDist(System.Int32,System.Object[]@,System.Object[],System.Object[])">
             <summary>
             Provides an interface for the jointDist function in which the input and output
             arguments are specified as an array of Objects.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             M-Documentation:
             show a joint distribution
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of Object output arguments</param>
             <param name= "argsIn">Array of Object input arguments</param>
             <param name= "varArgsIn">Array of Object representing variable input
             arguments</param>
            
        </member>
        <member name="M:mPhysNative.Class1.LorenPowerSpectrum">
             <summary>
             Provides a single output, 0-input Objectinterface to the LorenPowerSpectrum
             M-function.
             </summary>
             <remarks>
             M-Documentation:
             nfft=2^nextpow2(length(Data));
             </remarks>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.LorenPowerSpectrum(System.Object)">
             <summary>
             Provides a single output, 1-input Objectinterface to the LorenPowerSpectrum
             M-function.
             </summary>
             <remarks>
             M-Documentation:
             nfft=2^nextpow2(length(Data));
             </remarks>
             <param name="inData">Input argument #1</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.LorenPowerSpectrum(System.Object,System.Object)">
             <summary>
             Provides a single output, 2-input Objectinterface to the LorenPowerSpectrum
             M-function.
             </summary>
             <remarks>
             M-Documentation:
             nfft=2^nextpow2(length(Data));
             </remarks>
             <param name="inData">Input argument #1</param>
             <param name="SamplingFreq">Input argument #2</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.LorenPowerSpectrum(System.Object,System.Object,System.Object)">
             <summary>
             Provides a single output, 3-input Objectinterface to the LorenPowerSpectrum
             M-function.
             </summary>
             <remarks>
             M-Documentation:
             nfft=2^nextpow2(length(Data));
             </remarks>
             <param name="inData">Input argument #1</param>
             <param name="SamplingFreq">Input argument #2</param>
             <param name="fftPower">Input argument #3</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.LorenPowerSpectrum(System.Object,System.Object,System.Object,System.Object)">
             <summary>
             Provides a single output, 4-input Objectinterface to the LorenPowerSpectrum
             M-function.
             </summary>
             <remarks>
             M-Documentation:
             nfft=2^nextpow2(length(Data));
             </remarks>
             <param name="inData">Input argument #1</param>
             <param name="SamplingFreq">Input argument #2</param>
             <param name="fftPower">Input argument #3</param>
             <param name="windowLength">Input argument #4</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.LorenPowerSpectrum(System.Int32)">
             <summary>
             Provides the standard 0-input Object interface to the LorenPowerSpectrum
             M-function.
             </summary>
             <remarks>
             M-Documentation:
             nfft=2^nextpow2(length(Data));
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.LorenPowerSpectrum(System.Int32,System.Object)">
             <summary>
             Provides the standard 1-input Object interface to the LorenPowerSpectrum
             M-function.
             </summary>
             <remarks>
             M-Documentation:
             nfft=2^nextpow2(length(Data));
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="inData">Input argument #1</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.LorenPowerSpectrum(System.Int32,System.Object,System.Object)">
             <summary>
             Provides the standard 2-input Object interface to the LorenPowerSpectrum
             M-function.
             </summary>
             <remarks>
             M-Documentation:
             nfft=2^nextpow2(length(Data));
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="inData">Input argument #1</param>
             <param name="SamplingFreq">Input argument #2</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.LorenPowerSpectrum(System.Int32,System.Object,System.Object,System.Object)">
             <summary>
             Provides the standard 3-input Object interface to the LorenPowerSpectrum
             M-function.
             </summary>
             <remarks>
             M-Documentation:
             nfft=2^nextpow2(length(Data));
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="inData">Input argument #1</param>
             <param name="SamplingFreq">Input argument #2</param>
             <param name="fftPower">Input argument #3</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.LorenPowerSpectrum(System.Int32,System.Object,System.Object,System.Object,System.Object)">
             <summary>
             Provides the standard 4-input Object interface to the LorenPowerSpectrum
             M-function.
             </summary>
             <remarks>
             M-Documentation:
             nfft=2^nextpow2(length(Data));
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="inData">Input argument #1</param>
             <param name="SamplingFreq">Input argument #2</param>
             <param name="fftPower">Input argument #3</param>
             <param name="windowLength">Input argument #4</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.LorenPowerSpectrum(System.Int32,System.Object[]@,System.Object[],System.Object[])">
             <summary>
             Provides an interface for the LorenPowerSpectrum function in which the input and
             output
             arguments are specified as an array of Objects.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             M-Documentation:
             nfft=2^nextpow2(length(Data));
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of Object output arguments</param>
             <param name= "argsIn">Array of Object input arguments</param>
             <param name= "varArgsIn">Array of Object representing variable input
             arguments</param>
            
        </member>
        <member name="M:mPhysNative.Class1.lowPass">
             <summary>
             Provides a single output, 0-input Objectinterface to the lowPass M-function.
             </summary>
             <remarks>
             M-Documentation:
             low pass filter data
             filteredData = lowPass(rawData, [passBandLowerLimit passBandUpperLimit],
             samplingFrequency)
             defaults:
             passBand = [0.0001 150] Hz
             samplingFrequency = 5000 Hz
             </remarks>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.lowPass(System.Object)">
             <summary>
             Provides a single output, 1-input Objectinterface to the lowPass M-function.
             </summary>
             <remarks>
             M-Documentation:
             low pass filter data
             filteredData = lowPass(rawData, [passBandLowerLimit passBandUpperLimit],
             samplingFrequency)
             defaults:
             passBand = [0.0001 150] Hz
             samplingFrequency = 5000 Hz
             </remarks>
             <param name="inData">Input argument #1</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.lowPass(System.Object,System.Object)">
             <summary>
             Provides a single output, 2-input Objectinterface to the lowPass M-function.
             </summary>
             <remarks>
             M-Documentation:
             low pass filter data
             filteredData = lowPass(rawData, [passBandLowerLimit passBandUpperLimit],
             samplingFrequency)
             defaults:
             passBand = [0.0001 150] Hz
             samplingFrequency = 5000 Hz
             </remarks>
             <param name="inData">Input argument #1</param>
             <param name="passBand">Input argument #2</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.lowPass(System.Object,System.Object,System.Object)">
             <summary>
             Provides a single output, 3-input Objectinterface to the lowPass M-function.
             </summary>
             <remarks>
             M-Documentation:
             low pass filter data
             filteredData = lowPass(rawData, [passBandLowerLimit passBandUpperLimit],
             samplingFrequency)
             defaults:
             passBand = [0.0001 150] Hz
             samplingFrequency = 5000 Hz
             </remarks>
             <param name="inData">Input argument #1</param>
             <param name="passBand">Input argument #2</param>
             <param name="samplingFreq">Input argument #3</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.lowPass(System.Int32)">
             <summary>
             Provides the standard 0-input Object interface to the lowPass M-function.
             </summary>
             <remarks>
             M-Documentation:
             low pass filter data
             filteredData = lowPass(rawData, [passBandLowerLimit passBandUpperLimit],
             samplingFrequency)
             defaults:
             passBand = [0.0001 150] Hz
             samplingFrequency = 5000 Hz
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.lowPass(System.Int32,System.Object)">
             <summary>
             Provides the standard 1-input Object interface to the lowPass M-function.
             </summary>
             <remarks>
             M-Documentation:
             low pass filter data
             filteredData = lowPass(rawData, [passBandLowerLimit passBandUpperLimit],
             samplingFrequency)
             defaults:
             passBand = [0.0001 150] Hz
             samplingFrequency = 5000 Hz
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="inData">Input argument #1</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.lowPass(System.Int32,System.Object,System.Object)">
             <summary>
             Provides the standard 2-input Object interface to the lowPass M-function.
             </summary>
             <remarks>
             M-Documentation:
             low pass filter data
             filteredData = lowPass(rawData, [passBandLowerLimit passBandUpperLimit],
             samplingFrequency)
             defaults:
             passBand = [0.0001 150] Hz
             samplingFrequency = 5000 Hz
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="inData">Input argument #1</param>
             <param name="passBand">Input argument #2</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.lowPass(System.Int32,System.Object,System.Object,System.Object)">
             <summary>
             Provides the standard 3-input Object interface to the lowPass M-function.
             </summary>
             <remarks>
             M-Documentation:
             low pass filter data
             filteredData = lowPass(rawData, [passBandLowerLimit passBandUpperLimit],
             samplingFrequency)
             defaults:
             passBand = [0.0001 150] Hz
             samplingFrequency = 5000 Hz
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="inData">Input argument #1</param>
             <param name="passBand">Input argument #2</param>
             <param name="samplingFreq">Input argument #3</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.lowPass(System.Int32,System.Object[]@,System.Object[],System.Object[])">
             <summary>
             Provides an interface for the lowPass function in which the input and output
             arguments are specified as an array of Objects.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             M-Documentation:
             low pass filter data
             filteredData = lowPass(rawData, [passBandLowerLimit passBandUpperLimit],
             samplingFrequency)
             defaults:
             passBand = [0.0001 150] Hz
             samplingFrequency = 5000 Hz
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of Object output arguments</param>
             <param name= "argsIn">Array of Object input arguments</param>
             <param name= "varArgsIn">Array of Object representing variable input
             arguments</param>
            
        </member>
        <member name="M:mPhysNative.Class1.makeBesselFilter">
             <summary>
             Provides a single output, 0-input Objectinterface to the makeBesselFilter
             M-function.
             </summary>
             <remarks>
             </remarks>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.makeBesselFilter(System.Object)">
             <summary>
             Provides a single output, 1-input Objectinterface to the makeBesselFilter
             M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="samplingFreq">Input argument #1</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.makeBesselFilter(System.Object,System.Object)">
             <summary>
             Provides a single output, 2-input Objectinterface to the makeBesselFilter
             M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="samplingFreq">Input argument #1</param>
             <param name="order">Input argument #2</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.makeBesselFilter(System.Object,System.Object,System.Object)">
             <summary>
             Provides a single output, 3-input Objectinterface to the makeBesselFilter
             M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="samplingFreq">Input argument #1</param>
             <param name="order">Input argument #2</param>
             <param name="cutOffFreq">Input argument #3</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.makeBesselFilter(System.Int32)">
             <summary>
             Provides the standard 0-input Object interface to the makeBesselFilter
             M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.makeBesselFilter(System.Int32,System.Object)">
             <summary>
             Provides the standard 1-input Object interface to the makeBesselFilter
             M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="samplingFreq">Input argument #1</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.makeBesselFilter(System.Int32,System.Object,System.Object)">
             <summary>
             Provides the standard 2-input Object interface to the makeBesselFilter
             M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="samplingFreq">Input argument #1</param>
             <param name="order">Input argument #2</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.makeBesselFilter(System.Int32,System.Object,System.Object,System.Object)">
             <summary>
             Provides the standard 3-input Object interface to the makeBesselFilter
             M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="samplingFreq">Input argument #1</param>
             <param name="order">Input argument #2</param>
             <param name="cutOffFreq">Input argument #3</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.makeBesselFilter(System.Int32,System.Object[]@,System.Object[],System.Object[])">
             <summary>
             Provides an interface for the makeBesselFilter function in which the input and
             output
             arguments are specified as an array of Objects.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of Object output arguments</param>
             <param name= "argsIn">Array of Object input arguments</param>
             <param name= "varArgsIn">Array of Object representing variable input
             arguments</param>
            
        </member>
        <member name="M:mPhysNative.Class1.makeButterFilter">
             <summary>
             Provides a single output, 0-input Objectinterface to the makeButterFilter
             M-function.
             </summary>
             <remarks>
             </remarks>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.makeButterFilter(System.Object)">
             <summary>
             Provides a single output, 1-input Objectinterface to the makeButterFilter
             M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="samplingFreq">Input argument #1</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.makeButterFilter(System.Object,System.Object)">
             <summary>
             Provides a single output, 2-input Objectinterface to the makeButterFilter
             M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="samplingFreq">Input argument #1</param>
             <param name="order">Input argument #2</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.makeButterFilter(System.Object,System.Object,System.Object)">
             <summary>
             Provides a single output, 3-input Objectinterface to the makeButterFilter
             M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="samplingFreq">Input argument #1</param>
             <param name="order">Input argument #2</param>
             <param name="cutOffFreq">Input argument #3</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.makeButterFilter(System.Object,System.Object,System.Object,System.Object)">
             <summary>
             Provides a single output, 4-input Objectinterface to the makeButterFilter
             M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="samplingFreq">Input argument #1</param>
             <param name="order">Input argument #2</param>
             <param name="cutOffFreq">Input argument #3</param>
             <param name="typeCode">Input argument #4</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.makeButterFilter(System.Int32)">
             <summary>
             Provides the standard 0-input Object interface to the makeButterFilter
             M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.makeButterFilter(System.Int32,System.Object)">
             <summary>
             Provides the standard 1-input Object interface to the makeButterFilter
             M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="samplingFreq">Input argument #1</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.makeButterFilter(System.Int32,System.Object,System.Object)">
             <summary>
             Provides the standard 2-input Object interface to the makeButterFilter
             M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="samplingFreq">Input argument #1</param>
             <param name="order">Input argument #2</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.makeButterFilter(System.Int32,System.Object,System.Object,System.Object)">
             <summary>
             Provides the standard 3-input Object interface to the makeButterFilter
             M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="samplingFreq">Input argument #1</param>
             <param name="order">Input argument #2</param>
             <param name="cutOffFreq">Input argument #3</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.makeButterFilter(System.Int32,System.Object,System.Object,System.Object,System.Object)">
             <summary>
             Provides the standard 4-input Object interface to the makeButterFilter
             M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="samplingFreq">Input argument #1</param>
             <param name="order">Input argument #2</param>
             <param name="cutOffFreq">Input argument #3</param>
             <param name="typeCode">Input argument #4</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.makeButterFilter(System.Int32,System.Object[]@,System.Object[],System.Object[])">
             <summary>
             Provides an interface for the makeButterFilter function in which the input and
             output
             arguments are specified as an array of Objects.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of Object output arguments</param>
             <param name= "argsIn">Array of Object input arguments</param>
             <param name= "varArgsIn">Array of Object representing variable input
             arguments</param>
            
        </member>
        <member name="M:mPhysNative.Class1.makeCheby1Filter">
             <summary>
             Provides a single output, 0-input Objectinterface to the makeCheby1Filter
             M-function.
             </summary>
             <remarks>
             </remarks>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.makeCheby1Filter(System.Object)">
             <summary>
             Provides a single output, 1-input Objectinterface to the makeCheby1Filter
             M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="samplingFreq">Input argument #1</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.makeCheby1Filter(System.Object,System.Object)">
             <summary>
             Provides a single output, 2-input Objectinterface to the makeCheby1Filter
             M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="samplingFreq">Input argument #1</param>
             <param name="order">Input argument #2</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.makeCheby1Filter(System.Object,System.Object,System.Object)">
             <summary>
             Provides a single output, 3-input Objectinterface to the makeCheby1Filter
             M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="samplingFreq">Input argument #1</param>
             <param name="order">Input argument #2</param>
             <param name="PassBandRipple">Input argument #3</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.makeCheby1Filter(System.Object,System.Object,System.Object,System.Object)">
             <summary>
             Provides a single output, 4-input Objectinterface to the makeCheby1Filter
             M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="samplingFreq">Input argument #1</param>
             <param name="order">Input argument #2</param>
             <param name="PassBandRipple">Input argument #3</param>
             <param name="cutOffFreq">Input argument #4</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.makeCheby1Filter(System.Object,System.Object,System.Object,System.Object,System.Object)">
             <summary>
             Provides a single output, 5-input Objectinterface to the makeCheby1Filter
             M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="samplingFreq">Input argument #1</param>
             <param name="order">Input argument #2</param>
             <param name="PassBandRipple">Input argument #3</param>
             <param name="cutOffFreq">Input argument #4</param>
             <param name="typeCode">Input argument #5</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.makeCheby1Filter(System.Int32)">
             <summary>
             Provides the standard 0-input Object interface to the makeCheby1Filter
             M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.makeCheby1Filter(System.Int32,System.Object)">
             <summary>
             Provides the standard 1-input Object interface to the makeCheby1Filter
             M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="samplingFreq">Input argument #1</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.makeCheby1Filter(System.Int32,System.Object,System.Object)">
             <summary>
             Provides the standard 2-input Object interface to the makeCheby1Filter
             M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="samplingFreq">Input argument #1</param>
             <param name="order">Input argument #2</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.makeCheby1Filter(System.Int32,System.Object,System.Object,System.Object)">
             <summary>
             Provides the standard 3-input Object interface to the makeCheby1Filter
             M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="samplingFreq">Input argument #1</param>
             <param name="order">Input argument #2</param>
             <param name="PassBandRipple">Input argument #3</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.makeCheby1Filter(System.Int32,System.Object,System.Object,System.Object,System.Object)">
             <summary>
             Provides the standard 4-input Object interface to the makeCheby1Filter
             M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="samplingFreq">Input argument #1</param>
             <param name="order">Input argument #2</param>
             <param name="PassBandRipple">Input argument #3</param>
             <param name="cutOffFreq">Input argument #4</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.makeCheby1Filter(System.Int32,System.Object,System.Object,System.Object,System.Object,System.Object)">
             <summary>
             Provides the standard 5-input Object interface to the makeCheby1Filter
             M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="samplingFreq">Input argument #1</param>
             <param name="order">Input argument #2</param>
             <param name="PassBandRipple">Input argument #3</param>
             <param name="cutOffFreq">Input argument #4</param>
             <param name="typeCode">Input argument #5</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.makeCheby1Filter(System.Int32,System.Object[]@,System.Object[],System.Object[])">
             <summary>
             Provides an interface for the makeCheby1Filter function in which the input and
             output
             arguments are specified as an array of Objects.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of Object output arguments</param>
             <param name= "argsIn">Array of Object input arguments</param>
             <param name= "varArgsIn">Array of Object representing variable input
             arguments</param>
            
        </member>
        <member name="M:mPhysNative.Class1.makeCheby2Filter">
             <summary>
             Provides a single output, 0-input Objectinterface to the makeCheby2Filter
             M-function.
             </summary>
             <remarks>
             </remarks>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.makeCheby2Filter(System.Object)">
             <summary>
             Provides a single output, 1-input Objectinterface to the makeCheby2Filter
             M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="samplingFreq">Input argument #1</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.makeCheby2Filter(System.Object,System.Object)">
             <summary>
             Provides a single output, 2-input Objectinterface to the makeCheby2Filter
             M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="samplingFreq">Input argument #1</param>
             <param name="order">Input argument #2</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.makeCheby2Filter(System.Object,System.Object,System.Object)">
             <summary>
             Provides a single output, 3-input Objectinterface to the makeCheby2Filter
             M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="samplingFreq">Input argument #1</param>
             <param name="order">Input argument #2</param>
             <param name="PassBandRipple">Input argument #3</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.makeCheby2Filter(System.Object,System.Object,System.Object,System.Object)">
             <summary>
             Provides a single output, 4-input Objectinterface to the makeCheby2Filter
             M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="samplingFreq">Input argument #1</param>
             <param name="order">Input argument #2</param>
             <param name="PassBandRipple">Input argument #3</param>
             <param name="cutOffFreq">Input argument #4</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.makeCheby2Filter(System.Object,System.Object,System.Object,System.Object,System.Object)">
             <summary>
             Provides a single output, 5-input Objectinterface to the makeCheby2Filter
             M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="samplingFreq">Input argument #1</param>
             <param name="order">Input argument #2</param>
             <param name="PassBandRipple">Input argument #3</param>
             <param name="cutOffFreq">Input argument #4</param>
             <param name="typeCode">Input argument #5</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.makeCheby2Filter(System.Int32)">
             <summary>
             Provides the standard 0-input Object interface to the makeCheby2Filter
             M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.makeCheby2Filter(System.Int32,System.Object)">
             <summary>
             Provides the standard 1-input Object interface to the makeCheby2Filter
             M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="samplingFreq">Input argument #1</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.makeCheby2Filter(System.Int32,System.Object,System.Object)">
             <summary>
             Provides the standard 2-input Object interface to the makeCheby2Filter
             M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="samplingFreq">Input argument #1</param>
             <param name="order">Input argument #2</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.makeCheby2Filter(System.Int32,System.Object,System.Object,System.Object)">
             <summary>
             Provides the standard 3-input Object interface to the makeCheby2Filter
             M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="samplingFreq">Input argument #1</param>
             <param name="order">Input argument #2</param>
             <param name="PassBandRipple">Input argument #3</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.makeCheby2Filter(System.Int32,System.Object,System.Object,System.Object,System.Object)">
             <summary>
             Provides the standard 4-input Object interface to the makeCheby2Filter
             M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="samplingFreq">Input argument #1</param>
             <param name="order">Input argument #2</param>
             <param name="PassBandRipple">Input argument #3</param>
             <param name="cutOffFreq">Input argument #4</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.makeCheby2Filter(System.Int32,System.Object,System.Object,System.Object,System.Object,System.Object)">
             <summary>
             Provides the standard 5-input Object interface to the makeCheby2Filter
             M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="samplingFreq">Input argument #1</param>
             <param name="order">Input argument #2</param>
             <param name="PassBandRipple">Input argument #3</param>
             <param name="cutOffFreq">Input argument #4</param>
             <param name="typeCode">Input argument #5</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.makeCheby2Filter(System.Int32,System.Object[]@,System.Object[],System.Object[])">
             <summary>
             Provides an interface for the makeCheby2Filter function in which the input and
             output
             arguments are specified as an array of Objects.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of Object output arguments</param>
             <param name= "argsIn">Array of Object input arguments</param>
             <param name= "varArgsIn">Array of Object representing variable input
             arguments</param>
            
        </member>
        <member name="M:mPhysNative.Class1.makeEllipFilter">
             <summary>
             Provides a single output, 0-input Objectinterface to the makeEllipFilter
             M-function.
             </summary>
             <remarks>
             </remarks>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.makeEllipFilter(System.Object)">
             <summary>
             Provides a single output, 1-input Objectinterface to the makeEllipFilter
             M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="samplingFreq">Input argument #1</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.makeEllipFilter(System.Object,System.Object)">
             <summary>
             Provides a single output, 2-input Objectinterface to the makeEllipFilter
             M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="samplingFreq">Input argument #1</param>
             <param name="order">Input argument #2</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.makeEllipFilter(System.Object,System.Object,System.Object)">
             <summary>
             Provides a single output, 3-input Objectinterface to the makeEllipFilter
             M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="samplingFreq">Input argument #1</param>
             <param name="order">Input argument #2</param>
             <param name="PassBandRipple">Input argument #3</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.makeEllipFilter(System.Object,System.Object,System.Object,System.Object)">
             <summary>
             Provides a single output, 4-input Objectinterface to the makeEllipFilter
             M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="samplingFreq">Input argument #1</param>
             <param name="order">Input argument #2</param>
             <param name="PassBandRipple">Input argument #3</param>
             <param name="StopBandAttenuation">Input argument #4</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.makeEllipFilter(System.Object,System.Object,System.Object,System.Object,System.Object)">
             <summary>
             Provides a single output, 5-input Objectinterface to the makeEllipFilter
             M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="samplingFreq">Input argument #1</param>
             <param name="order">Input argument #2</param>
             <param name="PassBandRipple">Input argument #3</param>
             <param name="StopBandAttenuation">Input argument #4</param>
             <param name="cutOffFreq">Input argument #5</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.makeEllipFilter(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
             <summary>
             Provides a single output, 6-input Objectinterface to the makeEllipFilter
             M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="samplingFreq">Input argument #1</param>
             <param name="order">Input argument #2</param>
             <param name="PassBandRipple">Input argument #3</param>
             <param name="StopBandAttenuation">Input argument #4</param>
             <param name="cutOffFreq">Input argument #5</param>
             <param name="typeCode">Input argument #6</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.makeEllipFilter(System.Int32)">
             <summary>
             Provides the standard 0-input Object interface to the makeEllipFilter M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.makeEllipFilter(System.Int32,System.Object)">
             <summary>
             Provides the standard 1-input Object interface to the makeEllipFilter M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="samplingFreq">Input argument #1</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.makeEllipFilter(System.Int32,System.Object,System.Object)">
             <summary>
             Provides the standard 2-input Object interface to the makeEllipFilter M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="samplingFreq">Input argument #1</param>
             <param name="order">Input argument #2</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.makeEllipFilter(System.Int32,System.Object,System.Object,System.Object)">
             <summary>
             Provides the standard 3-input Object interface to the makeEllipFilter M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="samplingFreq">Input argument #1</param>
             <param name="order">Input argument #2</param>
             <param name="PassBandRipple">Input argument #3</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.makeEllipFilter(System.Int32,System.Object,System.Object,System.Object,System.Object)">
             <summary>
             Provides the standard 4-input Object interface to the makeEllipFilter M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="samplingFreq">Input argument #1</param>
             <param name="order">Input argument #2</param>
             <param name="PassBandRipple">Input argument #3</param>
             <param name="StopBandAttenuation">Input argument #4</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.makeEllipFilter(System.Int32,System.Object,System.Object,System.Object,System.Object,System.Object)">
             <summary>
             Provides the standard 5-input Object interface to the makeEllipFilter M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="samplingFreq">Input argument #1</param>
             <param name="order">Input argument #2</param>
             <param name="PassBandRipple">Input argument #3</param>
             <param name="StopBandAttenuation">Input argument #4</param>
             <param name="cutOffFreq">Input argument #5</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.makeEllipFilter(System.Int32,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
             <summary>
             Provides the standard 6-input Object interface to the makeEllipFilter M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="samplingFreq">Input argument #1</param>
             <param name="order">Input argument #2</param>
             <param name="PassBandRipple">Input argument #3</param>
             <param name="StopBandAttenuation">Input argument #4</param>
             <param name="cutOffFreq">Input argument #5</param>
             <param name="typeCode">Input argument #6</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.makeEllipFilter(System.Int32,System.Object[]@,System.Object[],System.Object[])">
             <summary>
             Provides an interface for the makeEllipFilter function in which the input and
             output
             arguments are specified as an array of Objects.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of Object output arguments</param>
             <param name= "argsIn">Array of Object input arguments</param>
             <param name= "varArgsIn">Array of Object representing variable input
             arguments</param>
            
        </member>
        <member name="M:mPhysNative.Class1.makeLines">
             <summary>
             Provides a void output, 0-input Objectinterface to the makeLines M-function.
             </summary>
             <remarks>
             M-Documentation:
             zData=evalin('base','zData');
             </remarks>
            
        </member>
        <member name="M:mPhysNative.Class1.makeLines(System.Object)">
             <summary>
             Provides a void output, 1-input Objectinterface to the makeLines M-function.
             </summary>
             <remarks>
             M-Documentation:
             zData=evalin('base','zData');
             </remarks>
             <param name="traceName">Input argument #1</param>
            
        </member>
        <member name="M:mPhysNative.Class1.makeLines(System.Object,System.Object)">
             <summary>
             Provides a void output, 2-input Objectinterface to the makeLines M-function.
             </summary>
             <remarks>
             M-Documentation:
             zData=evalin('base','zData');
             </remarks>
             <param name="traceName">Input argument #1</param>
             <param name="colorName">Input argument #2</param>
            
        </member>
        <member name="M:mPhysNative.Class1.makeLines(System.Object,System.Object,System.Object)">
             <summary>
             Provides a void output, 3-input Objectinterface to the makeLines M-function.
             </summary>
             <remarks>
             M-Documentation:
             zData=evalin('base','zData');
             </remarks>
             <param name="traceName">Input argument #1</param>
             <param name="colorName">Input argument #2</param>
             <param name="lineWidth">Input argument #3</param>
            
        </member>
        <member name="M:mPhysNative.Class1.makeLines(System.Int32)">
             <summary>
             Provides the standard 0-input Object interface to the makeLines M-function.
             </summary>
             <remarks>
             M-Documentation:
             zData=evalin('base','zData');
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.makeLines(System.Int32,System.Object)">
             <summary>
             Provides the standard 1-input Object interface to the makeLines M-function.
             </summary>
             <remarks>
             M-Documentation:
             zData=evalin('base','zData');
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="traceName">Input argument #1</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.makeLines(System.Int32,System.Object,System.Object)">
             <summary>
             Provides the standard 2-input Object interface to the makeLines M-function.
             </summary>
             <remarks>
             M-Documentation:
             zData=evalin('base','zData');
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="traceName">Input argument #1</param>
             <param name="colorName">Input argument #2</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.makeLines(System.Int32,System.Object,System.Object,System.Object)">
             <summary>
             Provides the standard 3-input Object interface to the makeLines M-function.
             </summary>
             <remarks>
             M-Documentation:
             zData=evalin('base','zData');
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="traceName">Input argument #1</param>
             <param name="colorName">Input argument #2</param>
             <param name="lineWidth">Input argument #3</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.makeLines(System.Int32,System.Object[]@,System.Object[],System.Object[])">
             <summary>
             Provides an interface for the makeLines function in which the input and output
             arguments are specified as an array of Objects.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             M-Documentation:
             zData=evalin('base','zData');
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of Object output arguments</param>
             <param name= "argsIn">Array of Object input arguments</param>
             <param name= "varArgsIn">Array of Object representing variable input
             arguments</param>
            
        </member>
        <member name="M:mPhysNative.Class1.makeLines2">
             <summary>
             Provides a void output, 0-input Objectinterface to the makeLines2 M-function.
             </summary>
             <remarks>
             M-Documentation:
             zData=evalin('base','zData');
             </remarks>
            
        </member>
        <member name="M:mPhysNative.Class1.makeLines2(System.Object)">
             <summary>
             Provides a void output, 1-input Objectinterface to the makeLines2 M-function.
             </summary>
             <remarks>
             M-Documentation:
             zData=evalin('base','zData');
             </remarks>
             <param name="traceName">Input argument #1</param>
            
        </member>
        <member name="M:mPhysNative.Class1.makeLines2(System.Object,System.Object)">
             <summary>
             Provides a void output, 2-input Objectinterface to the makeLines2 M-function.
             </summary>
             <remarks>
             M-Documentation:
             zData=evalin('base','zData');
             </remarks>
             <param name="traceName">Input argument #1</param>
             <param name="colorName">Input argument #2</param>
            
        </member>
        <member name="M:mPhysNative.Class1.makeLines2(System.Object,System.Object,System.Object)">
             <summary>
             Provides a void output, 3-input Objectinterface to the makeLines2 M-function.
             </summary>
             <remarks>
             M-Documentation:
             zData=evalin('base','zData');
             </remarks>
             <param name="traceName">Input argument #1</param>
             <param name="colorName">Input argument #2</param>
             <param name="lineWidth">Input argument #3</param>
            
        </member>
        <member name="M:mPhysNative.Class1.makeLines2(System.Int32)">
             <summary>
             Provides the standard 0-input Object interface to the makeLines2 M-function.
             </summary>
             <remarks>
             M-Documentation:
             zData=evalin('base','zData');
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.makeLines2(System.Int32,System.Object)">
             <summary>
             Provides the standard 1-input Object interface to the makeLines2 M-function.
             </summary>
             <remarks>
             M-Documentation:
             zData=evalin('base','zData');
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="traceName">Input argument #1</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.makeLines2(System.Int32,System.Object,System.Object)">
             <summary>
             Provides the standard 2-input Object interface to the makeLines2 M-function.
             </summary>
             <remarks>
             M-Documentation:
             zData=evalin('base','zData');
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="traceName">Input argument #1</param>
             <param name="colorName">Input argument #2</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.makeLines2(System.Int32,System.Object,System.Object,System.Object)">
             <summary>
             Provides the standard 3-input Object interface to the makeLines2 M-function.
             </summary>
             <remarks>
             M-Documentation:
             zData=evalin('base','zData');
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="traceName">Input argument #1</param>
             <param name="colorName">Input argument #2</param>
             <param name="lineWidth">Input argument #3</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.makeLines2(System.Int32,System.Object[]@,System.Object[],System.Object[])">
             <summary>
             Provides an interface for the makeLines2 function in which the input and output
             arguments are specified as an array of Objects.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             M-Documentation:
             zData=evalin('base','zData');
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of Object output arguments</param>
             <param name= "argsIn">Array of Object input arguments</param>
             <param name= "varArgsIn">Array of Object representing variable input
             arguments</param>
            
        </member>
        <member name="M:mPhysNative.Class1.makeLinesTest">
             <summary>
             Provides a void output, 0-input Objectinterface to the makeLinesTest M-function.
             </summary>
             <remarks>
             </remarks>
            
        </member>
        <member name="M:mPhysNative.Class1.makeLinesTest(System.Int32)">
             <summary>
             Provides the standard 0-input Object interface to the makeLinesTest M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.makeLinesTest(System.Int32,System.Object[]@,System.Object[],System.Object[])">
             <summary>
             Provides an interface for the makeLinesTest function in which the input and
             output
             arguments are specified as an array of Objects.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of Object output arguments</param>
             <param name= "argsIn">Array of Object input arguments</param>
             <param name= "varArgsIn">Array of Object representing variable input
             arguments</param>
            
        </member>
        <member name="M:mPhysNative.Class1.Matlab_Setup_Listener">
             <summary>
             Provides a void output, 0-input Objectinterface to the Matlab_Setup_Listener
             M-function.
             </summary>
             <remarks>
             </remarks>
            
        </member>
        <member name="M:mPhysNative.Class1.Matlab_Setup_Listener(System.Int32)">
             <summary>
             Provides the standard 0-input Object interface to the Matlab_Setup_Listener
             M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.Matlab_Setup_Listener(System.Int32,System.Object[]@,System.Object[],System.Object[])">
             <summary>
             Provides an interface for the Matlab Setup Listener function in which the input
             and output
             arguments are specified as an array of Objects.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of Object output arguments</param>
             <param name= "argsIn">Array of Object input arguments</param>
             <param name= "varArgsIn">Array of Object representing variable input
             arguments</param>
            
        </member>
        <member name="M:mPhysNative.Class1.matlabPlot">
             <summary>
             Provides a single output, 0-input Objectinterface to the matlabPlot M-function.
             </summary>
             <remarks>
             </remarks>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.matlabPlot(System.Object)">
             <summary>
             Provides a single output, 1-input Objectinterface to the matlabPlot M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="x">Input argument #1</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.matlabPlot(System.Object,System.Object)">
             <summary>
             Provides a single output, 2-input Objectinterface to the matlabPlot M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="x">Input argument #1</param>
             <param name="y">Input argument #2</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.matlabPlot(System.Object,System.Object,System.Object)">
             <summary>
             Provides a single output, 3-input Objectinterface to the matlabPlot M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="x">Input argument #1</param>
             <param name="y">Input argument #2</param>
             <param name="figureName">Input argument #3</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.matlabPlot(System.Object,System.Object,System.Object,System.Object)">
             <summary>
             Provides a single output, 4-input Objectinterface to the matlabPlot M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="x">Input argument #1</param>
             <param name="y">Input argument #2</param>
             <param name="figureName">Input argument #3</param>
             <param name="parameterString">Input argument #4</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.matlabPlot(System.Int32)">
             <summary>
             Provides the standard 0-input Object interface to the matlabPlot M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.matlabPlot(System.Int32,System.Object)">
             <summary>
             Provides the standard 1-input Object interface to the matlabPlot M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="x">Input argument #1</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.matlabPlot(System.Int32,System.Object,System.Object)">
             <summary>
             Provides the standard 2-input Object interface to the matlabPlot M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="x">Input argument #1</param>
             <param name="y">Input argument #2</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.matlabPlot(System.Int32,System.Object,System.Object,System.Object)">
             <summary>
             Provides the standard 3-input Object interface to the matlabPlot M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="x">Input argument #1</param>
             <param name="y">Input argument #2</param>
             <param name="figureName">Input argument #3</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.matlabPlot(System.Int32,System.Object,System.Object,System.Object,System.Object)">
             <summary>
             Provides the standard 4-input Object interface to the matlabPlot M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="x">Input argument #1</param>
             <param name="y">Input argument #2</param>
             <param name="figureName">Input argument #3</param>
             <param name="parameterString">Input argument #4</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.matlabPlot(System.Int32,System.Object[]@,System.Object[],System.Object[])">
             <summary>
             Provides an interface for the matlabPlot function in which the input and output
             arguments are specified as an array of Objects.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of Object output arguments</param>
             <param name= "argsIn">Array of Object input arguments</param>
             <param name= "varArgsIn">Array of Object representing variable input
             arguments</param>
            
        </member>
        <member name="M:mPhysNative.Class1.matlabPlotNoJitter">
             <summary>
             Provides a single output, 0-input Objectinterface to the matlabPlotNoJitter
             M-function.
             </summary>
             <remarks>
             </remarks>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.matlabPlotNoJitter(System.Object)">
             <summary>
             Provides a single output, 1-input Objectinterface to the matlabPlotNoJitter
             M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="x">Input argument #1</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.matlabPlotNoJitter(System.Object,System.Object)">
             <summary>
             Provides a single output, 2-input Objectinterface to the matlabPlotNoJitter
             M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="x">Input argument #1</param>
             <param name="y">Input argument #2</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.matlabPlotNoJitter(System.Object,System.Object,System.Object)">
             <summary>
             Provides a single output, 3-input Objectinterface to the matlabPlotNoJitter
             M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="x">Input argument #1</param>
             <param name="y">Input argument #2</param>
             <param name="figureName">Input argument #3</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.matlabPlotNoJitter(System.Object,System.Object,System.Object,System.Object)">
             <summary>
             Provides a single output, 4-input Objectinterface to the matlabPlotNoJitter
             M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="x">Input argument #1</param>
             <param name="y">Input argument #2</param>
             <param name="figureName">Input argument #3</param>
             <param name="parameterString">Input argument #4</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.matlabPlotNoJitter(System.Int32)">
             <summary>
             Provides the standard 0-input Object interface to the matlabPlotNoJitter
             M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.matlabPlotNoJitter(System.Int32,System.Object)">
             <summary>
             Provides the standard 1-input Object interface to the matlabPlotNoJitter
             M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="x">Input argument #1</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.matlabPlotNoJitter(System.Int32,System.Object,System.Object)">
             <summary>
             Provides the standard 2-input Object interface to the matlabPlotNoJitter
             M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="x">Input argument #1</param>
             <param name="y">Input argument #2</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.matlabPlotNoJitter(System.Int32,System.Object,System.Object,System.Object)">
             <summary>
             Provides the standard 3-input Object interface to the matlabPlotNoJitter
             M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="x">Input argument #1</param>
             <param name="y">Input argument #2</param>
             <param name="figureName">Input argument #3</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.matlabPlotNoJitter(System.Int32,System.Object,System.Object,System.Object,System.Object)">
             <summary>
             Provides the standard 4-input Object interface to the matlabPlotNoJitter
             M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="x">Input argument #1</param>
             <param name="y">Input argument #2</param>
             <param name="figureName">Input argument #3</param>
             <param name="parameterString">Input argument #4</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.matlabPlotNoJitter(System.Int32,System.Object[]@,System.Object[],System.Object[])">
             <summary>
             Provides an interface for the matlabPlotNoJitter function in which the input and
             output
             arguments are specified as an array of Objects.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of Object output arguments</param>
             <param name= "argsIn">Array of Object input arguments</param>
             <param name= "varArgsIn">Array of Object representing variable input
             arguments</param>
            
        </member>
        <member name="M:mPhysNative.Class1.matlabPlotOld">
             <summary>
             Provides a single output, 0-input Objectinterface to the matlabPlotOld
             M-function.
             </summary>
             <remarks>
             </remarks>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.matlabPlotOld(System.Object)">
             <summary>
             Provides a single output, 1-input Objectinterface to the matlabPlotOld
             M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="x">Input argument #1</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.matlabPlotOld(System.Object,System.Object)">
             <summary>
             Provides a single output, 2-input Objectinterface to the matlabPlotOld
             M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="x">Input argument #1</param>
             <param name="y">Input argument #2</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.matlabPlotOld(System.Object,System.Object,System.Object)">
             <summary>
             Provides a single output, 3-input Objectinterface to the matlabPlotOld
             M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="x">Input argument #1</param>
             <param name="y">Input argument #2</param>
             <param name="figureName">Input argument #3</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.matlabPlotOld(System.Object,System.Object,System.Object,System.Object)">
             <summary>
             Provides a single output, 4-input Objectinterface to the matlabPlotOld
             M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="x">Input argument #1</param>
             <param name="y">Input argument #2</param>
             <param name="figureName">Input argument #3</param>
             <param name="parameterString">Input argument #4</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.matlabPlotOld(System.Int32)">
             <summary>
             Provides the standard 0-input Object interface to the matlabPlotOld M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.matlabPlotOld(System.Int32,System.Object)">
             <summary>
             Provides the standard 1-input Object interface to the matlabPlotOld M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="x">Input argument #1</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.matlabPlotOld(System.Int32,System.Object,System.Object)">
             <summary>
             Provides the standard 2-input Object interface to the matlabPlotOld M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="x">Input argument #1</param>
             <param name="y">Input argument #2</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.matlabPlotOld(System.Int32,System.Object,System.Object,System.Object)">
             <summary>
             Provides the standard 3-input Object interface to the matlabPlotOld M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="x">Input argument #1</param>
             <param name="y">Input argument #2</param>
             <param name="figureName">Input argument #3</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.matlabPlotOld(System.Int32,System.Object,System.Object,System.Object,System.Object)">
             <summary>
             Provides the standard 4-input Object interface to the matlabPlotOld M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="x">Input argument #1</param>
             <param name="y">Input argument #2</param>
             <param name="figureName">Input argument #3</param>
             <param name="parameterString">Input argument #4</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.matlabPlotOld(System.Int32,System.Object[]@,System.Object[],System.Object[])">
             <summary>
             Provides an interface for the matlabPlotOld function in which the input and
             output
             arguments are specified as an array of Objects.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of Object output arguments</param>
             <param name= "argsIn">Array of Object input arguments</param>
             <param name= "varArgsIn">Array of Object representing variable input
             arguments</param>
            
        </member>
        <member name="M:mPhysNative.Class1.MatlabSetupListener">
             <summary>
             Provides a void output, 0-input Objectinterface to the MatlabSetupListener
             M-function.
             </summary>
             <remarks>
             </remarks>
            
        </member>
        <member name="M:mPhysNative.Class1.MatlabSetupListener(System.Int32)">
             <summary>
             Provides the standard 0-input Object interface to the MatlabSetupListener
             M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.MatlabSetupListener(System.Int32,System.Object[]@,System.Object[],System.Object[])">
             <summary>
             Provides an interface for the MatlabSetupListener function in which the input and
             output
             arguments are specified as an array of Objects.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of Object output arguments</param>
             <param name= "argsIn">Array of Object input arguments</param>
             <param name= "varArgsIn">Array of Object representing variable input
             arguments</param>
            
        </member>
        <member name="M:mPhysNative.Class1.meanVariance">
             <summary>
             Provides a single output, 0-input Objectinterface to the meanVariance M-function.
             </summary>
             <remarks>
             M-Documentation:
             outValue = meanVariance(inData, windowLength, overlapRatio, outputAxis);
             </remarks>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.meanVariance(System.Object)">
             <summary>
             Provides a single output, 1-input Objectinterface to the meanVariance M-function.
             </summary>
             <remarks>
             M-Documentation:
             outValue = meanVariance(inData, windowLength, overlapRatio, outputAxis);
             </remarks>
             <param name="inData">Input argument #1</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.meanVariance(System.Object,System.Object)">
             <summary>
             Provides a single output, 2-input Objectinterface to the meanVariance M-function.
             </summary>
             <remarks>
             M-Documentation:
             outValue = meanVariance(inData, windowLength, overlapRatio, outputAxis);
             </remarks>
             <param name="inData">Input argument #1</param>
             <param name="windowLength">Input argument #2</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.meanVariance(System.Object,System.Object,System.Object)">
             <summary>
             Provides a single output, 3-input Objectinterface to the meanVariance M-function.
             </summary>
             <remarks>
             M-Documentation:
             outValue = meanVariance(inData, windowLength, overlapRatio, outputAxis);
             </remarks>
             <param name="inData">Input argument #1</param>
             <param name="windowLength">Input argument #2</param>
             <param name="overlapRatio">Input argument #3</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.meanVariance(System.Object,System.Object,System.Object,System.Object)">
             <summary>
             Provides a single output, 4-input Objectinterface to the meanVariance M-function.
             </summary>
             <remarks>
             M-Documentation:
             outValue = meanVariance(inData, windowLength, overlapRatio, outputAxis);
             </remarks>
             <param name="inData">Input argument #1</param>
             <param name="windowLength">Input argument #2</param>
             <param name="overlapRatio">Input argument #3</param>
             <param name="outputAxis">Input argument #4</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.meanVariance(System.Int32)">
             <summary>
             Provides the standard 0-input Object interface to the meanVariance M-function.
             </summary>
             <remarks>
             M-Documentation:
             outValue = meanVariance(inData, windowLength, overlapRatio, outputAxis);
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.meanVariance(System.Int32,System.Object)">
             <summary>
             Provides the standard 1-input Object interface to the meanVariance M-function.
             </summary>
             <remarks>
             M-Documentation:
             outValue = meanVariance(inData, windowLength, overlapRatio, outputAxis);
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="inData">Input argument #1</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.meanVariance(System.Int32,System.Object,System.Object)">
             <summary>
             Provides the standard 2-input Object interface to the meanVariance M-function.
             </summary>
             <remarks>
             M-Documentation:
             outValue = meanVariance(inData, windowLength, overlapRatio, outputAxis);
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="inData">Input argument #1</param>
             <param name="windowLength">Input argument #2</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.meanVariance(System.Int32,System.Object,System.Object,System.Object)">
             <summary>
             Provides the standard 3-input Object interface to the meanVariance M-function.
             </summary>
             <remarks>
             M-Documentation:
             outValue = meanVariance(inData, windowLength, overlapRatio, outputAxis);
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="inData">Input argument #1</param>
             <param name="windowLength">Input argument #2</param>
             <param name="overlapRatio">Input argument #3</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.meanVariance(System.Int32,System.Object,System.Object,System.Object,System.Object)">
             <summary>
             Provides the standard 4-input Object interface to the meanVariance M-function.
             </summary>
             <remarks>
             M-Documentation:
             outValue = meanVariance(inData, windowLength, overlapRatio, outputAxis);
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="inData">Input argument #1</param>
             <param name="windowLength">Input argument #2</param>
             <param name="overlapRatio">Input argument #3</param>
             <param name="outputAxis">Input argument #4</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.meanVariance(System.Int32,System.Object[]@,System.Object[],System.Object[])">
             <summary>
             Provides an interface for the meanVariance function in which the input and output
             arguments are specified as an array of Objects.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             M-Documentation:
             outValue = meanVariance(inData, windowLength, overlapRatio, outputAxis);
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of Object output arguments</param>
             <param name= "argsIn">Array of Object input arguments</param>
             <param name= "varArgsIn">Array of Object representing variable input
             arguments</param>
            
        </member>
        <member name="M:mPhysNative.Class1.medianFilter">
             <summary>
             Provides a single output, 0-input Objectinterface to the medianFilter M-function.
             </summary>
             <remarks>
             M-Documentation:
             Apply a median filter to vector VEC
             [NEWVEC] = APPLY_MEDIAN_FILTER(VEC)
             Replace each item with the median of itself and its two
             neighbors. For the first and last item, simply take the
             median of themselves and their only neighbor.
             </remarks>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.medianFilter(System.Object)">
             <summary>
             Provides a single output, 1-input Objectinterface to the medianFilter M-function.
             </summary>
             <remarks>
             M-Documentation:
             Apply a median filter to vector VEC
             [NEWVEC] = APPLY_MEDIAN_FILTER(VEC)
             Replace each item with the median of itself and its two
             neighbors. For the first and last item, simply take the
             median of themselves and their only neighbor.
             </remarks>
             <param name="vec">Input argument #1</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.medianFilter(System.Object,System.Object)">
             <summary>
             Provides a single output, 2-input Objectinterface to the medianFilter M-function.
             </summary>
             <remarks>
             M-Documentation:
             Apply a median filter to vector VEC
             [NEWVEC] = APPLY_MEDIAN_FILTER(VEC)
             Replace each item with the median of itself and its two
             neighbors. For the first and last item, simply take the
             median of themselves and their only neighbor.
             </remarks>
             <param name="vec">Input argument #1</param>
             <param name="size">Input argument #2</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.medianFilter(System.Int32)">
             <summary>
             Provides the standard 0-input Object interface to the medianFilter M-function.
             </summary>
             <remarks>
             M-Documentation:
             Apply a median filter to vector VEC
             [NEWVEC] = APPLY_MEDIAN_FILTER(VEC)
             Replace each item with the median of itself and its two
             neighbors. For the first and last item, simply take the
             median of themselves and their only neighbor.
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.medianFilter(System.Int32,System.Object)">
             <summary>
             Provides the standard 1-input Object interface to the medianFilter M-function.
             </summary>
             <remarks>
             M-Documentation:
             Apply a median filter to vector VEC
             [NEWVEC] = APPLY_MEDIAN_FILTER(VEC)
             Replace each item with the median of itself and its two
             neighbors. For the first and last item, simply take the
             median of themselves and their only neighbor.
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="vec">Input argument #1</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.medianFilter(System.Int32,System.Object,System.Object)">
             <summary>
             Provides the standard 2-input Object interface to the medianFilter M-function.
             </summary>
             <remarks>
             M-Documentation:
             Apply a median filter to vector VEC
             [NEWVEC] = APPLY_MEDIAN_FILTER(VEC)
             Replace each item with the median of itself and its two
             neighbors. For the first and last item, simply take the
             median of themselves and their only neighbor.
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="vec">Input argument #1</param>
             <param name="size">Input argument #2</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.medianFilter(System.Int32,System.Object[]@,System.Object[],System.Object[])">
             <summary>
             Provides an interface for the medianFilter function in which the input and output
             arguments are specified as an array of Objects.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             M-Documentation:
             Apply a median filter to vector VEC
             [NEWVEC] = APPLY_MEDIAN_FILTER(VEC)
             Replace each item with the median of itself and its two
             neighbors. For the first and last item, simply take the
             median of themselves and their only neighbor.
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of Object output arguments</param>
             <param name= "argsIn">Array of Object input arguments</param>
             <param name= "varArgsIn">Array of Object representing variable input
             arguments</param>
            
        </member>
        <member name="M:mPhysNative.Class1.metaBar">
             <summary>
             Provides a single output, 0-input Objectinterface to the metaBar M-function.
             </summary>
             <remarks>
             M-Documentation:
             generate mega plot
             figHandle = metaBar(titles, xData, yData)
             </remarks>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.metaBar(System.Object)">
             <summary>
             Provides a single output, 1-input Objectinterface to the metaBar M-function.
             </summary>
             <remarks>
             M-Documentation:
             generate mega plot
             figHandle = metaBar(titles, xData, yData)
             </remarks>
             <param name="titles">Input argument #1</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.metaBar(System.Object,System.Object)">
             <summary>
             Provides a single output, 2-input Objectinterface to the metaBar M-function.
             </summary>
             <remarks>
             M-Documentation:
             generate mega plot
             figHandle = metaBar(titles, xData, yData)
             </remarks>
             <param name="titles">Input argument #1</param>
             <param name="xData">Input argument #2</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.metaBar(System.Object,System.Object,System.Object)">
             <summary>
             Provides a single output, 3-input Objectinterface to the metaBar M-function.
             </summary>
             <remarks>
             M-Documentation:
             generate mega plot
             figHandle = metaBar(titles, xData, yData)
             </remarks>
             <param name="titles">Input argument #1</param>
             <param name="xData">Input argument #2</param>
             <param name="yData">Input argument #3</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.metaBar(System.Int32)">
             <summary>
             Provides the standard 0-input Object interface to the metaBar M-function.
             </summary>
             <remarks>
             M-Documentation:
             generate mega plot
             figHandle = metaBar(titles, xData, yData)
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.metaBar(System.Int32,System.Object)">
             <summary>
             Provides the standard 1-input Object interface to the metaBar M-function.
             </summary>
             <remarks>
             M-Documentation:
             generate mega plot
             figHandle = metaBar(titles, xData, yData)
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="titles">Input argument #1</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.metaBar(System.Int32,System.Object,System.Object)">
             <summary>
             Provides the standard 2-input Object interface to the metaBar M-function.
             </summary>
             <remarks>
             M-Documentation:
             generate mega plot
             figHandle = metaBar(titles, xData, yData)
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="titles">Input argument #1</param>
             <param name="xData">Input argument #2</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.metaBar(System.Int32,System.Object,System.Object,System.Object)">
             <summary>
             Provides the standard 3-input Object interface to the metaBar M-function.
             </summary>
             <remarks>
             M-Documentation:
             generate mega plot
             figHandle = metaBar(titles, xData, yData)
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="titles">Input argument #1</param>
             <param name="xData">Input argument #2</param>
             <param name="yData">Input argument #3</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.metaBar(System.Int32,System.Object[]@,System.Object[],System.Object[])">
             <summary>
             Provides an interface for the metaBar function in which the input and output
             arguments are specified as an array of Objects.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             M-Documentation:
             generate mega plot
             figHandle = metaBar(titles, xData, yData)
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of Object output arguments</param>
             <param name= "argsIn">Array of Object input arguments</param>
             <param name= "varArgsIn">Array of Object representing variable input
             arguments</param>
            
        </member>
        <member name="M:mPhysNative.Class1.metaCorrEvents">
             <summary>
             Provides a single output, 0-input Objectinterface to the metaCorrEvents
             M-function.
             </summary>
             <remarks>
             M-Documentation:
             calculate significance
             </remarks>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.metaCorrEvents(System.Object[])">
             <summary>
             Provides a single output, 1-input Objectinterface to the metaCorrEvents
             M-function.
             </summary>
             <remarks>
             M-Documentation:
             calculate significance
             </remarks>
             <param name="varargin">Array of Objects representing the input arguments 1
             through varargin.length</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.metaCorrEvents(System.Int32)">
             <summary>
             Provides the standard 0-input Object interface to the metaCorrEvents M-function.
             </summary>
             <remarks>
             M-Documentation:
             calculate significance
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.metaCorrEvents(System.Int32,System.Object[])">
             <summary>
             Provides the standard 1-input Object interface to the metaCorrEvents M-function.
             </summary>
             <remarks>
             M-Documentation:
             calculate significance
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="varargin">Array of Objects representing the input arguments 1
             through varargin.length</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.metaCorrEvents(System.Int32,System.Object[]@,System.Object[],System.Object[])">
             <summary>
             Provides an interface for the metaCorrEvents function in which the input and
             output
             arguments are specified as an array of Objects.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             M-Documentation:
             calculate significance
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of Object output arguments</param>
             <param name= "argsIn">Array of Object input arguments</param>
             <param name= "varArgsIn">Array of Object representing variable input
             arguments</param>
            
        </member>
        <member name="M:mPhysNative.Class1.MLdiff">
             <summary>
             Provides a single output, 0-input Objectinterface to the MLdiff M-function.
             </summary>
             <remarks>
             </remarks>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.MLdiff(System.Object)">
             <summary>
             Provides a single output, 1-input Objectinterface to the MLdiff M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="x">Input argument #1</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.MLdiff(System.Int32)">
             <summary>
             Provides the standard 0-input Object interface to the MLdiff M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.MLdiff(System.Int32,System.Object)">
             <summary>
             Provides the standard 1-input Object interface to the MLdiff M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="x">Input argument #1</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.MLdiff(System.Int32,System.Object[]@,System.Object[],System.Object[])">
             <summary>
             Provides an interface for the MLdiff function in which the input and output
             arguments are specified as an array of Objects.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of Object output arguments</param>
             <param name= "argsIn">Array of Object input arguments</param>
             <param name= "varArgsIn">Array of Object representing variable input
             arguments</param>
            
        </member>
        <member name="M:mPhysNative.Class1.MLmedfilt1">
             <summary>
             Provides a single output, 0-input Objectinterface to the MLmedfilt1 M-function.
             </summary>
             <remarks>
             </remarks>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.MLmedfilt1(System.Object)">
             <summary>
             Provides a single output, 1-input Objectinterface to the MLmedfilt1 M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="x">Input argument #1</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.MLmedfilt1(System.Object,System.Object)">
             <summary>
             Provides a single output, 2-input Objectinterface to the MLmedfilt1 M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="x">Input argument #1</param>
             <param name="n">Input argument #2</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.MLmedfilt1(System.Int32)">
             <summary>
             Provides the standard 0-input Object interface to the MLmedfilt1 M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.MLmedfilt1(System.Int32,System.Object)">
             <summary>
             Provides the standard 1-input Object interface to the MLmedfilt1 M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="x">Input argument #1</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.MLmedfilt1(System.Int32,System.Object,System.Object)">
             <summary>
             Provides the standard 2-input Object interface to the MLmedfilt1 M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="x">Input argument #1</param>
             <param name="n">Input argument #2</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.MLmedfilt1(System.Int32,System.Object[]@,System.Object[],System.Object[])">
             <summary>
             Provides an interface for the MLmedfilt1 function in which the input and output
             arguments are specified as an array of Objects.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of Object output arguments</param>
             <param name= "argsIn">Array of Object input arguments</param>
             <param name= "varArgsIn">Array of Object representing variable input
             arguments</param>
            
        </member>
        <member name="M:mPhysNative.Class1.MLpolyfit">
             <summary>
             Provides a single output, 0-input Objectinterface to the MLpolyfit M-function.
             </summary>
             <remarks>
             </remarks>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.MLpolyfit(System.Object)">
             <summary>
             Provides a single output, 1-input Objectinterface to the MLpolyfit M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="x">Input argument #1</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.MLpolyfit(System.Object,System.Object)">
             <summary>
             Provides a single output, 2-input Objectinterface to the MLpolyfit M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="x">Input argument #1</param>
             <param name="y">Input argument #2</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.MLpolyfit(System.Object,System.Object,System.Object)">
             <summary>
             Provides a single output, 3-input Objectinterface to the MLpolyfit M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="x">Input argument #1</param>
             <param name="y">Input argument #2</param>
             <param name="n">Input argument #3</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.MLpolyfit(System.Int32)">
             <summary>
             Provides the standard 0-input Object interface to the MLpolyfit M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.MLpolyfit(System.Int32,System.Object)">
             <summary>
             Provides the standard 1-input Object interface to the MLpolyfit M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="x">Input argument #1</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.MLpolyfit(System.Int32,System.Object,System.Object)">
             <summary>
             Provides the standard 2-input Object interface to the MLpolyfit M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="x">Input argument #1</param>
             <param name="y">Input argument #2</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.MLpolyfit(System.Int32,System.Object,System.Object,System.Object)">
             <summary>
             Provides the standard 3-input Object interface to the MLpolyfit M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="x">Input argument #1</param>
             <param name="y">Input argument #2</param>
             <param name="n">Input argument #3</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.MLpolyfit(System.Int32,System.Object[]@,System.Object[],System.Object[])">
             <summary>
             Provides an interface for the MLpolyfit function in which the input and output
             arguments are specified as an array of Objects.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of Object output arguments</param>
             <param name= "argsIn">Array of Object input arguments</param>
             <param name= "varArgsIn">Array of Object representing variable input
             arguments</param>
            
        </member>
        <member name="M:mPhysNative.Class1.MLpolyval">
             <summary>
             Provides a single output, 0-input Objectinterface to the MLpolyval M-function.
             </summary>
             <remarks>
             </remarks>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.MLpolyval(System.Object)">
             <summary>
             Provides a single output, 1-input Objectinterface to the MLpolyval M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="p">Input argument #1</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.MLpolyval(System.Object,System.Object)">
             <summary>
             Provides a single output, 2-input Objectinterface to the MLpolyval M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="p">Input argument #1</param>
             <param name="x">Input argument #2</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.MLpolyval(System.Int32)">
             <summary>
             Provides the standard 0-input Object interface to the MLpolyval M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.MLpolyval(System.Int32,System.Object)">
             <summary>
             Provides the standard 1-input Object interface to the MLpolyval M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="p">Input argument #1</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.MLpolyval(System.Int32,System.Object,System.Object)">
             <summary>
             Provides the standard 2-input Object interface to the MLpolyval M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="p">Input argument #1</param>
             <param name="x">Input argument #2</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.MLpolyval(System.Int32,System.Object[]@,System.Object[],System.Object[])">
             <summary>
             Provides an interface for the MLpolyval function in which the input and output
             arguments are specified as an array of Objects.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of Object output arguments</param>
             <param name= "argsIn">Array of Object input arguments</param>
             <param name= "varArgsIn">Array of Object representing variable input
             arguments</param>
            
        </member>
        <member name="M:mPhysNative.Class1.MLsgolayfilt">
             <summary>
             Provides a single output, 0-input Objectinterface to the MLsgolayfilt M-function.
             </summary>
             <remarks>
             </remarks>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.MLsgolayfilt(System.Object)">
             <summary>
             Provides a single output, 1-input Objectinterface to the MLsgolayfilt M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="x">Input argument #1</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.MLsgolayfilt(System.Object,System.Object)">
             <summary>
             Provides a single output, 2-input Objectinterface to the MLsgolayfilt M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="x">Input argument #1</param>
             <param name="k">Input argument #2</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.MLsgolayfilt(System.Object,System.Object,System.Object)">
             <summary>
             Provides a single output, 3-input Objectinterface to the MLsgolayfilt M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="x">Input argument #1</param>
             <param name="k">Input argument #2</param>
             <param name="f">Input argument #3</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.MLsgolayfilt(System.Int32)">
             <summary>
             Provides the standard 0-input Object interface to the MLsgolayfilt M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.MLsgolayfilt(System.Int32,System.Object)">
             <summary>
             Provides the standard 1-input Object interface to the MLsgolayfilt M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="x">Input argument #1</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.MLsgolayfilt(System.Int32,System.Object,System.Object)">
             <summary>
             Provides the standard 2-input Object interface to the MLsgolayfilt M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="x">Input argument #1</param>
             <param name="k">Input argument #2</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.MLsgolayfilt(System.Int32,System.Object,System.Object,System.Object)">
             <summary>
             Provides the standard 3-input Object interface to the MLsgolayfilt M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="x">Input argument #1</param>
             <param name="k">Input argument #2</param>
             <param name="f">Input argument #3</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.MLsgolayfilt(System.Int32,System.Object[]@,System.Object[],System.Object[])">
             <summary>
             Provides an interface for the MLsgolayfilt function in which the input and output
             arguments are specified as an array of Objects.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of Object output arguments</param>
             <param name= "argsIn">Array of Object input arguments</param>
             <param name= "varArgsIn">Array of Object representing variable input
             arguments</param>
            
        </member>
        <member name="M:mPhysNative.Class1.movingAverage">
             <summary>
             Provides a single output, 0-input Objectinterface to the movingAverage
             M-function.
             </summary>
             <remarks>
             M-Documentation:
             use a boxcar filter of length windowSize points on inData
             filteredData = movingAverage(rawData, windowSize);
             defaults:
             windowSize = 10 points
             </remarks>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.movingAverage(System.Object)">
             <summary>
             Provides a single output, 1-input Objectinterface to the movingAverage
             M-function.
             </summary>
             <remarks>
             M-Documentation:
             use a boxcar filter of length windowSize points on inData
             filteredData = movingAverage(rawData, windowSize);
             defaults:
             windowSize = 10 points
             </remarks>
             <param name="inData">Input argument #1</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.movingAverage(System.Object,System.Object)">
             <summary>
             Provides a single output, 2-input Objectinterface to the movingAverage
             M-function.
             </summary>
             <remarks>
             M-Documentation:
             use a boxcar filter of length windowSize points on inData
             filteredData = movingAverage(rawData, windowSize);
             defaults:
             windowSize = 10 points
             </remarks>
             <param name="inData">Input argument #1</param>
             <param name="windowSize">Input argument #2</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.movingAverage(System.Int32)">
             <summary>
             Provides the standard 0-input Object interface to the movingAverage M-function.
             </summary>
             <remarks>
             M-Documentation:
             use a boxcar filter of length windowSize points on inData
             filteredData = movingAverage(rawData, windowSize);
             defaults:
             windowSize = 10 points
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.movingAverage(System.Int32,System.Object)">
             <summary>
             Provides the standard 1-input Object interface to the movingAverage M-function.
             </summary>
             <remarks>
             M-Documentation:
             use a boxcar filter of length windowSize points on inData
             filteredData = movingAverage(rawData, windowSize);
             defaults:
             windowSize = 10 points
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="inData">Input argument #1</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.movingAverage(System.Int32,System.Object,System.Object)">
             <summary>
             Provides the standard 2-input Object interface to the movingAverage M-function.
             </summary>
             <remarks>
             M-Documentation:
             use a boxcar filter of length windowSize points on inData
             filteredData = movingAverage(rawData, windowSize);
             defaults:
             windowSize = 10 points
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="inData">Input argument #1</param>
             <param name="windowSize">Input argument #2</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.movingAverage(System.Int32,System.Object[]@,System.Object[],System.Object[])">
             <summary>
             Provides an interface for the movingAverage function in which the input and
             output
             arguments are specified as an array of Objects.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             M-Documentation:
             use a boxcar filter of length windowSize points on inData
             filteredData = movingAverage(rawData, windowSize);
             defaults:
             windowSize = 10 points
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of Object output arguments</param>
             <param name= "argsIn">Array of Object input arguments</param>
             <param name= "varArgsIn">Array of Object representing variable input
             arguments</param>
            
        </member>
        <member name="M:mPhysNative.Class1.movingBlock">
             <summary>
             Provides a single output, 0-input Objectinterface to the movingBlock M-function.
             </summary>
             <remarks>
             M-Documentation:
             use a boxcar filter of length windowSize points on inData
             filteredData = movingAverage(rawData, windowSize);
             defaults:
             windowSize = 10 points
             </remarks>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.movingBlock(System.Object)">
             <summary>
             Provides a single output, 1-input Objectinterface to the movingBlock M-function.
             </summary>
             <remarks>
             M-Documentation:
             use a boxcar filter of length windowSize points on inData
             filteredData = movingAverage(rawData, windowSize);
             defaults:
             windowSize = 10 points
             </remarks>
             <param name="inData_in1">Input argument #1</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.movingBlock(System.Object,System.Object)">
             <summary>
             Provides a single output, 2-input Objectinterface to the movingBlock M-function.
             </summary>
             <remarks>
             M-Documentation:
             use a boxcar filter of length windowSize points on inData
             filteredData = movingAverage(rawData, windowSize);
             defaults:
             windowSize = 10 points
             </remarks>
             <param name="inData_in1">Input argument #1</param>
             <param name="windowSize">Input argument #2</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.movingBlock(System.Int32)">
             <summary>
             Provides the standard 0-input Object interface to the movingBlock M-function.
             </summary>
             <remarks>
             M-Documentation:
             use a boxcar filter of length windowSize points on inData
             filteredData = movingAverage(rawData, windowSize);
             defaults:
             windowSize = 10 points
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.movingBlock(System.Int32,System.Object)">
             <summary>
             Provides the standard 1-input Object interface to the movingBlock M-function.
             </summary>
             <remarks>
             M-Documentation:
             use a boxcar filter of length windowSize points on inData
             filteredData = movingAverage(rawData, windowSize);
             defaults:
             windowSize = 10 points
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="inData_in1">Input argument #1</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.movingBlock(System.Int32,System.Object,System.Object)">
             <summary>
             Provides the standard 2-input Object interface to the movingBlock M-function.
             </summary>
             <remarks>
             M-Documentation:
             use a boxcar filter of length windowSize points on inData
             filteredData = movingAverage(rawData, windowSize);
             defaults:
             windowSize = 10 points
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="inData_in1">Input argument #1</param>
             <param name="windowSize">Input argument #2</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.movingBlock(System.Int32,System.Object[]@,System.Object[],System.Object[])">
             <summary>
             Provides an interface for the movingBlock function in which the input and output
             arguments are specified as an array of Objects.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             M-Documentation:
             use a boxcar filter of length windowSize points on inData
             filteredData = movingAverage(rawData, windowSize);
             defaults:
             windowSize = 10 points
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of Object output arguments</param>
             <param name= "argsIn">Array of Object input arguments</param>
             <param name= "varArgsIn">Array of Object representing variable input
             arguments</param>
            
        </member>
        <member name="M:mPhysNative.Class1.msec2point">
             <summary>
             Provides a single output, 0-input Objectinterface to the msec2point M-function.
             </summary>
             <remarks>
             </remarks>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.msec2point(System.Object)">
             <summary>
             Provides a single output, 1-input Objectinterface to the msec2point M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="inString">Input argument #1</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.msec2point(System.Object,System.Object)">
             <summary>
             Provides a single output, 2-input Objectinterface to the msec2point M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="inString">Input argument #1</param>
             <param name="pointsPerMsec">Input argument #2</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.msec2point(System.Object,System.Object,System.Object)">
             <summary>
             Provides a single output, 3-input Objectinterface to the msec2point M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="inString">Input argument #1</param>
             <param name="pointsPerMsec">Input argument #2</param>
             <param name="firstTime">Input argument #3</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.msec2point(System.Int32)">
             <summary>
             Provides the standard 0-input Object interface to the msec2point M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.msec2point(System.Int32,System.Object)">
             <summary>
             Provides the standard 1-input Object interface to the msec2point M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="inString">Input argument #1</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.msec2point(System.Int32,System.Object,System.Object)">
             <summary>
             Provides the standard 2-input Object interface to the msec2point M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="inString">Input argument #1</param>
             <param name="pointsPerMsec">Input argument #2</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.msec2point(System.Int32,System.Object,System.Object,System.Object)">
             <summary>
             Provides the standard 3-input Object interface to the msec2point M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="inString">Input argument #1</param>
             <param name="pointsPerMsec">Input argument #2</param>
             <param name="firstTime">Input argument #3</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.msec2point(System.Int32,System.Object[]@,System.Object[],System.Object[])">
             <summary>
             Provides an interface for the msec2point function in which the input and output
             arguments are specified as an array of Objects.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of Object output arguments</param>
             <param name= "argsIn">Array of Object input arguments</param>
             <param name= "varArgsIn">Array of Object representing variable input
             arguments</param>
            
        </member>
        <member name="M:mPhysNative.Class1.MTEO">
             <summary>
             Provides a single output, 0-input Objectinterface to the MTEO M-function.
             </summary>
             <remarks>
             M-Documentation:
             after Choi and Kim, Electronics Letters, 38(12) 2002, 541-3 and
             Choi, Jung, and Kim, IEEE Transactions on Biomedical Engineering, 53(4), 2006,
             738-746
             spikeLocations = MTEO(rawData, k-teo values, threshold, windows);
             filteredData = MTEO(rawData, k-teo values);
             for multiple windows (as rows) the output data is a column vector of
             number of spikes in each window
             defaults:
             k-teo values = 14;
             threshold = 0: 3 * gaussian estimate of noise maximum
             threshold &lt; 0: threshold * gaussian estimate of noise maximum
             threshold > 0: threshold
             windows is [1 length(rawData)];
             </remarks>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.MTEO(System.Object)">
             <summary>
             Provides a single output, 1-input Objectinterface to the MTEO M-function.
             </summary>
             <remarks>
             M-Documentation:
             after Choi and Kim, Electronics Letters, 38(12) 2002, 541-3 and
             Choi, Jung, and Kim, IEEE Transactions on Biomedical Engineering, 53(4), 2006,
             738-746
             spikeLocations = MTEO(rawData, k-teo values, threshold, windows);
             filteredData = MTEO(rawData, k-teo values);
             for multiple windows (as rows) the output data is a column vector of
             number of spikes in each window
             defaults:
             k-teo values = 14;
             threshold = 0: 3 * gaussian estimate of noise maximum
             threshold &lt; 0: threshold * gaussian estimate of noise maximum
             threshold > 0: threshold
             windows is [1 length(rawData)];
             </remarks>
             <param name="inData">Input argument #1</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.MTEO(System.Object,System.Object)">
             <summary>
             Provides a single output, 2-input Objectinterface to the MTEO M-function.
             </summary>
             <remarks>
             M-Documentation:
             after Choi and Kim, Electronics Letters, 38(12) 2002, 541-3 and
             Choi, Jung, and Kim, IEEE Transactions on Biomedical Engineering, 53(4), 2006,
             738-746
             spikeLocations = MTEO(rawData, k-teo values, threshold, windows);
             filteredData = MTEO(rawData, k-teo values);
             for multiple windows (as rows) the output data is a column vector of
             number of spikes in each window
             defaults:
             k-teo values = 14;
             threshold = 0: 3 * gaussian estimate of noise maximum
             threshold &lt; 0: threshold * gaussian estimate of noise maximum
             threshold > 0: threshold
             windows is [1 length(rawData)];
             </remarks>
             <param name="inData">Input argument #1</param>
             <param name="kData">Input argument #2</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.MTEO(System.Object,System.Object,System.Object)">
             <summary>
             Provides a single output, 3-input Objectinterface to the MTEO M-function.
             </summary>
             <remarks>
             M-Documentation:
             after Choi and Kim, Electronics Letters, 38(12) 2002, 541-3 and
             Choi, Jung, and Kim, IEEE Transactions on Biomedical Engineering, 53(4), 2006,
             738-746
             spikeLocations = MTEO(rawData, k-teo values, threshold, windows);
             filteredData = MTEO(rawData, k-teo values);
             for multiple windows (as rows) the output data is a column vector of
             number of spikes in each window
             defaults:
             k-teo values = 14;
             threshold = 0: 3 * gaussian estimate of noise maximum
             threshold &lt; 0: threshold * gaussian estimate of noise maximum
             threshold > 0: threshold
             windows is [1 length(rawData)];
             </remarks>
             <param name="inData">Input argument #1</param>
             <param name="kData">Input argument #2</param>
             <param name="threshold">Input argument #3</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.MTEO(System.Object,System.Object,System.Object,System.Object)">
             <summary>
             Provides a single output, 4-input Objectinterface to the MTEO M-function.
             </summary>
             <remarks>
             M-Documentation:
             after Choi and Kim, Electronics Letters, 38(12) 2002, 541-3 and
             Choi, Jung, and Kim, IEEE Transactions on Biomedical Engineering, 53(4), 2006,
             738-746
             spikeLocations = MTEO(rawData, k-teo values, threshold, windows);
             filteredData = MTEO(rawData, k-teo values);
             for multiple windows (as rows) the output data is a column vector of
             number of spikes in each window
             defaults:
             k-teo values = 14;
             threshold = 0: 3 * gaussian estimate of noise maximum
             threshold &lt; 0: threshold * gaussian estimate of noise maximum
             threshold > 0: threshold
             windows is [1 length(rawData)];
             </remarks>
             <param name="inData">Input argument #1</param>
             <param name="kData">Input argument #2</param>
             <param name="threshold">Input argument #3</param>
             <param name="windows">Input argument #4</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.MTEO(System.Int32)">
             <summary>
             Provides the standard 0-input Object interface to the MTEO M-function.
             </summary>
             <remarks>
             M-Documentation:
             after Choi and Kim, Electronics Letters, 38(12) 2002, 541-3 and
             Choi, Jung, and Kim, IEEE Transactions on Biomedical Engineering, 53(4), 2006,
             738-746
             spikeLocations = MTEO(rawData, k-teo values, threshold, windows);
             filteredData = MTEO(rawData, k-teo values);
             for multiple windows (as rows) the output data is a column vector of
             number of spikes in each window
             defaults:
             k-teo values = 14;
             threshold = 0: 3 * gaussian estimate of noise maximum
             threshold &lt; 0: threshold * gaussian estimate of noise maximum
             threshold > 0: threshold
             windows is [1 length(rawData)];
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.MTEO(System.Int32,System.Object)">
             <summary>
             Provides the standard 1-input Object interface to the MTEO M-function.
             </summary>
             <remarks>
             M-Documentation:
             after Choi and Kim, Electronics Letters, 38(12) 2002, 541-3 and
             Choi, Jung, and Kim, IEEE Transactions on Biomedical Engineering, 53(4), 2006,
             738-746
             spikeLocations = MTEO(rawData, k-teo values, threshold, windows);
             filteredData = MTEO(rawData, k-teo values);
             for multiple windows (as rows) the output data is a column vector of
             number of spikes in each window
             defaults:
             k-teo values = 14;
             threshold = 0: 3 * gaussian estimate of noise maximum
             threshold &lt; 0: threshold * gaussian estimate of noise maximum
             threshold > 0: threshold
             windows is [1 length(rawData)];
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="inData">Input argument #1</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.MTEO(System.Int32,System.Object,System.Object)">
             <summary>
             Provides the standard 2-input Object interface to the MTEO M-function.
             </summary>
             <remarks>
             M-Documentation:
             after Choi and Kim, Electronics Letters, 38(12) 2002, 541-3 and
             Choi, Jung, and Kim, IEEE Transactions on Biomedical Engineering, 53(4), 2006,
             738-746
             spikeLocations = MTEO(rawData, k-teo values, threshold, windows);
             filteredData = MTEO(rawData, k-teo values);
             for multiple windows (as rows) the output data is a column vector of
             number of spikes in each window
             defaults:
             k-teo values = 14;
             threshold = 0: 3 * gaussian estimate of noise maximum
             threshold &lt; 0: threshold * gaussian estimate of noise maximum
             threshold > 0: threshold
             windows is [1 length(rawData)];
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="inData">Input argument #1</param>
             <param name="kData">Input argument #2</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.MTEO(System.Int32,System.Object,System.Object,System.Object)">
             <summary>
             Provides the standard 3-input Object interface to the MTEO M-function.
             </summary>
             <remarks>
             M-Documentation:
             after Choi and Kim, Electronics Letters, 38(12) 2002, 541-3 and
             Choi, Jung, and Kim, IEEE Transactions on Biomedical Engineering, 53(4), 2006,
             738-746
             spikeLocations = MTEO(rawData, k-teo values, threshold, windows);
             filteredData = MTEO(rawData, k-teo values);
             for multiple windows (as rows) the output data is a column vector of
             number of spikes in each window
             defaults:
             k-teo values = 14;
             threshold = 0: 3 * gaussian estimate of noise maximum
             threshold &lt; 0: threshold * gaussian estimate of noise maximum
             threshold > 0: threshold
             windows is [1 length(rawData)];
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="inData">Input argument #1</param>
             <param name="kData">Input argument #2</param>
             <param name="threshold">Input argument #3</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.MTEO(System.Int32,System.Object,System.Object,System.Object,System.Object)">
             <summary>
             Provides the standard 4-input Object interface to the MTEO M-function.
             </summary>
             <remarks>
             M-Documentation:
             after Choi and Kim, Electronics Letters, 38(12) 2002, 541-3 and
             Choi, Jung, and Kim, IEEE Transactions on Biomedical Engineering, 53(4), 2006,
             738-746
             spikeLocations = MTEO(rawData, k-teo values, threshold, windows);
             filteredData = MTEO(rawData, k-teo values);
             for multiple windows (as rows) the output data is a column vector of
             number of spikes in each window
             defaults:
             k-teo values = 14;
             threshold = 0: 3 * gaussian estimate of noise maximum
             threshold &lt; 0: threshold * gaussian estimate of noise maximum
             threshold > 0: threshold
             windows is [1 length(rawData)];
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="inData">Input argument #1</param>
             <param name="kData">Input argument #2</param>
             <param name="threshold">Input argument #3</param>
             <param name="windows">Input argument #4</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.MTEO(System.Int32,System.Object[]@,System.Object[],System.Object[])">
             <summary>
             Provides an interface for the MTEO function in which the input and output
             arguments are specified as an array of Objects.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             M-Documentation:
             after Choi and Kim, Electronics Letters, 38(12) 2002, 541-3 and
             Choi, Jung, and Kim, IEEE Transactions on Biomedical Engineering, 53(4), 2006,
             738-746
             spikeLocations = MTEO(rawData, k-teo values, threshold, windows);
             filteredData = MTEO(rawData, k-teo values);
             for multiple windows (as rows) the output data is a column vector of
             number of spikes in each window
             defaults:
             k-teo values = 14;
             threshold = 0: 3 * gaussian estimate of noise maximum
             threshold &lt; 0: threshold * gaussian estimate of noise maximum
             threshold > 0: threshold
             windows is [1 length(rawData)];
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of Object output arguments</param>
             <param name= "argsIn">Array of Object input arguments</param>
             <param name= "varArgsIn">Array of Object representing variable input
             arguments</param>
            
        </member>
        <member name="M:mPhysNative.Class1.MTEOBen">
             <summary>
             Provides a single output, 0-input Objectinterface to the MTEOBen M-function.
             </summary>
             <remarks>
             M-Documentation:
             after Choi and Kim, Electronics Letters, 38(12) 2002, 541-3 and
             Choi, Jung, and Kim, IEEE Transactions on Biomedical Engineering, 53(4), 2006,
             738-746
             spikeLocations = MTEO(rawData, k-teo values, threshold, windows);
             filteredData = MTEO(rawData, k-teo values);
             for multiple windows (as rows) the output data is a column vector of
             number of spikes in each window
             defaults:
             k-teo values = 14;
             threshold = 0: 3 * gaussian estimate of noise maximum
             threshold &lt; 0: threshold * gaussian estimate of noise maximum
             threshold > 0: threshold
             windows is [1 length(rawData)];
             </remarks>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.MTEOBen(System.Object)">
             <summary>
             Provides a single output, 1-input Objectinterface to the MTEOBen M-function.
             </summary>
             <remarks>
             M-Documentation:
             after Choi and Kim, Electronics Letters, 38(12) 2002, 541-3 and
             Choi, Jung, and Kim, IEEE Transactions on Biomedical Engineering, 53(4), 2006,
             738-746
             spikeLocations = MTEO(rawData, k-teo values, threshold, windows);
             filteredData = MTEO(rawData, k-teo values);
             for multiple windows (as rows) the output data is a column vector of
             number of spikes in each window
             defaults:
             k-teo values = 14;
             threshold = 0: 3 * gaussian estimate of noise maximum
             threshold &lt; 0: threshold * gaussian estimate of noise maximum
             threshold > 0: threshold
             windows is [1 length(rawData)];
             </remarks>
             <param name="inData">Input argument #1</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.MTEOBen(System.Object,System.Object)">
             <summary>
             Provides a single output, 2-input Objectinterface to the MTEOBen M-function.
             </summary>
             <remarks>
             M-Documentation:
             after Choi and Kim, Electronics Letters, 38(12) 2002, 541-3 and
             Choi, Jung, and Kim, IEEE Transactions on Biomedical Engineering, 53(4), 2006,
             738-746
             spikeLocations = MTEO(rawData, k-teo values, threshold, windows);
             filteredData = MTEO(rawData, k-teo values);
             for multiple windows (as rows) the output data is a column vector of
             number of spikes in each window
             defaults:
             k-teo values = 14;
             threshold = 0: 3 * gaussian estimate of noise maximum
             threshold &lt; 0: threshold * gaussian estimate of noise maximum
             threshold > 0: threshold
             windows is [1 length(rawData)];
             </remarks>
             <param name="inData">Input argument #1</param>
             <param name="kData">Input argument #2</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.MTEOBen(System.Object,System.Object,System.Object)">
             <summary>
             Provides a single output, 3-input Objectinterface to the MTEOBen M-function.
             </summary>
             <remarks>
             M-Documentation:
             after Choi and Kim, Electronics Letters, 38(12) 2002, 541-3 and
             Choi, Jung, and Kim, IEEE Transactions on Biomedical Engineering, 53(4), 2006,
             738-746
             spikeLocations = MTEO(rawData, k-teo values, threshold, windows);
             filteredData = MTEO(rawData, k-teo values);
             for multiple windows (as rows) the output data is a column vector of
             number of spikes in each window
             defaults:
             k-teo values = 14;
             threshold = 0: 3 * gaussian estimate of noise maximum
             threshold &lt; 0: threshold * gaussian estimate of noise maximum
             threshold > 0: threshold
             windows is [1 length(rawData)];
             </remarks>
             <param name="inData">Input argument #1</param>
             <param name="kData">Input argument #2</param>
             <param name="threshold">Input argument #3</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.MTEOBen(System.Object,System.Object,System.Object,System.Object)">
             <summary>
             Provides a single output, 4-input Objectinterface to the MTEOBen M-function.
             </summary>
             <remarks>
             M-Documentation:
             after Choi and Kim, Electronics Letters, 38(12) 2002, 541-3 and
             Choi, Jung, and Kim, IEEE Transactions on Biomedical Engineering, 53(4), 2006,
             738-746
             spikeLocations = MTEO(rawData, k-teo values, threshold, windows);
             filteredData = MTEO(rawData, k-teo values);
             for multiple windows (as rows) the output data is a column vector of
             number of spikes in each window
             defaults:
             k-teo values = 14;
             threshold = 0: 3 * gaussian estimate of noise maximum
             threshold &lt; 0: threshold * gaussian estimate of noise maximum
             threshold > 0: threshold
             windows is [1 length(rawData)];
             </remarks>
             <param name="inData">Input argument #1</param>
             <param name="kData">Input argument #2</param>
             <param name="threshold">Input argument #3</param>
             <param name="windows">Input argument #4</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.MTEOBen(System.Int32)">
             <summary>
             Provides the standard 0-input Object interface to the MTEOBen M-function.
             </summary>
             <remarks>
             M-Documentation:
             after Choi and Kim, Electronics Letters, 38(12) 2002, 541-3 and
             Choi, Jung, and Kim, IEEE Transactions on Biomedical Engineering, 53(4), 2006,
             738-746
             spikeLocations = MTEO(rawData, k-teo values, threshold, windows);
             filteredData = MTEO(rawData, k-teo values);
             for multiple windows (as rows) the output data is a column vector of
             number of spikes in each window
             defaults:
             k-teo values = 14;
             threshold = 0: 3 * gaussian estimate of noise maximum
             threshold &lt; 0: threshold * gaussian estimate of noise maximum
             threshold > 0: threshold
             windows is [1 length(rawData)];
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.MTEOBen(System.Int32,System.Object)">
             <summary>
             Provides the standard 1-input Object interface to the MTEOBen M-function.
             </summary>
             <remarks>
             M-Documentation:
             after Choi and Kim, Electronics Letters, 38(12) 2002, 541-3 and
             Choi, Jung, and Kim, IEEE Transactions on Biomedical Engineering, 53(4), 2006,
             738-746
             spikeLocations = MTEO(rawData, k-teo values, threshold, windows);
             filteredData = MTEO(rawData, k-teo values);
             for multiple windows (as rows) the output data is a column vector of
             number of spikes in each window
             defaults:
             k-teo values = 14;
             threshold = 0: 3 * gaussian estimate of noise maximum
             threshold &lt; 0: threshold * gaussian estimate of noise maximum
             threshold > 0: threshold
             windows is [1 length(rawData)];
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="inData">Input argument #1</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.MTEOBen(System.Int32,System.Object,System.Object)">
             <summary>
             Provides the standard 2-input Object interface to the MTEOBen M-function.
             </summary>
             <remarks>
             M-Documentation:
             after Choi and Kim, Electronics Letters, 38(12) 2002, 541-3 and
             Choi, Jung, and Kim, IEEE Transactions on Biomedical Engineering, 53(4), 2006,
             738-746
             spikeLocations = MTEO(rawData, k-teo values, threshold, windows);
             filteredData = MTEO(rawData, k-teo values);
             for multiple windows (as rows) the output data is a column vector of
             number of spikes in each window
             defaults:
             k-teo values = 14;
             threshold = 0: 3 * gaussian estimate of noise maximum
             threshold &lt; 0: threshold * gaussian estimate of noise maximum
             threshold > 0: threshold
             windows is [1 length(rawData)];
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="inData">Input argument #1</param>
             <param name="kData">Input argument #2</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.MTEOBen(System.Int32,System.Object,System.Object,System.Object)">
             <summary>
             Provides the standard 3-input Object interface to the MTEOBen M-function.
             </summary>
             <remarks>
             M-Documentation:
             after Choi and Kim, Electronics Letters, 38(12) 2002, 541-3 and
             Choi, Jung, and Kim, IEEE Transactions on Biomedical Engineering, 53(4), 2006,
             738-746
             spikeLocations = MTEO(rawData, k-teo values, threshold, windows);
             filteredData = MTEO(rawData, k-teo values);
             for multiple windows (as rows) the output data is a column vector of
             number of spikes in each window
             defaults:
             k-teo values = 14;
             threshold = 0: 3 * gaussian estimate of noise maximum
             threshold &lt; 0: threshold * gaussian estimate of noise maximum
             threshold > 0: threshold
             windows is [1 length(rawData)];
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="inData">Input argument #1</param>
             <param name="kData">Input argument #2</param>
             <param name="threshold">Input argument #3</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.MTEOBen(System.Int32,System.Object,System.Object,System.Object,System.Object)">
             <summary>
             Provides the standard 4-input Object interface to the MTEOBen M-function.
             </summary>
             <remarks>
             M-Documentation:
             after Choi and Kim, Electronics Letters, 38(12) 2002, 541-3 and
             Choi, Jung, and Kim, IEEE Transactions on Biomedical Engineering, 53(4), 2006,
             738-746
             spikeLocations = MTEO(rawData, k-teo values, threshold, windows);
             filteredData = MTEO(rawData, k-teo values);
             for multiple windows (as rows) the output data is a column vector of
             number of spikes in each window
             defaults:
             k-teo values = 14;
             threshold = 0: 3 * gaussian estimate of noise maximum
             threshold &lt; 0: threshold * gaussian estimate of noise maximum
             threshold > 0: threshold
             windows is [1 length(rawData)];
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="inData">Input argument #1</param>
             <param name="kData">Input argument #2</param>
             <param name="threshold">Input argument #3</param>
             <param name="windows">Input argument #4</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.MTEOBen(System.Int32,System.Object[]@,System.Object[],System.Object[])">
             <summary>
             Provides an interface for the MTEOBen function in which the input and output
             arguments are specified as an array of Objects.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             M-Documentation:
             after Choi and Kim, Electronics Letters, 38(12) 2002, 541-3 and
             Choi, Jung, and Kim, IEEE Transactions on Biomedical Engineering, 53(4), 2006,
             738-746
             spikeLocations = MTEO(rawData, k-teo values, threshold, windows);
             filteredData = MTEO(rawData, k-teo values);
             for multiple windows (as rows) the output data is a column vector of
             number of spikes in each window
             defaults:
             k-teo values = 14;
             threshold = 0: 3 * gaussian estimate of noise maximum
             threshold &lt; 0: threshold * gaussian estimate of noise maximum
             threshold > 0: threshold
             windows is [1 length(rawData)];
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of Object output arguments</param>
             <param name= "argsIn">Array of Object input arguments</param>
             <param name= "varArgsIn">Array of Object representing variable input
             arguments</param>
            
        </member>
        <member name="M:mPhysNative.Class1.newScale">
             <summary>
             Provides a void output, 0-input Objectinterface to the newScale M-function.
             </summary>
             <remarks>
             M-Documentation:
             update all axes
             </remarks>
            
        </member>
        <member name="M:mPhysNative.Class1.newScale(System.Object)">
             <summary>
             Provides a void output, 1-input Objectinterface to the newScale M-function.
             </summary>
             <remarks>
             M-Documentation:
             update all axes
             </remarks>
             <param name="objectHandle">Input argument #1</param>
            
        </member>
        <member name="M:mPhysNative.Class1.newScale(System.Object,System.Object)">
             <summary>
             Provides a void output, 2-input Objectinterface to the newScale M-function.
             </summary>
             <remarks>
             M-Documentation:
             update all axes
             </remarks>
             <param name="objectHandle">Input argument #1</param>
             <param name="eventInfo">Input argument #2</param>
            
        </member>
        <member name="M:mPhysNative.Class1.newScale(System.Int32)">
             <summary>
             Provides the standard 0-input Object interface to the newScale M-function.
             </summary>
             <remarks>
             M-Documentation:
             update all axes
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.newScale(System.Int32,System.Object)">
             <summary>
             Provides the standard 1-input Object interface to the newScale M-function.
             </summary>
             <remarks>
             M-Documentation:
             update all axes
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="objectHandle">Input argument #1</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.newScale(System.Int32,System.Object,System.Object)">
             <summary>
             Provides the standard 2-input Object interface to the newScale M-function.
             </summary>
             <remarks>
             M-Documentation:
             update all axes
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="objectHandle">Input argument #1</param>
             <param name="eventInfo">Input argument #2</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.newScale(System.Int32,System.Object[]@,System.Object[],System.Object[])">
             <summary>
             Provides an interface for the newScale function in which the input and output
             arguments are specified as an array of Objects.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             M-Documentation:
             update all axes
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of Object output arguments</param>
             <param name= "argsIn">Array of Object input arguments</param>
             <param name= "varArgsIn">Array of Object representing variable input
             arguments</param>
            
        </member>
        <member name="M:mPhysNative.Class1.newScope">
             <summary>
             Provides a single output, 0-input Objectinterface to the newScope M-function.
             </summary>
             <remarks>
             M-Documentation:
             display data channels in a scrollable window
             newScope(yData, protocol)
             newScope(yData, protocol, figureHandle)
             newScope({yDataGroup1, yDataGroup2})
             newScope({yDataGroup1, yDataGroup2}, [xData], [channelNames], [figureHandle])
             where [] denote an optional arguement (order does not matter)
             Example:
             newScope({[tan(1.1:.01:11); cos(.1:.01:10)], [tan(.1:.01:10); cos(.1:.01:10)]},
             {'Dogs', 'Cats'});
             The reason that these scheme seems so odd is that it allows fewer copies
             of the data to be stored in the workspace so that you can work with
             larger data sets.  This is accomplished because Matlab cleverly holds
             onto a pointer to the copy of the input when there are subfunctions
             addressing the data instead of creating another copy.  Doubly cleverly,
             if the input data is cleared from its native location (probably the base
             workspace) then Matlab doesn't clear it from memory so that the function
             can still refer to it.  However, as soon as the last subfunction callback
             that uses the data is disconnected from the figure Matlab will delete the
             data set, allowing the user to clear the data copy at will be removing
             callbacks.
             </remarks>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.newScope(System.Object[])">
             <summary>
             Provides a single output, 1-input Objectinterface to the newScope M-function.
             </summary>
             <remarks>
             M-Documentation:
             display data channels in a scrollable window
             newScope(yData, protocol)
             newScope(yData, protocol, figureHandle)
             newScope({yDataGroup1, yDataGroup2})
             newScope({yDataGroup1, yDataGroup2}, [xData], [channelNames], [figureHandle])
             where [] denote an optional arguement (order does not matter)
             Example:
             newScope({[tan(1.1:.01:11); cos(.1:.01:10)], [tan(.1:.01:10); cos(.1:.01:10)]},
             {'Dogs', 'Cats'});
             The reason that these scheme seems so odd is that it allows fewer copies
             of the data to be stored in the workspace so that you can work with
             larger data sets.  This is accomplished because Matlab cleverly holds
             onto a pointer to the copy of the input when there are subfunctions
             addressing the data instead of creating another copy.  Doubly cleverly,
             if the input data is cleared from its native location (probably the base
             workspace) then Matlab doesn't clear it from memory so that the function
             can still refer to it.  However, as soon as the last subfunction callback
             that uses the data is disconnected from the figure Matlab will delete the
             data set, allowing the user to clear the data copy at will be removing
             callbacks.
             </remarks>
             <param name="varargin">Array of Objects representing the input arguments 1
             through varargin.length</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.newScope(System.Int32)">
             <summary>
             Provides the standard 0-input Object interface to the newScope M-function.
             </summary>
             <remarks>
             M-Documentation:
             display data channels in a scrollable window
             newScope(yData, protocol)
             newScope(yData, protocol, figureHandle)
             newScope({yDataGroup1, yDataGroup2})
             newScope({yDataGroup1, yDataGroup2}, [xData], [channelNames], [figureHandle])
             where [] denote an optional arguement (order does not matter)
             Example:
             newScope({[tan(1.1:.01:11); cos(.1:.01:10)], [tan(.1:.01:10); cos(.1:.01:10)]},
             {'Dogs', 'Cats'});
             The reason that these scheme seems so odd is that it allows fewer copies
             of the data to be stored in the workspace so that you can work with
             larger data sets.  This is accomplished because Matlab cleverly holds
             onto a pointer to the copy of the input when there are subfunctions
             addressing the data instead of creating another copy.  Doubly cleverly,
             if the input data is cleared from its native location (probably the base
             workspace) then Matlab doesn't clear it from memory so that the function
             can still refer to it.  However, as soon as the last subfunction callback
             that uses the data is disconnected from the figure Matlab will delete the
             data set, allowing the user to clear the data copy at will be removing
             callbacks.
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.newScope(System.Int32,System.Object[])">
             <summary>
             Provides the standard 1-input Object interface to the newScope M-function.
             </summary>
             <remarks>
             M-Documentation:
             display data channels in a scrollable window
             newScope(yData, protocol)
             newScope(yData, protocol, figureHandle)
             newScope({yDataGroup1, yDataGroup2})
             newScope({yDataGroup1, yDataGroup2}, [xData], [channelNames], [figureHandle])
             where [] denote an optional arguement (order does not matter)
             Example:
             newScope({[tan(1.1:.01:11); cos(.1:.01:10)], [tan(.1:.01:10); cos(.1:.01:10)]},
             {'Dogs', 'Cats'});
             The reason that these scheme seems so odd is that it allows fewer copies
             of the data to be stored in the workspace so that you can work with
             larger data sets.  This is accomplished because Matlab cleverly holds
             onto a pointer to the copy of the input when there are subfunctions
             addressing the data instead of creating another copy.  Doubly cleverly,
             if the input data is cleared from its native location (probably the base
             workspace) then Matlab doesn't clear it from memory so that the function
             can still refer to it.  However, as soon as the last subfunction callback
             that uses the data is disconnected from the figure Matlab will delete the
             data set, allowing the user to clear the data copy at will be removing
             callbacks.
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="varargin">Array of Objects representing the input arguments 1
             through varargin.length</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.newScope(System.Int32,System.Object[]@,System.Object[],System.Object[])">
             <summary>
             Provides an interface for the newScope function in which the input and output
             arguments are specified as an array of Objects.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             M-Documentation:
             display data channels in a scrollable window
             newScope(yData, protocol)
             newScope(yData, protocol, figureHandle)
             newScope({yDataGroup1, yDataGroup2})
             newScope({yDataGroup1, yDataGroup2}, [xData], [channelNames], [figureHandle])
             where [] denote an optional arguement (order does not matter)
             Example:
             newScope({[tan(1.1:.01:11); cos(.1:.01:10)], [tan(.1:.01:10); cos(.1:.01:10)]},
             {'Dogs', 'Cats'});
             The reason that these scheme seems so odd is that it allows fewer copies
             of the data to be stored in the workspace so that you can work with
             larger data sets.  This is accomplished because Matlab cleverly holds
             onto a pointer to the copy of the input when there are subfunctions
             addressing the data instead of creating another copy.  Doubly cleverly,
             if the input data is cleared from its native location (probably the base
             workspace) then Matlab doesn't clear it from memory so that the function
             can still refer to it.  However, as soon as the last subfunction callback
             that uses the data is disconnected from the figure Matlab will delete the
             data set, allowing the user to clear the data copy at will be removing
             callbacks.
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of Object output arguments</param>
             <param name= "argsIn">Array of Object input arguments</param>
             <param name= "varArgsIn">Array of Object representing variable input
             arguments</param>
            
        </member>
        <member name="M:mPhysNative.Class1.normalizeMatrix">
             <summary>
             Provides a single output, 0-input Objectinterface to the normalizeMatrix
             M-function.
             </summary>
             <remarks>
             M-Documentation:
             normalize a matrix along a given dimension
             dim = 0 does a global normalization
             outMatrix = normalizeMatrix(inMatrix, dim);
             defaults:
             dim = 2
             </remarks>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.normalizeMatrix(System.Object)">
             <summary>
             Provides a single output, 1-input Objectinterface to the normalizeMatrix
             M-function.
             </summary>
             <remarks>
             M-Documentation:
             normalize a matrix along a given dimension
             dim = 0 does a global normalization
             outMatrix = normalizeMatrix(inMatrix, dim);
             defaults:
             dim = 2
             </remarks>
             <param name="inMatrix">Input argument #1</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.normalizeMatrix(System.Object,System.Object)">
             <summary>
             Provides a single output, 2-input Objectinterface to the normalizeMatrix
             M-function.
             </summary>
             <remarks>
             M-Documentation:
             normalize a matrix along a given dimension
             dim = 0 does a global normalization
             outMatrix = normalizeMatrix(inMatrix, dim);
             defaults:
             dim = 2
             </remarks>
             <param name="inMatrix">Input argument #1</param>
             <param name="dim">Input argument #2</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.normalizeMatrix(System.Int32)">
             <summary>
             Provides the standard 0-input Object interface to the normalizeMatrix M-function.
             </summary>
             <remarks>
             M-Documentation:
             normalize a matrix along a given dimension
             dim = 0 does a global normalization
             outMatrix = normalizeMatrix(inMatrix, dim);
             defaults:
             dim = 2
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.normalizeMatrix(System.Int32,System.Object)">
             <summary>
             Provides the standard 1-input Object interface to the normalizeMatrix M-function.
             </summary>
             <remarks>
             M-Documentation:
             normalize a matrix along a given dimension
             dim = 0 does a global normalization
             outMatrix = normalizeMatrix(inMatrix, dim);
             defaults:
             dim = 2
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="inMatrix">Input argument #1</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.normalizeMatrix(System.Int32,System.Object,System.Object)">
             <summary>
             Provides the standard 2-input Object interface to the normalizeMatrix M-function.
             </summary>
             <remarks>
             M-Documentation:
             normalize a matrix along a given dimension
             dim = 0 does a global normalization
             outMatrix = normalizeMatrix(inMatrix, dim);
             defaults:
             dim = 2
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="inMatrix">Input argument #1</param>
             <param name="dim">Input argument #2</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.normalizeMatrix(System.Int32,System.Object[]@,System.Object[],System.Object[])">
             <summary>
             Provides an interface for the normalizeMatrix function in which the input and
             output
             arguments are specified as an array of Objects.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             M-Documentation:
             normalize a matrix along a given dimension
             dim = 0 does a global normalization
             outMatrix = normalizeMatrix(inMatrix, dim);
             defaults:
             dim = 2
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of Object output arguments</param>
             <param name= "argsIn">Array of Object input arguments</param>
             <param name= "varArgsIn">Array of Object representing variable input
             arguments</param>
            
        </member>
        <member name="M:mPhysNative.Class1.notchFilter">
             <summary>
             Provides a single output, 0-input Objectinterface to the notchFilter M-function.
             </summary>
             <remarks>
             M-Documentation:
             notch filters data
             filteredData = notchFilter(rawData, samplingFrequency, values);
             if values is nan(s) then the function will execute a gradient search of
             correlation around 60 Hz (and multiples thereof) to find maximum
             correlation in the input signal.
             defaults:
             samplingFrequency = 5000 Hz
             values = 60.023 Hz
             </remarks>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.notchFilter(System.Object)">
             <summary>
             Provides a single output, 1-input Objectinterface to the notchFilter M-function.
             </summary>
             <remarks>
             M-Documentation:
             notch filters data
             filteredData = notchFilter(rawData, samplingFrequency, values);
             if values is nan(s) then the function will execute a gradient search of
             correlation around 60 Hz (and multiples thereof) to find maximum
             correlation in the input signal.
             defaults:
             samplingFrequency = 5000 Hz
             values = 60.023 Hz
             </remarks>
             <param name="inData">Input argument #1</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.notchFilter(System.Object,System.Object)">
             <summary>
             Provides a single output, 2-input Objectinterface to the notchFilter M-function.
             </summary>
             <remarks>
             M-Documentation:
             notch filters data
             filteredData = notchFilter(rawData, samplingFrequency, values);
             if values is nan(s) then the function will execute a gradient search of
             correlation around 60 Hz (and multiples thereof) to find maximum
             correlation in the input signal.
             defaults:
             samplingFrequency = 5000 Hz
             values = 60.023 Hz
             </remarks>
             <param name="inData">Input argument #1</param>
             <param name="samplingFreq">Input argument #2</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.notchFilter(System.Object,System.Object,System.Object)">
             <summary>
             Provides a single output, 3-input Objectinterface to the notchFilter M-function.
             </summary>
             <remarks>
             M-Documentation:
             notch filters data
             filteredData = notchFilter(rawData, samplingFrequency, values);
             if values is nan(s) then the function will execute a gradient search of
             correlation around 60 Hz (and multiples thereof) to find maximum
             correlation in the input signal.
             defaults:
             samplingFrequency = 5000 Hz
             values = 60.023 Hz
             </remarks>
             <param name="inData">Input argument #1</param>
             <param name="samplingFreq">Input argument #2</param>
             <param name="values">Input argument #3</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.notchFilter(System.Int32)">
             <summary>
             Provides the standard 0-input Object interface to the notchFilter M-function.
             </summary>
             <remarks>
             M-Documentation:
             notch filters data
             filteredData = notchFilter(rawData, samplingFrequency, values);
             if values is nan(s) then the function will execute a gradient search of
             correlation around 60 Hz (and multiples thereof) to find maximum
             correlation in the input signal.
             defaults:
             samplingFrequency = 5000 Hz
             values = 60.023 Hz
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.notchFilter(System.Int32,System.Object)">
             <summary>
             Provides the standard 1-input Object interface to the notchFilter M-function.
             </summary>
             <remarks>
             M-Documentation:
             notch filters data
             filteredData = notchFilter(rawData, samplingFrequency, values);
             if values is nan(s) then the function will execute a gradient search of
             correlation around 60 Hz (and multiples thereof) to find maximum
             correlation in the input signal.
             defaults:
             samplingFrequency = 5000 Hz
             values = 60.023 Hz
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="inData">Input argument #1</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.notchFilter(System.Int32,System.Object,System.Object)">
             <summary>
             Provides the standard 2-input Object interface to the notchFilter M-function.
             </summary>
             <remarks>
             M-Documentation:
             notch filters data
             filteredData = notchFilter(rawData, samplingFrequency, values);
             if values is nan(s) then the function will execute a gradient search of
             correlation around 60 Hz (and multiples thereof) to find maximum
             correlation in the input signal.
             defaults:
             samplingFrequency = 5000 Hz
             values = 60.023 Hz
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="inData">Input argument #1</param>
             <param name="samplingFreq">Input argument #2</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.notchFilter(System.Int32,System.Object,System.Object,System.Object)">
             <summary>
             Provides the standard 3-input Object interface to the notchFilter M-function.
             </summary>
             <remarks>
             M-Documentation:
             notch filters data
             filteredData = notchFilter(rawData, samplingFrequency, values);
             if values is nan(s) then the function will execute a gradient search of
             correlation around 60 Hz (and multiples thereof) to find maximum
             correlation in the input signal.
             defaults:
             samplingFrequency = 5000 Hz
             values = 60.023 Hz
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="inData">Input argument #1</param>
             <param name="samplingFreq">Input argument #2</param>
             <param name="values">Input argument #3</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.notchFilter(System.Int32,System.Object[]@,System.Object[],System.Object[])">
             <summary>
             Provides an interface for the notchFilter function in which the input and output
             arguments are specified as an array of Objects.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             M-Documentation:
             notch filters data
             filteredData = notchFilter(rawData, samplingFrequency, values);
             if values is nan(s) then the function will execute a gradient search of
             correlation around 60 Hz (and multiples thereof) to find maximum
             correlation in the input signal.
             defaults:
             samplingFrequency = 5000 Hz
             values = 60.023 Hz
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of Object output arguments</param>
             <param name= "argsIn">Array of Object input arguments</param>
             <param name= "varArgsIn">Array of Object representing variable input
             arguments</param>
            
        </member>
        <member name="M:mPhysNative.Class1.oneSidedDeviation">
             <summary>
             Provides a single output, 0-input Objectinterface to the oneSidedDeviation
             M-function.
             </summary>
             <remarks>
             M-Documentation:
             use an outlier-insensitive deviation measure that assumes a mean of zero
             outValue = oneSidedDeviation(inData);
             </remarks>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.oneSidedDeviation(System.Object)">
             <summary>
             Provides a single output, 1-input Objectinterface to the oneSidedDeviation
             M-function.
             </summary>
             <remarks>
             M-Documentation:
             use an outlier-insensitive deviation measure that assumes a mean of zero
             outValue = oneSidedDeviation(inData);
             </remarks>
             <param name="inData">Input argument #1</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.oneSidedDeviation(System.Int32)">
             <summary>
             Provides the standard 0-input Object interface to the oneSidedDeviation
             M-function.
             </summary>
             <remarks>
             M-Documentation:
             use an outlier-insensitive deviation measure that assumes a mean of zero
             outValue = oneSidedDeviation(inData);
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.oneSidedDeviation(System.Int32,System.Object)">
             <summary>
             Provides the standard 1-input Object interface to the oneSidedDeviation
             M-function.
             </summary>
             <remarks>
             M-Documentation:
             use an outlier-insensitive deviation measure that assumes a mean of zero
             outValue = oneSidedDeviation(inData);
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="inData">Input argument #1</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.oneSidedDeviation(System.Int32,System.Object[]@,System.Object[],System.Object[])">
             <summary>
             Provides an interface for the oneSidedDeviation function in which the input and
             output
             arguments are specified as an array of Objects.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             M-Documentation:
             use an outlier-insensitive deviation measure that assumes a mean of zero
             outValue = oneSidedDeviation(inData);
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of Object output arguments</param>
             <param name= "argsIn">Array of Object input arguments</param>
             <param name= "varArgsIn">Array of Object representing variable input
             arguments</param>
            
        </member>
        <member name="M:mPhysNative.Class1.overlayPSPs">
             <summary>
             Provides a void output, 0-input Objectinterface to the overlayPSPs M-function.
             </summary>
             <remarks>
             M-Documentation:
             display the PSPs for a given trace overlayed
             </remarks>
            
        </member>
        <member name="M:mPhysNative.Class1.overlayPSPs(System.Object)">
             <summary>
             Provides a void output, 1-input Objectinterface to the overlayPSPs M-function.
             </summary>
             <remarks>
             M-Documentation:
             display the PSPs for a given trace overlayed
             </remarks>
             <param name="inData">Input argument #1</param>
            
        </member>
        <member name="M:mPhysNative.Class1.overlayPSPs(System.Object,System.Object)">
             <summary>
             Provides a void output, 2-input Objectinterface to the overlayPSPs M-function.
             </summary>
             <remarks>
             M-Documentation:
             display the PSPs for a given trace overlayed
             </remarks>
             <param name="inData">Input argument #1</param>
             <param name="timeWindow">Input argument #2</param>
            
        </member>
        <member name="M:mPhysNative.Class1.overlayPSPs(System.Object,System.Object,System.Object)">
             <summary>
             Provides a void output, 3-input Objectinterface to the overlayPSPs M-function.
             </summary>
             <remarks>
             M-Documentation:
             display the PSPs for a given trace overlayed
             </remarks>
             <param name="inData">Input argument #1</param>
             <param name="timeWindow">Input argument #2</param>
             <param name="startTimes">Input argument #3</param>
            
        </member>
        <member name="M:mPhysNative.Class1.overlayPSPs(System.Object,System.Object,System.Object,System.Object)">
             <summary>
             Provides a void output, 4-input Objectinterface to the overlayPSPs M-function.
             </summary>
             <remarks>
             M-Documentation:
             display the PSPs for a given trace overlayed
             </remarks>
             <param name="inData">Input argument #1</param>
             <param name="timeWindow">Input argument #2</param>
             <param name="startTimes">Input argument #3</param>
             <param name="timePerPoint">Input argument #4</param>
            
        </member>
        <member name="M:mPhysNative.Class1.overlayPSPs(System.Int32)">
             <summary>
             Provides the standard 0-input Object interface to the overlayPSPs M-function.
             </summary>
             <remarks>
             M-Documentation:
             display the PSPs for a given trace overlayed
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.overlayPSPs(System.Int32,System.Object)">
             <summary>
             Provides the standard 1-input Object interface to the overlayPSPs M-function.
             </summary>
             <remarks>
             M-Documentation:
             display the PSPs for a given trace overlayed
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="inData">Input argument #1</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.overlayPSPs(System.Int32,System.Object,System.Object)">
             <summary>
             Provides the standard 2-input Object interface to the overlayPSPs M-function.
             </summary>
             <remarks>
             M-Documentation:
             display the PSPs for a given trace overlayed
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="inData">Input argument #1</param>
             <param name="timeWindow">Input argument #2</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.overlayPSPs(System.Int32,System.Object,System.Object,System.Object)">
             <summary>
             Provides the standard 3-input Object interface to the overlayPSPs M-function.
             </summary>
             <remarks>
             M-Documentation:
             display the PSPs for a given trace overlayed
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="inData">Input argument #1</param>
             <param name="timeWindow">Input argument #2</param>
             <param name="startTimes">Input argument #3</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.overlayPSPs(System.Int32,System.Object,System.Object,System.Object,System.Object)">
             <summary>
             Provides the standard 4-input Object interface to the overlayPSPs M-function.
             </summary>
             <remarks>
             M-Documentation:
             display the PSPs for a given trace overlayed
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="inData">Input argument #1</param>
             <param name="timeWindow">Input argument #2</param>
             <param name="startTimes">Input argument #3</param>
             <param name="timePerPoint">Input argument #4</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.overlayPSPs(System.Int32,System.Object[]@,System.Object[],System.Object[])">
             <summary>
             Provides an interface for the overlayPSPs function in which the input and output
             arguments are specified as an array of Objects.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             M-Documentation:
             display the PSPs for a given trace overlayed
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of Object output arguments</param>
             <param name= "argsIn">Array of Object input arguments</param>
             <param name= "varArgsIn">Array of Object representing variable input
             arguments</param>
            
        </member>
        <member name="M:mPhysNative.Class1.plotAverageFreq">
             <summary>
             Provides a single output, 0-input Objectinterface to the plotAverageFreq
             M-function.
             </summary>
             <remarks>
             M-Documentation:
             get handles to the event traces
             </remarks>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.plotAverageFreq(System.Object[])">
             <summary>
             Provides a single output, 1-input Objectinterface to the plotAverageFreq
             M-function.
             </summary>
             <remarks>
             M-Documentation:
             get handles to the event traces
             </remarks>
             <param name="varargin">Array of Objects representing the input arguments 1
             through varargin.length</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.plotAverageFreq(System.Int32)">
             <summary>
             Provides the standard 0-input Object interface to the plotAverageFreq M-function.
             </summary>
             <remarks>
             M-Documentation:
             get handles to the event traces
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.plotAverageFreq(System.Int32,System.Object[])">
             <summary>
             Provides the standard 1-input Object interface to the plotAverageFreq M-function.
             </summary>
             <remarks>
             M-Documentation:
             get handles to the event traces
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="varargin">Array of Objects representing the input arguments 1
             through varargin.length</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.plotAverageFreq(System.Int32,System.Object[]@,System.Object[],System.Object[])">
             <summary>
             Provides an interface for the plotAverageFreq function in which the input and
             output
             arguments are specified as an array of Objects.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             M-Documentation:
             get handles to the event traces
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of Object output arguments</param>
             <param name= "argsIn">Array of Object input arguments</param>
             <param name= "varArgsIn">Array of Object representing variable input
             arguments</param>
            
        </member>
        <member name="M:mPhysNative.Class1.plotFreq">
             <summary>
             Provides a single output, 0-input Objectinterface to the plotFreq M-function.
             </summary>
             <remarks>
             M-Documentation:
             get handles to the event traces
             </remarks>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.plotFreq(System.Object[])">
             <summary>
             Provides a single output, 1-input Objectinterface to the plotFreq M-function.
             </summary>
             <remarks>
             M-Documentation:
             get handles to the event traces
             </remarks>
             <param name="varargin">Array of Objects representing the input arguments 1
             through varargin.length</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.plotFreq(System.Int32)">
             <summary>
             Provides the standard 0-input Object interface to the plotFreq M-function.
             </summary>
             <remarks>
             M-Documentation:
             get handles to the event traces
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.plotFreq(System.Int32,System.Object[])">
             <summary>
             Provides the standard 1-input Object interface to the plotFreq M-function.
             </summary>
             <remarks>
             M-Documentation:
             get handles to the event traces
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="varargin">Array of Objects representing the input arguments 1
             through varargin.length</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.plotFreq(System.Int32,System.Object[]@,System.Object[],System.Object[])">
             <summary>
             Provides an interface for the plotFreq function in which the input and output
             arguments are specified as an array of Objects.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             M-Documentation:
             get handles to the event traces
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of Object output arguments</param>
             <param name= "argsIn">Array of Object input arguments</param>
             <param name= "varArgsIn">Array of Object representing variable input
             arguments</param>
            
        </member>
        <member name="M:mPhysNative.Class1.plotHistogram">
             <summary>
             Provides a single output, 0-input Objectinterface to the plotHistogram
             M-function.
             </summary>
             <remarks>
             </remarks>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.plotHistogram(System.Object)">
             <summary>
             Provides a single output, 1-input Objectinterface to the plotHistogram
             M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="inValues">Input argument #1</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.plotHistogram(System.Object,System.Object)">
             <summary>
             Provides a single output, 2-input Objectinterface to the plotHistogram
             M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="inValues">Input argument #1</param>
             <param name="xAxisBins">Input argument #2</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.plotHistogram(System.Object,System.Object,System.Object)">
             <summary>
             Provides a single output, 3-input Objectinterface to the plotHistogram
             M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="inValues">Input argument #1</param>
             <param name="xAxisBins">Input argument #2</param>
             <param name="figureName">Input argument #3</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.plotHistogram(System.Int32)">
             <summary>
             Provides the standard 0-input Object interface to the plotHistogram M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.plotHistogram(System.Int32,System.Object)">
             <summary>
             Provides the standard 1-input Object interface to the plotHistogram M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="inValues">Input argument #1</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.plotHistogram(System.Int32,System.Object,System.Object)">
             <summary>
             Provides the standard 2-input Object interface to the plotHistogram M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="inValues">Input argument #1</param>
             <param name="xAxisBins">Input argument #2</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.plotHistogram(System.Int32,System.Object,System.Object,System.Object)">
             <summary>
             Provides the standard 3-input Object interface to the plotHistogram M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="inValues">Input argument #1</param>
             <param name="xAxisBins">Input argument #2</param>
             <param name="figureName">Input argument #3</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.plotHistogram(System.Int32,System.Object[]@,System.Object[],System.Object[])">
             <summary>
             Provides an interface for the plotHistogram function in which the input and
             output
             arguments are specified as an array of Objects.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of Object output arguments</param>
             <param name= "argsIn">Array of Object input arguments</param>
             <param name= "varArgsIn">Array of Object representing variable input
             arguments</param>
            
        </member>
        <member name="M:mPhysNative.Class1.plotPercentCorrelation">
             <summary>
             Provides a single output, 0-input Objectinterface to the plotPercentCorrelation
             M-function.
             </summary>
             <remarks>
             M-Documentation:
             get handles to the event traces
             </remarks>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.plotPercentCorrelation(System.Object[])">
             <summary>
             Provides a single output, 1-input Objectinterface to the plotPercentCorrelation
             M-function.
             </summary>
             <remarks>
             M-Documentation:
             get handles to the event traces
             </remarks>
             <param name="varargin">Array of Objects representing the input arguments 1
             through varargin.length</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.plotPercentCorrelation(System.Int32)">
             <summary>
             Provides the standard 0-input Object interface to the plotPercentCorrelation
             M-function.
             </summary>
             <remarks>
             M-Documentation:
             get handles to the event traces
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.plotPercentCorrelation(System.Int32,System.Object[])">
             <summary>
             Provides the standard 1-input Object interface to the plotPercentCorrelation
             M-function.
             </summary>
             <remarks>
             M-Documentation:
             get handles to the event traces
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="varargin">Array of Objects representing the input arguments 1
             through varargin.length</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.plotPercentCorrelation(System.Int32,System.Object[]@,System.Object[],System.Object[])">
             <summary>
             Provides an interface for the plotPercentCorrelation function in which the input
             and output
             arguments are specified as an array of Objects.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             M-Documentation:
             get handles to the event traces
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of Object output arguments</param>
             <param name= "argsIn">Array of Object input arguments</param>
             <param name= "varArgsIn">Array of Object representing variable input
             arguments</param>
            
        </member>
        <member name="M:mPhysNative.Class1.prepForPrint">
             <summary>
             Provides a single output, 0-input Objectinterface to the prepForPrint M-function.
             </summary>
             <remarks>
             M-Documentation:
             Hides axes and places a scale bar with y-units set by yVal (a character
             array).  Possible options include:
             'xOnly'              -display only the x scale
             'yOnly',             -display only the y scale
             'openRight'          -scale bars are open to the right
             'openBottom'         -scale bars are open to the bottom
             'location', [x y]    -normalized distance from bottom left corner
             </remarks>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.prepForPrint(System.Object)">
             <summary>
             Provides a single output, 1-input Objectinterface to the prepForPrint M-function.
             </summary>
             <remarks>
             M-Documentation:
             Hides axes and places a scale bar with y-units set by yVal (a character
             array).  Possible options include:
             'xOnly'              -display only the x scale
             'yOnly',             -display only the y scale
             'openRight'          -scale bars are open to the right
             'openBottom'         -scale bars are open to the bottom
             'location', [x y]    -normalized distance from bottom left corner
             </remarks>
             <param name="currentAxis">Input argument #1</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.prepForPrint(System.Object,System.Object)">
             <summary>
             Provides a single output, 2-input Objectinterface to the prepForPrint M-function.
             </summary>
             <remarks>
             M-Documentation:
             Hides axes and places a scale bar with y-units set by yVal (a character
             array).  Possible options include:
             'xOnly'              -display only the x scale
             'yOnly',             -display only the y scale
             'openRight'          -scale bars are open to the right
             'openBottom'         -scale bars are open to the bottom
             'location', [x y]    -normalized distance from bottom left corner
             </remarks>
             <param name="currentAxis">Input argument #1</param>
             <param name="yVal">Input argument #2</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.prepForPrint(System.Object,System.Object,System.Object[])">
             <summary>
             Provides a single output, 3-input Objectinterface to the prepForPrint M-function.
             </summary>
             <remarks>
             M-Documentation:
             Hides axes and places a scale bar with y-units set by yVal (a character
             array).  Possible options include:
             'xOnly'              -display only the x scale
             'yOnly',             -display only the y scale
             'openRight'          -scale bars are open to the right
             'openBottom'         -scale bars are open to the bottom
             'location', [x y]    -normalized distance from bottom left corner
             </remarks>
             <param name="currentAxis">Input argument #1</param>
             <param name="yVal">Input argument #2</param>
             <param name="varargin">Array of Objects representing the input arguments 3
             through varargin.length+2</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.prepForPrint(System.Int32)">
             <summary>
             Provides the standard 0-input Object interface to the prepForPrint M-function.
             </summary>
             <remarks>
             M-Documentation:
             Hides axes and places a scale bar with y-units set by yVal (a character
             array).  Possible options include:
             'xOnly'              -display only the x scale
             'yOnly',             -display only the y scale
             'openRight'          -scale bars are open to the right
             'openBottom'         -scale bars are open to the bottom
             'location', [x y]    -normalized distance from bottom left corner
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.prepForPrint(System.Int32,System.Object)">
             <summary>
             Provides the standard 1-input Object interface to the prepForPrint M-function.
             </summary>
             <remarks>
             M-Documentation:
             Hides axes and places a scale bar with y-units set by yVal (a character
             array).  Possible options include:
             'xOnly'              -display only the x scale
             'yOnly',             -display only the y scale
             'openRight'          -scale bars are open to the right
             'openBottom'         -scale bars are open to the bottom
             'location', [x y]    -normalized distance from bottom left corner
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="currentAxis">Input argument #1</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.prepForPrint(System.Int32,System.Object,System.Object)">
             <summary>
             Provides the standard 2-input Object interface to the prepForPrint M-function.
             </summary>
             <remarks>
             M-Documentation:
             Hides axes and places a scale bar with y-units set by yVal (a character
             array).  Possible options include:
             'xOnly'              -display only the x scale
             'yOnly',             -display only the y scale
             'openRight'          -scale bars are open to the right
             'openBottom'         -scale bars are open to the bottom
             'location', [x y]    -normalized distance from bottom left corner
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="currentAxis">Input argument #1</param>
             <param name="yVal">Input argument #2</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.prepForPrint(System.Int32,System.Object,System.Object,System.Object[])">
             <summary>
             Provides the standard 3-input Object interface to the prepForPrint M-function.
             </summary>
             <remarks>
             M-Documentation:
             Hides axes and places a scale bar with y-units set by yVal (a character
             array).  Possible options include:
             'xOnly'              -display only the x scale
             'yOnly',             -display only the y scale
             'openRight'          -scale bars are open to the right
             'openBottom'         -scale bars are open to the bottom
             'location', [x y]    -normalized distance from bottom left corner
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="currentAxis">Input argument #1</param>
             <param name="yVal">Input argument #2</param>
             <param name="varargin">Array of Objects representing the input arguments 3
             through varargin.length+2</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.prepForPrint(System.Int32,System.Object[]@,System.Object[],System.Object[])">
             <summary>
             Provides an interface for the prepForPrint function in which the input and output
             arguments are specified as an array of Objects.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             M-Documentation:
             Hides axes and places a scale bar with y-units set by yVal (a character
             array).  Possible options include:
             'xOnly'              -display only the x scale
             'yOnly',             -display only the y scale
             'openRight'          -scale bars are open to the right
             'openBottom'         -scale bars are open to the bottom
             'location', [x y]    -normalized distance from bottom left corner
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of Object output arguments</param>
             <param name= "argsIn">Array of Object input arguments</param>
             <param name= "varArgsIn">Array of Object representing variable input
             arguments</param>
            
        </member>
        <member name="M:mPhysNative.Class1.printWithAxes">
             <summary>
             Provides a void output, 0-input Objectinterface to the printWithAxes M-function.
             </summary>
             <remarks>
             M-Documentation:
             function for printing a newScope
             </remarks>
            
        </member>
        <member name="M:mPhysNative.Class1.printWithAxes(System.Object)">
             <summary>
             Provides a void output, 1-input Objectinterface to the printWithAxes M-function.
             </summary>
             <remarks>
             M-Documentation:
             function for printing a newScope
             </remarks>
             <param name="figure">Input argument #1</param>
            
        </member>
        <member name="M:mPhysNative.Class1.printWithAxes(System.Int32)">
             <summary>
             Provides the standard 0-input Object interface to the printWithAxes M-function.
             </summary>
             <remarks>
             M-Documentation:
             function for printing a newScope
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.printWithAxes(System.Int32,System.Object)">
             <summary>
             Provides the standard 1-input Object interface to the printWithAxes M-function.
             </summary>
             <remarks>
             M-Documentation:
             function for printing a newScope
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="figure">Input argument #1</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.printWithAxes(System.Int32,System.Object[]@,System.Object[],System.Object[])">
             <summary>
             Provides an interface for the printWithAxes function in which the input and
             output
             arguments are specified as an array of Objects.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             M-Documentation:
             function for printing a newScope
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of Object output arguments</param>
             <param name= "argsIn">Array of Object input arguments</param>
             <param name= "varArgsIn">Array of Object representing variable input
             arguments</param>
            
        </member>
        <member name="M:mPhysNative.Class1.printWithScaleBars">
             <summary>
             Provides a void output, 0-input Objectinterface to the printWithScaleBars
             M-function.
             </summary>
             <remarks>
             M-Documentation:
             function for printing a newScope
             </remarks>
            
        </member>
        <member name="M:mPhysNative.Class1.printWithScaleBars(System.Object)">
             <summary>
             Provides a void output, 1-input Objectinterface to the printWithScaleBars
             M-function.
             </summary>
             <remarks>
             M-Documentation:
             function for printing a newScope
             </remarks>
             <param name="figure">Input argument #1</param>
            
        </member>
        <member name="M:mPhysNative.Class1.printWithScaleBars(System.Int32)">
             <summary>
             Provides the standard 0-input Object interface to the printWithScaleBars
             M-function.
             </summary>
             <remarks>
             M-Documentation:
             function for printing a newScope
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.printWithScaleBars(System.Int32,System.Object)">
             <summary>
             Provides the standard 1-input Object interface to the printWithScaleBars
             M-function.
             </summary>
             <remarks>
             M-Documentation:
             function for printing a newScope
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="figure">Input argument #1</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.printWithScaleBars(System.Int32,System.Object[]@,System.Object[],System.Object[])">
             <summary>
             Provides an interface for the printWithScaleBars function in which the input and
             output
             arguments are specified as an array of Objects.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             M-Documentation:
             function for printing a newScope
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of Object output arguments</param>
             <param name= "argsIn">Array of Object input arguments</param>
             <param name= "varArgsIn">Array of Object representing variable input
             arguments</param>
            
        </member>
        <member name="M:mPhysNative.Class1.readBen">
             <summary>
             Provides a single output, 0-input Objectinterface to the readBen M-function.
             </summary>
             <remarks>
             M-Documentation:
             Updated for modern .dat files 27 Jan 2012 BWS
             read header to determine number of traces, etc
             </remarks>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.readBen(System.Object)">
             <summary>
             Provides a single output, 1-input Objectinterface to the readBen M-function.
             </summary>
             <remarks>
             M-Documentation:
             Updated for modern .dat files 27 Jan 2012 BWS
             read header to determine number of traces, etc
             </remarks>
             <param name="filename">Input argument #1</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.readBen(System.Object,System.Object)">
             <summary>
             Provides a single output, 2-input Objectinterface to the readBen M-function.
             </summary>
             <remarks>
             M-Documentation:
             Updated for modern .dat files 27 Jan 2012 BWS
             read header to determine number of traces, etc
             </remarks>
             <param name="filename">Input argument #1</param>
             <param name="infoOnly">Input argument #2</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.readBen(System.Int32)">
             <summary>
             Provides the standard 0-input Object interface to the readBen M-function.
             </summary>
             <remarks>
             M-Documentation:
             Updated for modern .dat files 27 Jan 2012 BWS
             read header to determine number of traces, etc
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.readBen(System.Int32,System.Object)">
             <summary>
             Provides the standard 1-input Object interface to the readBen M-function.
             </summary>
             <remarks>
             M-Documentation:
             Updated for modern .dat files 27 Jan 2012 BWS
             read header to determine number of traces, etc
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="filename">Input argument #1</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.readBen(System.Int32,System.Object,System.Object)">
             <summary>
             Provides the standard 2-input Object interface to the readBen M-function.
             </summary>
             <remarks>
             M-Documentation:
             Updated for modern .dat files 27 Jan 2012 BWS
             read header to determine number of traces, etc
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="filename">Input argument #1</param>
             <param name="infoOnly">Input argument #2</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.readBen(System.Int32,System.Object[]@,System.Object[],System.Object[])">
             <summary>
             Provides an interface for the readBen function in which the input and output
             arguments are specified as an array of Objects.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             M-Documentation:
             Updated for modern .dat files 27 Jan 2012 BWS
             read header to determine number of traces, etc
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of Object output arguments</param>
             <param name= "argsIn">Array of Object input arguments</param>
             <param name= "varArgsIn">Array of Object representing variable input
             arguments</param>
            
        </member>
        <member name="M:mPhysNative.Class1.readBenNewStyle">
             <summary>
             Provides a single output, 0-input Objectinterface to the readBenNewStyle
             M-function.
             </summary>
             <remarks>
             M-Documentation:
             import IV trace info
             </remarks>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.readBenNewStyle(System.Object)">
             <summary>
             Provides a single output, 1-input Objectinterface to the readBenNewStyle
             M-function.
             </summary>
             <remarks>
             M-Documentation:
             import IV trace info
             </remarks>
             <param name="filename">Input argument #1</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.readBenNewStyle(System.Object,System.Object)">
             <summary>
             Provides a single output, 2-input Objectinterface to the readBenNewStyle
             M-function.
             </summary>
             <remarks>
             M-Documentation:
             import IV trace info
             </remarks>
             <param name="filename">Input argument #1</param>
             <param name="infoOnly">Input argument #2</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.readBenNewStyle(System.Int32)">
             <summary>
             Provides the standard 0-input Object interface to the readBenNewStyle M-function.
             </summary>
             <remarks>
             M-Documentation:
             import IV trace info
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.readBenNewStyle(System.Int32,System.Object)">
             <summary>
             Provides the standard 1-input Object interface to the readBenNewStyle M-function.
             </summary>
             <remarks>
             M-Documentation:
             import IV trace info
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="filename">Input argument #1</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.readBenNewStyle(System.Int32,System.Object,System.Object)">
             <summary>
             Provides the standard 2-input Object interface to the readBenNewStyle M-function.
             </summary>
             <remarks>
             M-Documentation:
             import IV trace info
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="filename">Input argument #1</param>
             <param name="infoOnly">Input argument #2</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.readBenNewStyle(System.Int32,System.Object[]@,System.Object[],System.Object[])">
             <summary>
             Provides an interface for the readBenNewStyle function in which the input and
             output
             arguments are specified as an array of Objects.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             M-Documentation:
             import IV trace info
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of Object output arguments</param>
             <param name= "argsIn">Array of Object input arguments</param>
             <param name= "varArgsIn">Array of Object representing variable input
             arguments</param>
            
        </member>
        <member name="M:mPhysNative.Class1.readBenOld2">
             <summary>
             Provides a single output, 0-input Objectinterface to the readBenOld2 M-function.
             </summary>
             <remarks>
             M-Documentation:
             read header to determine number of traces, etc
             </remarks>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.readBenOld2(System.Object)">
             <summary>
             Provides a single output, 1-input Objectinterface to the readBenOld2 M-function.
             </summary>
             <remarks>
             M-Documentation:
             read header to determine number of traces, etc
             </remarks>
             <param name="filename">Input argument #1</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.readBenOld2(System.Object,System.Object)">
             <summary>
             Provides a single output, 2-input Objectinterface to the readBenOld2 M-function.
             </summary>
             <remarks>
             M-Documentation:
             read header to determine number of traces, etc
             </remarks>
             <param name="filename">Input argument #1</param>
             <param name="infoOnly">Input argument #2</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.readBenOld2(System.Int32)">
             <summary>
             Provides the standard 0-input Object interface to the readBenOld2 M-function.
             </summary>
             <remarks>
             M-Documentation:
             read header to determine number of traces, etc
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.readBenOld2(System.Int32,System.Object)">
             <summary>
             Provides the standard 1-input Object interface to the readBenOld2 M-function.
             </summary>
             <remarks>
             M-Documentation:
             read header to determine number of traces, etc
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="filename">Input argument #1</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.readBenOld2(System.Int32,System.Object,System.Object)">
             <summary>
             Provides the standard 2-input Object interface to the readBenOld2 M-function.
             </summary>
             <remarks>
             M-Documentation:
             read header to determine number of traces, etc
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="filename">Input argument #1</param>
             <param name="infoOnly">Input argument #2</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.readBenOld2(System.Int32,System.Object[]@,System.Object[],System.Object[])">
             <summary>
             Provides an interface for the readBenOld2 function in which the input and output
             arguments are specified as an array of Objects.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             M-Documentation:
             read header to determine number of traces, etc
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of Object output arguments</param>
             <param name= "argsIn">Array of Object input arguments</param>
             <param name= "varArgsIn">Array of Object representing variable input
             arguments</param>
            
        </member>
        <member name="M:mPhysNative.Class1.readTrace">
             <summary>
             Provides a single output, 0-input Objectinterface to the readTrace M-function.
             </summary>
             <remarks>
             M-Documentation:
             reads data traces generated by the data acquisition program
             zData = readTrace(fileName);
             protocol = readTrace(fileName, 1);
             </remarks>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.readTrace(System.Object)">
             <summary>
             Provides a single output, 1-input Objectinterface to the readTrace M-function.
             </summary>
             <remarks>
             M-Documentation:
             reads data traces generated by the data acquisition program
             zData = readTrace(fileName);
             protocol = readTrace(fileName, 1);
             </remarks>
             <param name="filename">Input argument #1</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.readTrace(System.Object,System.Object)">
             <summary>
             Provides a single output, 2-input Objectinterface to the readTrace M-function.
             </summary>
             <remarks>
             M-Documentation:
             reads data traces generated by the data acquisition program
             zData = readTrace(fileName);
             protocol = readTrace(fileName, 1);
             </remarks>
             <param name="filename">Input argument #1</param>
             <param name="infoOnly">Input argument #2</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.readTrace(System.Int32)">
             <summary>
             Provides the standard 0-input Object interface to the readTrace M-function.
             </summary>
             <remarks>
             M-Documentation:
             reads data traces generated by the data acquisition program
             zData = readTrace(fileName);
             protocol = readTrace(fileName, 1);
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.readTrace(System.Int32,System.Object)">
             <summary>
             Provides the standard 1-input Object interface to the readTrace M-function.
             </summary>
             <remarks>
             M-Documentation:
             reads data traces generated by the data acquisition program
             zData = readTrace(fileName);
             protocol = readTrace(fileName, 1);
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="filename">Input argument #1</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.readTrace(System.Int32,System.Object,System.Object)">
             <summary>
             Provides the standard 2-input Object interface to the readTrace M-function.
             </summary>
             <remarks>
             M-Documentation:
             reads data traces generated by the data acquisition program
             zData = readTrace(fileName);
             protocol = readTrace(fileName, 1);
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="filename">Input argument #1</param>
             <param name="infoOnly">Input argument #2</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.readTrace(System.Int32,System.Object[]@,System.Object[],System.Object[])">
             <summary>
             Provides an interface for the readTrace function in which the input and output
             arguments are specified as an array of Objects.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             M-Documentation:
             reads data traces generated by the data acquisition program
             zData = readTrace(fileName);
             protocol = readTrace(fileName, 1);
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of Object output arguments</param>
             <param name= "argsIn">Array of Object input arguments</param>
             <param name= "varArgsIn">Array of Object representing variable input
             arguments</param>
            
        </member>
        <member name="M:mPhysNative.Class1.readVBString">
             <summary>
             Provides a single output, 0-input Objectinterface to the readVBString M-function.
             </summary>
             <remarks>
             M-Documentation:
             this function takes a handle to an open file and reads a VB encoded
             string.  It assumes the file position is correct
             </remarks>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.readVBString(System.Object)">
             <summary>
             Provides a single output, 1-input Objectinterface to the readVBString M-function.
             </summary>
             <remarks>
             M-Documentation:
             this function takes a handle to an open file and reads a VB encoded
             string.  It assumes the file position is correct
             </remarks>
             <param name="fid">Input argument #1</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.readVBString(System.Int32)">
             <summary>
             Provides the standard 0-input Object interface to the readVBString M-function.
             </summary>
             <remarks>
             M-Documentation:
             this function takes a handle to an open file and reads a VB encoded
             string.  It assumes the file position is correct
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.readVBString(System.Int32,System.Object)">
             <summary>
             Provides the standard 1-input Object interface to the readVBString M-function.
             </summary>
             <remarks>
             M-Documentation:
             this function takes a handle to an open file and reads a VB encoded
             string.  It assumes the file position is correct
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="fid">Input argument #1</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.readVBString(System.Int32,System.Object[]@,System.Object[],System.Object[])">
             <summary>
             Provides an interface for the readVBString function in which the input and output
             arguments are specified as an array of Objects.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             M-Documentation:
             this function takes a handle to an open file and reads a VB encoded
             string.  It assumes the file position is correct
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of Object output arguments</param>
             <param name= "argsIn">Array of Object input arguments</param>
             <param name= "varArgsIn">Array of Object representing variable input
             arguments</param>
            
        </member>
        <member name="M:mPhysNative.Class1.refreshAllScopes">
             <summary>
             Provides a void output, 0-input Objectinterface to the refreshAllScopes
             M-function.
             </summary>
             <remarks>
             </remarks>
            
        </member>
        <member name="M:mPhysNative.Class1.refreshAllScopes(System.Int32)">
             <summary>
             Provides the standard 0-input Object interface to the refreshAllScopes
             M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.refreshAllScopes(System.Int32,System.Object[]@,System.Object[],System.Object[])">
             <summary>
             Provides an interface for the refreshAllScopes function in which the input and
             output
             arguments are specified as an array of Objects.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of Object output arguments</param>
             <param name= "argsIn">Array of Object input arguments</param>
             <param name= "varArgsIn">Array of Object representing variable input
             arguments</param>
            
        </member>
        <member name="M:mPhysNative.Class1.removeTrace">
             <summary>
             Provides a single output, 0-input Objectinterface to the removeTrace M-function.
             </summary>
             <remarks>
             </remarks>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.removeTrace(System.Object)">
             <summary>
             Provides a single output, 1-input Objectinterface to the removeTrace M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="channelName">Input argument #1</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.removeTrace(System.Int32)">
             <summary>
             Provides the standard 0-input Object interface to the removeTrace M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.removeTrace(System.Int32,System.Object)">
             <summary>
             Provides the standard 1-input Object interface to the removeTrace M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="channelName">Input argument #1</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.removeTrace(System.Int32,System.Object[]@,System.Object[],System.Object[])">
             <summary>
             Provides an interface for the removeTrace function in which the input and output
             arguments are specified as an array of Objects.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of Object output arguments</param>
             <param name= "argsIn">Array of Object input arguments</param>
             <param name= "varArgsIn">Array of Object representing variable input
             arguments</param>
            
        </member>
        <member name="M:mPhysNative.Class1.replaceTrace">
             <summary>
             Provides a single output, 0-input Objectinterface to the replaceTrace M-function.
             </summary>
             <remarks>
             M-Documentation:
             error checking
             </remarks>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.replaceTrace(System.Object)">
             <summary>
             Provides a single output, 1-input Objectinterface to the replaceTrace M-function.
             </summary>
             <remarks>
             M-Documentation:
             error checking
             </remarks>
             <param name="newData">Input argument #1</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.replaceTrace(System.Object,System.Object)">
             <summary>
             Provides a single output, 2-input Objectinterface to the replaceTrace M-function.
             </summary>
             <remarks>
             M-Documentation:
             error checking
             </remarks>
             <param name="newData">Input argument #1</param>
             <param name="channelName">Input argument #2</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.replaceTrace(System.Int32)">
             <summary>
             Provides the standard 0-input Object interface to the replaceTrace M-function.
             </summary>
             <remarks>
             M-Documentation:
             error checking
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.replaceTrace(System.Int32,System.Object)">
             <summary>
             Provides the standard 1-input Object interface to the replaceTrace M-function.
             </summary>
             <remarks>
             M-Documentation:
             error checking
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="newData">Input argument #1</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.replaceTrace(System.Int32,System.Object,System.Object)">
             <summary>
             Provides the standard 2-input Object interface to the replaceTrace M-function.
             </summary>
             <remarks>
             M-Documentation:
             error checking
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="newData">Input argument #1</param>
             <param name="channelName">Input argument #2</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.replaceTrace(System.Int32,System.Object[]@,System.Object[],System.Object[])">
             <summary>
             Provides an interface for the replaceTrace function in which the input and output
             arguments are specified as an array of Objects.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             M-Documentation:
             error checking
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of Object output arguments</param>
             <param name= "argsIn">Array of Object input arguments</param>
             <param name= "varArgsIn">Array of Object representing variable input
             arguments</param>
            
        </member>
        <member name="M:mPhysNative.Class1.restartSystem">
             <summary>
             Provides a void output, 0-input Objectinterface to the restartSystem M-function.
             </summary>
             <remarks>
             M-Documentation:
             this should run when caught error is found
             </remarks>
            
        </member>
        <member name="M:mPhysNative.Class1.restartSystem(System.Int32)">
             <summary>
             Provides the standard 0-input Object interface to the restartSystem M-function.
             </summary>
             <remarks>
             M-Documentation:
             this should run when caught error is found
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.restartSystem(System.Int32,System.Object[]@,System.Object[],System.Object[])">
             <summary>
             Provides an interface for the restartSystem function in which the input and
             output
             arguments are specified as an array of Objects.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             M-Documentation:
             this should run when caught error is found
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of Object output arguments</param>
             <param name= "argsIn">Array of Object input arguments</param>
             <param name= "varArgsIn">Array of Object representing variable input
             arguments</param>
            
        </member>
        <member name="M:mPhysNative.Class1.runGeneralFilter">
             <summary>
             Provides a single output, 0-input Objectinterface to the runGeneralFilter
             M-function.
             </summary>
             <remarks>
             </remarks>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.runGeneralFilter(System.Object)">
             <summary>
             Provides a single output, 1-input Objectinterface to the runGeneralFilter
             M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="inData">Input argument #1</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.runGeneralFilter(System.Int32)">
             <summary>
             Provides the standard 0-input Object interface to the runGeneralFilter
             M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.runGeneralFilter(System.Int32,System.Object)">
             <summary>
             Provides the standard 1-input Object interface to the runGeneralFilter
             M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="inData">Input argument #1</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.runGeneralFilter(System.Int32,System.Object[]@,System.Object[],System.Object[])">
             <summary>
             Provides an interface for the runGeneralFilter function in which the input and
             output
             arguments are specified as an array of Objects.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of Object output arguments</param>
             <param name= "argsIn">Array of Object input arguments</param>
             <param name= "varArgsIn">Array of Object representing variable input
             arguments</param>
            
        </member>
        <member name="M:mPhysNative.Class1.SaveAsMatFile">
             <summary>
             Provides a single output, 0-input Objectinterface to the SaveAsMatFile
             M-function.
             </summary>
             <remarks>
             </remarks>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.SaveAsMatFile(System.Object)">
             <summary>
             Provides a single output, 1-input Objectinterface to the SaveAsMatFile
             M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="inArray">Input argument #1</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.SaveAsMatFile(System.Object,System.Object)">
             <summary>
             Provides a single output, 2-input Objectinterface to the SaveAsMatFile
             M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="inArray">Input argument #1</param>
             <param name="newFileName">Input argument #2</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.SaveAsMatFile(System.Int32)">
             <summary>
             Provides the standard 0-input Object interface to the SaveAsMatFile M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.SaveAsMatFile(System.Int32,System.Object)">
             <summary>
             Provides the standard 1-input Object interface to the SaveAsMatFile M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="inArray">Input argument #1</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.SaveAsMatFile(System.Int32,System.Object,System.Object)">
             <summary>
             Provides the standard 2-input Object interface to the SaveAsMatFile M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="inArray">Input argument #1</param>
             <param name="newFileName">Input argument #2</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.SaveAsMatFile(System.Int32,System.Object[]@,System.Object[],System.Object[])">
             <summary>
             Provides an interface for the SaveAsMatFile function in which the input and
             output
             arguments are specified as an array of Objects.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of Object output arguments</param>
             <param name= "argsIn">Array of Object input arguments</param>
             <param name= "varArgsIn">Array of Object representing variable input
             arguments</param>
            
        </member>
        <member name="M:mPhysNative.Class1.SaveAsMatFile2Vectors">
             <summary>
             Provides a single output, 0-input Objectinterface to the SaveAsMatFile2Vectors
             M-function.
             </summary>
             <remarks>
             </remarks>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.SaveAsMatFile2Vectors(System.Object)">
             <summary>
             Provides a single output, 1-input Objectinterface to the SaveAsMatFile2Vectors
             M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="inArray">Input argument #1</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.SaveAsMatFile2Vectors(System.Object,System.Object)">
             <summary>
             Provides a single output, 2-input Objectinterface to the SaveAsMatFile2Vectors
             M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="inArray">Input argument #1</param>
             <param name="inArray2">Input argument #2</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.SaveAsMatFile2Vectors(System.Object,System.Object,System.Object)">
             <summary>
             Provides a single output, 3-input Objectinterface to the SaveAsMatFile2Vectors
             M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="inArray">Input argument #1</param>
             <param name="inArray2">Input argument #2</param>
             <param name="newFileName">Input argument #3</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.SaveAsMatFile2Vectors(System.Int32)">
             <summary>
             Provides the standard 0-input Object interface to the SaveAsMatFile2Vectors
             M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.SaveAsMatFile2Vectors(System.Int32,System.Object)">
             <summary>
             Provides the standard 1-input Object interface to the SaveAsMatFile2Vectors
             M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="inArray">Input argument #1</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.SaveAsMatFile2Vectors(System.Int32,System.Object,System.Object)">
             <summary>
             Provides the standard 2-input Object interface to the SaveAsMatFile2Vectors
             M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="inArray">Input argument #1</param>
             <param name="inArray2">Input argument #2</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.SaveAsMatFile2Vectors(System.Int32,System.Object,System.Object,System.Object)">
             <summary>
             Provides the standard 3-input Object interface to the SaveAsMatFile2Vectors
             M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="inArray">Input argument #1</param>
             <param name="inArray2">Input argument #2</param>
             <param name="newFileName">Input argument #3</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.SaveAsMatFile2Vectors(System.Int32,System.Object[]@,System.Object[],System.Object[])">
             <summary>
             Provides an interface for the SaveAsMatFile2Vectors function in which the input
             and output
             arguments are specified as an array of Objects.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of Object output arguments</param>
             <param name= "argsIn">Array of Object input arguments</param>
             <param name= "varArgsIn">Array of Object representing variable input
             arguments</param>
            
        </member>
        <member name="M:mPhysNative.Class1.SaveAsMatFile3Vectors">
             <summary>
             Provides a single output, 0-input Objectinterface to the SaveAsMatFile3Vectors
             M-function.
             </summary>
             <remarks>
             </remarks>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.SaveAsMatFile3Vectors(System.Object)">
             <summary>
             Provides a single output, 1-input Objectinterface to the SaveAsMatFile3Vectors
             M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="inArray">Input argument #1</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.SaveAsMatFile3Vectors(System.Object,System.Object)">
             <summary>
             Provides a single output, 2-input Objectinterface to the SaveAsMatFile3Vectors
             M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="inArray">Input argument #1</param>
             <param name="inArray2">Input argument #2</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.SaveAsMatFile3Vectors(System.Object,System.Object,System.Object)">
             <summary>
             Provides a single output, 3-input Objectinterface to the SaveAsMatFile3Vectors
             M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="inArray">Input argument #1</param>
             <param name="inArray2">Input argument #2</param>
             <param name="inArray3">Input argument #3</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.SaveAsMatFile3Vectors(System.Object,System.Object,System.Object,System.Object)">
             <summary>
             Provides a single output, 4-input Objectinterface to the SaveAsMatFile3Vectors
             M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="inArray">Input argument #1</param>
             <param name="inArray2">Input argument #2</param>
             <param name="inArray3">Input argument #3</param>
             <param name="newFileName">Input argument #4</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.SaveAsMatFile3Vectors(System.Int32)">
             <summary>
             Provides the standard 0-input Object interface to the SaveAsMatFile3Vectors
             M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.SaveAsMatFile3Vectors(System.Int32,System.Object)">
             <summary>
             Provides the standard 1-input Object interface to the SaveAsMatFile3Vectors
             M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="inArray">Input argument #1</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.SaveAsMatFile3Vectors(System.Int32,System.Object,System.Object)">
             <summary>
             Provides the standard 2-input Object interface to the SaveAsMatFile3Vectors
             M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="inArray">Input argument #1</param>
             <param name="inArray2">Input argument #2</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.SaveAsMatFile3Vectors(System.Int32,System.Object,System.Object,System.Object)">
             <summary>
             Provides the standard 3-input Object interface to the SaveAsMatFile3Vectors
             M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="inArray">Input argument #1</param>
             <param name="inArray2">Input argument #2</param>
             <param name="inArray3">Input argument #3</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.SaveAsMatFile3Vectors(System.Int32,System.Object,System.Object,System.Object,System.Object)">
             <summary>
             Provides the standard 4-input Object interface to the SaveAsMatFile3Vectors
             M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="inArray">Input argument #1</param>
             <param name="inArray2">Input argument #2</param>
             <param name="inArray3">Input argument #3</param>
             <param name="newFileName">Input argument #4</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.SaveAsMatFile3Vectors(System.Int32,System.Object[]@,System.Object[],System.Object[])">
             <summary>
             Provides an interface for the SaveAsMatFile3Vectors function in which the input
             and output
             arguments are specified as an array of Objects.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of Object output arguments</param>
             <param name= "argsIn">Array of Object input arguments</param>
             <param name= "varArgsIn">Array of Object representing variable input
             arguments</param>
            
        </member>
        <member name="M:mPhysNative.Class1.SaveAsMatFile3VectorsUnique">
             <summary>
             Provides a single output, 0-input Objectinterface to the
             SaveAsMatFile3VectorsUnique M-function.
             </summary>
             <remarks>
             </remarks>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.SaveAsMatFile3VectorsUnique(System.Object)">
             <summary>
             Provides a single output, 1-input Objectinterface to the
             SaveAsMatFile3VectorsUnique M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="inArray">Input argument #1</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.SaveAsMatFile3VectorsUnique(System.Object,System.Object)">
             <summary>
             Provides a single output, 2-input Objectinterface to the
             SaveAsMatFile3VectorsUnique M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="inArray">Input argument #1</param>
             <param name="inArray2">Input argument #2</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.SaveAsMatFile3VectorsUnique(System.Object,System.Object,System.Object)">
             <summary>
             Provides a single output, 3-input Objectinterface to the
             SaveAsMatFile3VectorsUnique M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="inArray">Input argument #1</param>
             <param name="inArray2">Input argument #2</param>
             <param name="inArray3">Input argument #3</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.SaveAsMatFile3VectorsUnique(System.Object,System.Object,System.Object,System.Object)">
             <summary>
             Provides a single output, 4-input Objectinterface to the
             SaveAsMatFile3VectorsUnique M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="inArray">Input argument #1</param>
             <param name="inArray2">Input argument #2</param>
             <param name="inArray3">Input argument #3</param>
             <param name="newFileName">Input argument #4</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.SaveAsMatFile3VectorsUnique(System.Object,System.Object,System.Object,System.Object,System.Object)">
             <summary>
             Provides a single output, 5-input Objectinterface to the
             SaveAsMatFile3VectorsUnique M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="inArray">Input argument #1</param>
             <param name="inArray2">Input argument #2</param>
             <param name="inArray3">Input argument #3</param>
             <param name="newFileName">Input argument #4</param>
             <param name="newVarName">Input argument #5</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.SaveAsMatFile3VectorsUnique(System.Int32)">
             <summary>
             Provides the standard 0-input Object interface to the SaveAsMatFile3VectorsUnique
             M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.SaveAsMatFile3VectorsUnique(System.Int32,System.Object)">
             <summary>
             Provides the standard 1-input Object interface to the SaveAsMatFile3VectorsUnique
             M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="inArray">Input argument #1</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.SaveAsMatFile3VectorsUnique(System.Int32,System.Object,System.Object)">
             <summary>
             Provides the standard 2-input Object interface to the SaveAsMatFile3VectorsUnique
             M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="inArray">Input argument #1</param>
             <param name="inArray2">Input argument #2</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.SaveAsMatFile3VectorsUnique(System.Int32,System.Object,System.Object,System.Object)">
             <summary>
             Provides the standard 3-input Object interface to the SaveAsMatFile3VectorsUnique
             M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="inArray">Input argument #1</param>
             <param name="inArray2">Input argument #2</param>
             <param name="inArray3">Input argument #3</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.SaveAsMatFile3VectorsUnique(System.Int32,System.Object,System.Object,System.Object,System.Object)">
             <summary>
             Provides the standard 4-input Object interface to the SaveAsMatFile3VectorsUnique
             M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="inArray">Input argument #1</param>
             <param name="inArray2">Input argument #2</param>
             <param name="inArray3">Input argument #3</param>
             <param name="newFileName">Input argument #4</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.SaveAsMatFile3VectorsUnique(System.Int32,System.Object,System.Object,System.Object,System.Object,System.Object)">
             <summary>
             Provides the standard 5-input Object interface to the SaveAsMatFile3VectorsUnique
             M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="inArray">Input argument #1</param>
             <param name="inArray2">Input argument #2</param>
             <param name="inArray3">Input argument #3</param>
             <param name="newFileName">Input argument #4</param>
             <param name="newVarName">Input argument #5</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.SaveAsMatFile3VectorsUnique(System.Int32,System.Object[]@,System.Object[],System.Object[])">
             <summary>
             Provides an interface for the SaveAsMatFile3VectorsUnique function in which the
             input and output
             arguments are specified as an array of Objects.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of Object output arguments</param>
             <param name= "argsIn">Array of Object input arguments</param>
             <param name= "varArgsIn">Array of Object representing variable input
             arguments</param>
            
        </member>
        <member name="M:mPhysNative.Class1.SaveAsMatFile4Vectors">
             <summary>
             Provides a single output, 0-input Objectinterface to the SaveAsMatFile4Vectors
             M-function.
             </summary>
             <remarks>
             </remarks>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.SaveAsMatFile4Vectors(System.Object)">
             <summary>
             Provides a single output, 1-input Objectinterface to the SaveAsMatFile4Vectors
             M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="inArray">Input argument #1</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.SaveAsMatFile4Vectors(System.Object,System.Object)">
             <summary>
             Provides a single output, 2-input Objectinterface to the SaveAsMatFile4Vectors
             M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="inArray">Input argument #1</param>
             <param name="inArray2">Input argument #2</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.SaveAsMatFile4Vectors(System.Object,System.Object,System.Object)">
             <summary>
             Provides a single output, 3-input Objectinterface to the SaveAsMatFile4Vectors
             M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="inArray">Input argument #1</param>
             <param name="inArray2">Input argument #2</param>
             <param name="inArray3">Input argument #3</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.SaveAsMatFile4Vectors(System.Object,System.Object,System.Object,System.Object)">
             <summary>
             Provides a single output, 4-input Objectinterface to the SaveAsMatFile4Vectors
             M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="inArray">Input argument #1</param>
             <param name="inArray2">Input argument #2</param>
             <param name="inArray3">Input argument #3</param>
             <param name="inArray4">Input argument #4</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.SaveAsMatFile4Vectors(System.Object,System.Object,System.Object,System.Object,System.Object)">
             <summary>
             Provides a single output, 5-input Objectinterface to the SaveAsMatFile4Vectors
             M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="inArray">Input argument #1</param>
             <param name="inArray2">Input argument #2</param>
             <param name="inArray3">Input argument #3</param>
             <param name="inArray4">Input argument #4</param>
             <param name="newFileName">Input argument #5</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.SaveAsMatFile4Vectors(System.Int32)">
             <summary>
             Provides the standard 0-input Object interface to the SaveAsMatFile4Vectors
             M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.SaveAsMatFile4Vectors(System.Int32,System.Object)">
             <summary>
             Provides the standard 1-input Object interface to the SaveAsMatFile4Vectors
             M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="inArray">Input argument #1</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.SaveAsMatFile4Vectors(System.Int32,System.Object,System.Object)">
             <summary>
             Provides the standard 2-input Object interface to the SaveAsMatFile4Vectors
             M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="inArray">Input argument #1</param>
             <param name="inArray2">Input argument #2</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.SaveAsMatFile4Vectors(System.Int32,System.Object,System.Object,System.Object)">
             <summary>
             Provides the standard 3-input Object interface to the SaveAsMatFile4Vectors
             M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="inArray">Input argument #1</param>
             <param name="inArray2">Input argument #2</param>
             <param name="inArray3">Input argument #3</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.SaveAsMatFile4Vectors(System.Int32,System.Object,System.Object,System.Object,System.Object)">
             <summary>
             Provides the standard 4-input Object interface to the SaveAsMatFile4Vectors
             M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="inArray">Input argument #1</param>
             <param name="inArray2">Input argument #2</param>
             <param name="inArray3">Input argument #3</param>
             <param name="inArray4">Input argument #4</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.SaveAsMatFile4Vectors(System.Int32,System.Object,System.Object,System.Object,System.Object,System.Object)">
             <summary>
             Provides the standard 5-input Object interface to the SaveAsMatFile4Vectors
             M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="inArray">Input argument #1</param>
             <param name="inArray2">Input argument #2</param>
             <param name="inArray3">Input argument #3</param>
             <param name="inArray4">Input argument #4</param>
             <param name="newFileName">Input argument #5</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.SaveAsMatFile4Vectors(System.Int32,System.Object[]@,System.Object[],System.Object[])">
             <summary>
             Provides an interface for the SaveAsMatFile4Vectors function in which the input
             and output
             arguments are specified as an array of Objects.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of Object output arguments</param>
             <param name= "argsIn">Array of Object input arguments</param>
             <param name= "varArgsIn">Array of Object representing variable input
             arguments</param>
            
        </member>
        <member name="M:mPhysNative.Class1.sec2time">
             <summary>
             Provides a single output, 0-input Objectinterface to the sec2time M-function.
             </summary>
             <remarks>
             M-Documentation:
             convert seconds to hh:mm:ss.s format
             timeFormat = sec2time(numSecs);
             </remarks>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.sec2time(System.Object)">
             <summary>
             Provides a single output, 1-input Objectinterface to the sec2time M-function.
             </summary>
             <remarks>
             M-Documentation:
             convert seconds to hh:mm:ss.s format
             timeFormat = sec2time(numSecs);
             </remarks>
             <param name="numSecs">Input argument #1</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.sec2time(System.Int32)">
             <summary>
             Provides the standard 0-input Object interface to the sec2time M-function.
             </summary>
             <remarks>
             M-Documentation:
             convert seconds to hh:mm:ss.s format
             timeFormat = sec2time(numSecs);
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.sec2time(System.Int32,System.Object)">
             <summary>
             Provides the standard 1-input Object interface to the sec2time M-function.
             </summary>
             <remarks>
             M-Documentation:
             convert seconds to hh:mm:ss.s format
             timeFormat = sec2time(numSecs);
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="numSecs">Input argument #1</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.sec2time(System.Int32,System.Object[]@,System.Object[],System.Object[])">
             <summary>
             Provides an interface for the sec2time function in which the input and output
             arguments are specified as an array of Objects.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             M-Documentation:
             convert seconds to hh:mm:ss.s format
             timeFormat = sec2time(numSecs);
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of Object output arguments</param>
             <param name= "argsIn">Array of Object input arguments</param>
             <param name= "varArgsIn">Array of Object representing variable input
             arguments</param>
            
        </member>
        <member name="M:mPhysNative.Class1.sendFilenamesToScope">
             <summary>
             Provides a void output, 0-input Objectinterface to the sendFilenamesToScope
             M-function.
             </summary>
             <remarks>
             M-Documentation:
             add files
             </remarks>
            
        </member>
        <member name="M:mPhysNative.Class1.sendFilenamesToScope(System.Object)">
             <summary>
             Provides a void output, 1-input Objectinterface to the sendFilenamesToScope
             M-function.
             </summary>
             <remarks>
             M-Documentation:
             add files
             </remarks>
             <param name="commaList">Input argument #1</param>
            
        </member>
        <member name="M:mPhysNative.Class1.sendFilenamesToScope(System.Int32)">
             <summary>
             Provides the standard 0-input Object interface to the sendFilenamesToScope
             M-function.
             </summary>
             <remarks>
             M-Documentation:
             add files
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.sendFilenamesToScope(System.Int32,System.Object)">
             <summary>
             Provides the standard 1-input Object interface to the sendFilenamesToScope
             M-function.
             </summary>
             <remarks>
             M-Documentation:
             add files
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="commaList">Input argument #1</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.sendFilenamesToScope(System.Int32,System.Object[]@,System.Object[],System.Object[])">
             <summary>
             Provides an interface for the sendFilenamesToScope function in which the input
             and output
             arguments are specified as an array of Objects.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             M-Documentation:
             add files
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of Object output arguments</param>
             <param name= "argsIn">Array of Object input arguments</param>
             <param name= "varArgsIn">Array of Object representing variable input
             arguments</param>
            
        </member>
        <member name="M:mPhysNative.Class1.sendFilenamesToScopeNoRefresh">
             <summary>
             Provides a void output, 0-input Objectinterface to the
             sendFilenamesToScopeNoRefresh M-function.
             </summary>
             <remarks>
             M-Documentation:
             add files
             </remarks>
            
        </member>
        <member name="M:mPhysNative.Class1.sendFilenamesToScopeNoRefresh(System.Object)">
             <summary>
             Provides a void output, 1-input Objectinterface to the
             sendFilenamesToScopeNoRefresh M-function.
             </summary>
             <remarks>
             M-Documentation:
             add files
             </remarks>
             <param name="commaList">Input argument #1</param>
            
        </member>
        <member name="M:mPhysNative.Class1.sendFilenamesToScopeNoRefresh(System.Int32)">
             <summary>
             Provides the standard 0-input Object interface to the
             sendFilenamesToScopeNoRefresh M-function.
             </summary>
             <remarks>
             M-Documentation:
             add files
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.sendFilenamesToScopeNoRefresh(System.Int32,System.Object)">
             <summary>
             Provides the standard 1-input Object interface to the
             sendFilenamesToScopeNoRefresh M-function.
             </summary>
             <remarks>
             M-Documentation:
             add files
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="commaList">Input argument #1</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.sendFilenamesToScopeNoRefresh(System.Int32,System.Object[]@,System.Object[],System.Object[])">
             <summary>
             Provides an interface for the sendFilenamesToScopeNoRefresh function in which the
             input and output
             arguments are specified as an array of Objects.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             M-Documentation:
             add files
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of Object output arguments</param>
             <param name= "argsIn">Array of Object input arguments</param>
             <param name= "varArgsIn">Array of Object representing variable input
             arguments</param>
            
        </member>
        <member name="M:mPhysNative.Class1.sendMessage">
             <summary>
             Provides a void output, 0-input Objectinterface to the sendMessage M-function.
             </summary>
             <remarks>
             </remarks>
            
        </member>
        <member name="M:mPhysNative.Class1.sendMessage(System.Object)">
             <summary>
             Provides a void output, 1-input Objectinterface to the sendMessage M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="message">Input argument #1</param>
            
        </member>
        <member name="M:mPhysNative.Class1.sendMessage(System.Int32)">
             <summary>
             Provides the standard 0-input Object interface to the sendMessage M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.sendMessage(System.Int32,System.Object)">
             <summary>
             Provides the standard 1-input Object interface to the sendMessage M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="message">Input argument #1</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.sendMessage(System.Int32,System.Object[]@,System.Object[],System.Object[])">
             <summary>
             Provides an interface for the sendMessage function in which the input and output
             arguments are specified as an array of Objects.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of Object output arguments</param>
             <param name= "argsIn">Array of Object input arguments</param>
             <param name= "varArgsIn">Array of Object representing variable input
             arguments</param>
            
        </member>
        <member name="M:mPhysNative.Class1.sendText">
             <summary>
             Provides a void output, 0-input Objectinterface to the sendText M-function.
             </summary>
             <remarks>
             M-Documentation:
             add files
             </remarks>
            
        </member>
        <member name="M:mPhysNative.Class1.sendText(System.Object)">
             <summary>
             Provides a void output, 1-input Objectinterface to the sendText M-function.
             </summary>
             <remarks>
             M-Documentation:
             add files
             </remarks>
             <param name="commaList">Input argument #1</param>
            
        </member>
        <member name="M:mPhysNative.Class1.sendText(System.Int32)">
             <summary>
             Provides the standard 0-input Object interface to the sendText M-function.
             </summary>
             <remarks>
             M-Documentation:
             add files
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.sendText(System.Int32,System.Object)">
             <summary>
             Provides the standard 1-input Object interface to the sendText M-function.
             </summary>
             <remarks>
             M-Documentation:
             add files
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="commaList">Input argument #1</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.sendText(System.Int32,System.Object[]@,System.Object[],System.Object[])">
             <summary>
             Provides an interface for the sendText function in which the input and output
             arguments are specified as an array of Objects.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             M-Documentation:
             add files
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of Object output arguments</param>
             <param name= "argsIn">Array of Object input arguments</param>
             <param name= "varArgsIn">Array of Object representing variable input
             arguments</param>
            
        </member>
        <member name="M:mPhysNative.Class1.SendToMatlab">
             <summary>
             Provides a single output, 0-input Objectinterface to the SendToMatlab M-function.
             </summary>
             <remarks>
             </remarks>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.SendToMatlab(System.Object)">
             <summary>
             Provides a single output, 1-input Objectinterface to the SendToMatlab M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="inArray">Input argument #1</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.SendToMatlab(System.Object,System.Object)">
             <summary>
             Provides a single output, 2-input Objectinterface to the SendToMatlab M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="inArray">Input argument #1</param>
             <param name="newVarName">Input argument #2</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.SendToMatlab(System.Int32)">
             <summary>
             Provides the standard 0-input Object interface to the SendToMatlab M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.SendToMatlab(System.Int32,System.Object)">
             <summary>
             Provides the standard 1-input Object interface to the SendToMatlab M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="inArray">Input argument #1</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.SendToMatlab(System.Int32,System.Object,System.Object)">
             <summary>
             Provides the standard 2-input Object interface to the SendToMatlab M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="inArray">Input argument #1</param>
             <param name="newVarName">Input argument #2</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.SendToMatlab(System.Int32,System.Object[]@,System.Object[],System.Object[])">
             <summary>
             Provides an interface for the SendToMatlab function in which the input and output
             arguments are specified as an array of Objects.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of Object output arguments</param>
             <param name= "argsIn">Array of Object input arguments</param>
             <param name= "varArgsIn">Array of Object representing variable input
             arguments</param>
            
        </member>
        <member name="M:mPhysNative.Class1.setAxisLabels">
             <summary>
             Provides a void output, 0-input Objectinterface to the setAxisLabels M-function.
             </summary>
             <remarks>
             </remarks>
            
        </member>
        <member name="M:mPhysNative.Class1.setAxisLabels(System.Object)">
             <summary>
             Provides a void output, 1-input Objectinterface to the setAxisLabels M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="axisHandle">Input argument #1</param>
            
        </member>
        <member name="M:mPhysNative.Class1.setAxisLabels(System.Int32)">
             <summary>
             Provides the standard 0-input Object interface to the setAxisLabels M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.setAxisLabels(System.Int32,System.Object)">
             <summary>
             Provides the standard 1-input Object interface to the setAxisLabels M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="axisHandle">Input argument #1</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.setAxisLabels(System.Int32,System.Object[]@,System.Object[],System.Object[])">
             <summary>
             Provides an interface for the setAxisLabels function in which the input and
             output
             arguments are specified as an array of Objects.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of Object output arguments</param>
             <param name= "argsIn">Array of Object input arguments</param>
             <param name= "varArgsIn">Array of Object representing variable input
             arguments</param>
            
        </member>
        <member name="M:mPhysNative.Class1.sfigure">
             <summary>
             Provides a single output, 0-input Objectinterface to the sfigure M-function.
             </summary>
             <remarks>
             M-Documentation:
             SFIGURE  Create figure window (minus annoying focus-theft).
             Usage is identical to figure.
             Daniel Eaton, 2005
             See also figure
             </remarks>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.sfigure(System.Object)">
             <summary>
             Provides a single output, 1-input Objectinterface to the sfigure M-function.
             </summary>
             <remarks>
             M-Documentation:
             SFIGURE  Create figure window (minus annoying focus-theft).
             Usage is identical to figure.
             Daniel Eaton, 2005
             See also figure
             </remarks>
             <param name="h_in1">Input argument #1</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.sfigure(System.Int32)">
             <summary>
             Provides the standard 0-input Object interface to the sfigure M-function.
             </summary>
             <remarks>
             M-Documentation:
             SFIGURE  Create figure window (minus annoying focus-theft).
             Usage is identical to figure.
             Daniel Eaton, 2005
             See also figure
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.sfigure(System.Int32,System.Object)">
             <summary>
             Provides the standard 1-input Object interface to the sfigure M-function.
             </summary>
             <remarks>
             M-Documentation:
             SFIGURE  Create figure window (minus annoying focus-theft).
             Usage is identical to figure.
             Daniel Eaton, 2005
             See also figure
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="h_in1">Input argument #1</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.sfigure(System.Int32,System.Object[]@,System.Object[],System.Object[])">
             <summary>
             Provides an interface for the sfigure function in which the input and output
             arguments are specified as an array of Objects.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             M-Documentation:
             SFIGURE  Create figure window (minus annoying focus-theft).
             Usage is identical to figure.
             Daniel Eaton, 2005
             See also figure
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of Object output arguments</param>
             <param name= "argsIn">Array of Object input arguments</param>
             <param name= "varArgsIn">Array of Object representing variable input
             arguments</param>
            
        </member>
        <member name="M:mPhysNative.Class1.SGfilterBen">
             <summary>
             Provides a single output, 0-input Objectinterface to the SGfilterBen M-function.
             </summary>
             <remarks>
             </remarks>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.SGfilterBen(System.Object)">
             <summary>
             Provides a single output, 1-input Objectinterface to the SGfilterBen M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="InVector">Input argument #1</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.SGfilterBen(System.Object,System.Object)">
             <summary>
             Provides a single output, 2-input Objectinterface to the SGfilterBen M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="InVector">Input argument #1</param>
             <param name="PolyOrder">Input argument #2</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.SGfilterBen(System.Object,System.Object,System.Object)">
             <summary>
             Provides a single output, 3-input Objectinterface to the SGfilterBen M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="InVector">Input argument #1</param>
             <param name="PolyOrder">Input argument #2</param>
             <param name="FrameSize">Input argument #3</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.SGfilterBen(System.Int32)">
             <summary>
             Provides the standard 0-input Object interface to the SGfilterBen M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.SGfilterBen(System.Int32,System.Object)">
             <summary>
             Provides the standard 1-input Object interface to the SGfilterBen M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="InVector">Input argument #1</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.SGfilterBen(System.Int32,System.Object,System.Object)">
             <summary>
             Provides the standard 2-input Object interface to the SGfilterBen M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="InVector">Input argument #1</param>
             <param name="PolyOrder">Input argument #2</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.SGfilterBen(System.Int32,System.Object,System.Object,System.Object)">
             <summary>
             Provides the standard 3-input Object interface to the SGfilterBen M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="InVector">Input argument #1</param>
             <param name="PolyOrder">Input argument #2</param>
             <param name="FrameSize">Input argument #3</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.SGfilterBen(System.Int32,System.Object[]@,System.Object[],System.Object[])">
             <summary>
             Provides an interface for the SGfilterBen function in which the input and output
             arguments are specified as an array of Objects.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of Object output arguments</param>
             <param name= "argsIn">Array of Object input arguments</param>
             <param name= "varArgsIn">Array of Object representing variable input
             arguments</param>
            
        </member>
        <member name="M:mPhysNative.Class1.showEvents">
             <summary>
             Provides a void output, 0-input Objectinterface to the showEvents M-function.
             </summary>
             <remarks>
             M-Documentation:
             show the events for a given axis along the top of the axis
             </remarks>
            
        </member>
        <member name="M:mPhysNative.Class1.showEvents(System.Object)">
             <summary>
             Provides a void output, 1-input Objectinterface to the showEvents M-function.
             </summary>
             <remarks>
             M-Documentation:
             show the events for a given axis along the top of the axis
             </remarks>
             <param name="axisHandle">Input argument #1</param>
            
        </member>
        <member name="M:mPhysNative.Class1.showEvents(System.Int32)">
             <summary>
             Provides the standard 0-input Object interface to the showEvents M-function.
             </summary>
             <remarks>
             M-Documentation:
             show the events for a given axis along the top of the axis
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.showEvents(System.Int32,System.Object)">
             <summary>
             Provides the standard 1-input Object interface to the showEvents M-function.
             </summary>
             <remarks>
             M-Documentation:
             show the events for a given axis along the top of the axis
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="axisHandle">Input argument #1</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.showEvents(System.Int32,System.Object[]@,System.Object[],System.Object[])">
             <summary>
             Provides an interface for the showEvents function in which the input and output
             arguments are specified as an array of Objects.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             M-Documentation:
             show the events for a given axis along the top of the axis
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of Object output arguments</param>
             <param name= "argsIn">Array of Object input arguments</param>
             <param name= "varArgsIn">Array of Object representing variable input
             arguments</param>
            
        </member>
        <member name="M:mPhysNative.Class1.showFFT">
             <summary>
             Provides a single output, 0-input Objectinterface to the showFFT M-function.
             </summary>
             <remarks>
             M-Documentation:
             displays power spectrum of data
             coefficients = showFFT(data, samplingFreq in Hz);
             defaults:
             samplingFreq = 5000 Hz
             </remarks>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.showFFT(System.Object)">
             <summary>
             Provides a single output, 1-input Objectinterface to the showFFT M-function.
             </summary>
             <remarks>
             M-Documentation:
             displays power spectrum of data
             coefficients = showFFT(data, samplingFreq in Hz);
             defaults:
             samplingFreq = 5000 Hz
             </remarks>
             <param name="dataIn">Input argument #1</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.showFFT(System.Object,System.Object)">
             <summary>
             Provides a single output, 2-input Objectinterface to the showFFT M-function.
             </summary>
             <remarks>
             M-Documentation:
             displays power spectrum of data
             coefficients = showFFT(data, samplingFreq in Hz);
             defaults:
             samplingFreq = 5000 Hz
             </remarks>
             <param name="dataIn">Input argument #1</param>
             <param name="samplingRate">Input argument #2</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.showFFT(System.Object,System.Object,System.Object)">
             <summary>
             Provides a single output, 3-input Objectinterface to the showFFT M-function.
             </summary>
             <remarks>
             M-Documentation:
             displays power spectrum of data
             coefficients = showFFT(data, samplingFreq in Hz);
             defaults:
             samplingFreq = 5000 Hz
             </remarks>
             <param name="dataIn">Input argument #1</param>
             <param name="samplingRate">Input argument #2</param>
             <param name="figureName">Input argument #3</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.showFFT(System.Int32)">
             <summary>
             Provides the standard 0-input Object interface to the showFFT M-function.
             </summary>
             <remarks>
             M-Documentation:
             displays power spectrum of data
             coefficients = showFFT(data, samplingFreq in Hz);
             defaults:
             samplingFreq = 5000 Hz
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.showFFT(System.Int32,System.Object)">
             <summary>
             Provides the standard 1-input Object interface to the showFFT M-function.
             </summary>
             <remarks>
             M-Documentation:
             displays power spectrum of data
             coefficients = showFFT(data, samplingFreq in Hz);
             defaults:
             samplingFreq = 5000 Hz
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="dataIn">Input argument #1</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.showFFT(System.Int32,System.Object,System.Object)">
             <summary>
             Provides the standard 2-input Object interface to the showFFT M-function.
             </summary>
             <remarks>
             M-Documentation:
             displays power spectrum of data
             coefficients = showFFT(data, samplingFreq in Hz);
             defaults:
             samplingFreq = 5000 Hz
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="dataIn">Input argument #1</param>
             <param name="samplingRate">Input argument #2</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.showFFT(System.Int32,System.Object,System.Object,System.Object)">
             <summary>
             Provides the standard 3-input Object interface to the showFFT M-function.
             </summary>
             <remarks>
             M-Documentation:
             displays power spectrum of data
             coefficients = showFFT(data, samplingFreq in Hz);
             defaults:
             samplingFreq = 5000 Hz
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="dataIn">Input argument #1</param>
             <param name="samplingRate">Input argument #2</param>
             <param name="figureName">Input argument #3</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.showFFT(System.Int32,System.Object[]@,System.Object[],System.Object[])">
             <summary>
             Provides an interface for the showFFT function in which the input and output
             arguments are specified as an array of Objects.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             M-Documentation:
             displays power spectrum of data
             coefficients = showFFT(data, samplingFreq in Hz);
             defaults:
             samplingFreq = 5000 Hz
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of Object output arguments</param>
             <param name= "argsIn">Array of Object input arguments</param>
             <param name= "varArgsIn">Array of Object representing variable input
             arguments</param>
            
        </member>
        <member name="M:mPhysNative.Class1.showFrameMarker">
             <summary>
             Provides a void output, 0-input Objectinterface to the showFrameMarker
             M-function.
             </summary>
             <remarks>
             M-Documentation:
             deal with frame marker if present
             </remarks>
            
        </member>
        <member name="M:mPhysNative.Class1.showFrameMarker(System.Object)">
             <summary>
             Provides a void output, 1-input Objectinterface to the showFrameMarker
             M-function.
             </summary>
             <remarks>
             M-Documentation:
             deal with frame marker if present
             </remarks>
             <param name="axisHandle">Input argument #1</param>
            
        </member>
        <member name="M:mPhysNative.Class1.showFrameMarker(System.Int32)">
             <summary>
             Provides the standard 0-input Object interface to the showFrameMarker M-function.
             </summary>
             <remarks>
             M-Documentation:
             deal with frame marker if present
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.showFrameMarker(System.Int32,System.Object)">
             <summary>
             Provides the standard 1-input Object interface to the showFrameMarker M-function.
             </summary>
             <remarks>
             M-Documentation:
             deal with frame marker if present
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="axisHandle">Input argument #1</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.showFrameMarker(System.Int32,System.Object[]@,System.Object[],System.Object[])">
             <summary>
             Provides an interface for the showFrameMarker function in which the input and
             output
             arguments are specified as an array of Objects.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             M-Documentation:
             deal with frame marker if present
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of Object output arguments</param>
             <param name= "argsIn">Array of Object input arguments</param>
             <param name= "varArgsIn">Array of Object representing variable input
             arguments</param>
            
        </member>
        <member name="M:mPhysNative.Class1.showStims">
             <summary>
             Provides a void output, 0-input Objectinterface to the showStims M-function.
             </summary>
             <remarks>
             M-Documentation:
             show TTL stimuli if they are blanked
             modified by BWS on 12/8/08
             </remarks>
            
        </member>
        <member name="M:mPhysNative.Class1.showStims(System.Object)">
             <summary>
             Provides a void output, 1-input Objectinterface to the showStims M-function.
             </summary>
             <remarks>
             M-Documentation:
             show TTL stimuli if they are blanked
             modified by BWS on 12/8/08
             </remarks>
             <param name="figHandle">Input argument #1</param>
            
        </member>
        <member name="M:mPhysNative.Class1.showStims(System.Object,System.Object)">
             <summary>
             Provides a void output, 2-input Objectinterface to the showStims M-function.
             </summary>
             <remarks>
             M-Documentation:
             show TTL stimuli if they are blanked
             modified by BWS on 12/8/08
             </remarks>
             <param name="figHandle">Input argument #1</param>
             <param name="showLegend">Input argument #2</param>
            
        </member>
        <member name="M:mPhysNative.Class1.showStims(System.Int32)">
             <summary>
             Provides the standard 0-input Object interface to the showStims M-function.
             </summary>
             <remarks>
             M-Documentation:
             show TTL stimuli if they are blanked
             modified by BWS on 12/8/08
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.showStims(System.Int32,System.Object)">
             <summary>
             Provides the standard 1-input Object interface to the showStims M-function.
             </summary>
             <remarks>
             M-Documentation:
             show TTL stimuli if they are blanked
             modified by BWS on 12/8/08
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="figHandle">Input argument #1</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.showStims(System.Int32,System.Object,System.Object)">
             <summary>
             Provides the standard 2-input Object interface to the showStims M-function.
             </summary>
             <remarks>
             M-Documentation:
             show TTL stimuli if they are blanked
             modified by BWS on 12/8/08
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="figHandle">Input argument #1</param>
             <param name="showLegend">Input argument #2</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.showStims(System.Int32,System.Object[]@,System.Object[],System.Object[])">
             <summary>
             Provides an interface for the showStims function in which the input and output
             arguments are specified as an array of Objects.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             M-Documentation:
             show TTL stimuli if they are blanked
             modified by BWS on 12/8/08
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of Object output arguments</param>
             <param name= "argsIn">Array of Object input arguments</param>
             <param name= "varArgsIn">Array of Object representing variable input
             arguments</param>
            
        </member>
        <member name="M:mPhysNative.Class1.startInterprocess">
             <summary>
             Provides a void output, 0-input Objectinterface to the startInterprocess
             M-function.
             </summary>
             <remarks>
             </remarks>
            
        </member>
        <member name="M:mPhysNative.Class1.startInterprocess(System.Int32)">
             <summary>
             Provides the standard 0-input Object interface to the startInterprocess
             M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.startInterprocess(System.Int32,System.Object[]@,System.Object[],System.Object[])">
             <summary>
             Provides an interface for the startInterprocess function in which the input and
             output
             arguments are specified as an array of Objects.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of Object output arguments</param>
             <param name= "argsIn">Array of Object input arguments</param>
             <param name= "varArgsIn">Array of Object representing variable input
             arguments</param>
            
        </member>
        <member name="M:mPhysNative.Class1.testDrawLine">
             <summary>
             Provides a void output, 0-input Objectinterface to the testDrawLine M-function.
             </summary>
             <remarks>
             </remarks>
            
        </member>
        <member name="M:mPhysNative.Class1.testDrawLine(System.Int32)">
             <summary>
             Provides the standard 0-input Object interface to the testDrawLine M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.testDrawLine(System.Int32,System.Object[]@,System.Object[],System.Object[])">
             <summary>
             Provides an interface for the testDrawLine function in which the input and output
             arguments are specified as an array of Objects.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of Object output arguments</param>
             <param name= "argsIn">Array of Object input arguments</param>
             <param name= "varArgsIn">Array of Object representing variable input
             arguments</param>
            
        </member>
        <member name="M:mPhysNative.Class1.testMessage">
             <summary>
             Provides a void output, 0-input Objectinterface to the testMessage M-function.
             </summary>
             <remarks>
             </remarks>
            
        </member>
        <member name="M:mPhysNative.Class1.testMessage(System.Int32)">
             <summary>
             Provides the standard 0-input Object interface to the testMessage M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.testMessage(System.Int32,System.Object[]@,System.Object[],System.Object[])">
             <summary>
             Provides an interface for the testMessage function in which the input and output
             arguments are specified as an array of Objects.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of Object output arguments</param>
             <param name= "argsIn">Array of Object input arguments</param>
             <param name= "varArgsIn">Array of Object representing variable input
             arguments</param>
            
        </member>
        <member name="M:mPhysNative.Class1.testMessageString">
             <summary>
             Provides a void output, 0-input Objectinterface to the testMessageString
             M-function.
             </summary>
             <remarks>
             </remarks>
            
        </member>
        <member name="M:mPhysNative.Class1.testMessageString(System.Object)">
             <summary>
             Provides a void output, 1-input Objectinterface to the testMessageString
             M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="inString">Input argument #1</param>
            
        </member>
        <member name="M:mPhysNative.Class1.testMessageString(System.Int32)">
             <summary>
             Provides the standard 0-input Object interface to the testMessageString
             M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.testMessageString(System.Int32,System.Object)">
             <summary>
             Provides the standard 1-input Object interface to the testMessageString
             M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="inString">Input argument #1</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.testMessageString(System.Int32,System.Object[]@,System.Object[],System.Object[])">
             <summary>
             Provides an interface for the testMessageString function in which the input and
             output
             arguments are specified as an array of Objects.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of Object output arguments</param>
             <param name= "argsIn">Array of Object input arguments</param>
             <param name= "varArgsIn">Array of Object representing variable input
             arguments</param>
            
        </member>
        <member name="M:mPhysNative.Class1.timeControl">
             <summary>
             Provides a single output, 0-input Objectinterface to the timeControl M-function.
             </summary>
             <remarks>
             </remarks>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.timeControl(System.Object)">
             <summary>
             Provides a single output, 1-input Objectinterface to the timeControl M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="right">Input argument #1</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.timeControl(System.Object,System.Object)">
             <summary>
             Provides a single output, 2-input Objectinterface to the timeControl M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="right">Input argument #1</param>
             <param name="bottom">Input argument #2</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.timeControl(System.Int32)">
             <summary>
             Provides the standard 0-input Object interface to the timeControl M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.timeControl(System.Int32,System.Object)">
             <summary>
             Provides the standard 1-input Object interface to the timeControl M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="right">Input argument #1</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.timeControl(System.Int32,System.Object,System.Object)">
             <summary>
             Provides the standard 2-input Object interface to the timeControl M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="right">Input argument #1</param>
             <param name="bottom">Input argument #2</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.timeControl(System.Int32,System.Object[]@,System.Object[],System.Object[])">
             <summary>
             Provides an interface for the timeControl function in which the input and output
             arguments are specified as an array of Objects.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of Object output arguments</param>
             <param name= "argsIn">Array of Object input arguments</param>
             <param name= "varArgsIn">Array of Object representing variable input
             arguments</param>
            
        </member>
        <member name="M:mPhysNative.Class1.VBmedian">
             <summary>
             Provides a single output, 0-input Objectinterface to the VBmedian M-function.
             </summary>
             <remarks>
             </remarks>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.VBmedian(System.Object)">
             <summary>
             Provides a single output, 1-input Objectinterface to the VBmedian M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="inArray">Input argument #1</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.VBmedian(System.Int32)">
             <summary>
             Provides the standard 0-input Object interface to the VBmedian M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.VBmedian(System.Int32,System.Object)">
             <summary>
             Provides the standard 1-input Object interface to the VBmedian M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="inArray">Input argument #1</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.VBmedian(System.Int32,System.Object[]@,System.Object[],System.Object[])">
             <summary>
             Provides an interface for the VBmedian function in which the input and output
             arguments are specified as an array of Objects.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of Object output arguments</param>
             <param name= "argsIn">Array of Object input arguments</param>
             <param name= "varArgsIn">Array of Object representing variable input
             arguments</param>
            
        </member>
        <member name="M:mPhysNative.Class1.VBmovingMedian">
             <summary>
             Provides a single output, 0-input Objectinterface to the VBmovingMedian
             M-function.
             </summary>
             <remarks>
             </remarks>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.VBmovingMedian(System.Object)">
             <summary>
             Provides a single output, 1-input Objectinterface to the VBmovingMedian
             M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="inArray">Input argument #1</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.VBmovingMedian(System.Object,System.Object)">
             <summary>
             Provides a single output, 2-input Objectinterface to the VBmovingMedian
             M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="inArray">Input argument #1</param>
             <param name="windowSize">Input argument #2</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.VBmovingMedian(System.Int32)">
             <summary>
             Provides the standard 0-input Object interface to the VBmovingMedian M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.VBmovingMedian(System.Int32,System.Object)">
             <summary>
             Provides the standard 1-input Object interface to the VBmovingMedian M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="inArray">Input argument #1</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.VBmovingMedian(System.Int32,System.Object,System.Object)">
             <summary>
             Provides the standard 2-input Object interface to the VBmovingMedian M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="inArray">Input argument #1</param>
             <param name="windowSize">Input argument #2</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.VBmovingMedian(System.Int32,System.Object[]@,System.Object[],System.Object[])">
             <summary>
             Provides an interface for the VBmovingMedian function in which the input and
             output
             arguments are specified as an array of Objects.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of Object output arguments</param>
             <param name= "argsIn">Array of Object input arguments</param>
             <param name= "varArgsIn">Array of Object representing variable input
             arguments</param>
            
        </member>
        <member name="M:mPhysNative.Class1.wakeUp">
             <summary>
             Provides a void output, 0-input Objectinterface to the wakeUp M-function.
             </summary>
             <remarks>
             </remarks>
            
        </member>
        <member name="M:mPhysNative.Class1.wakeUp(System.Int32)">
             <summary>
             Provides the standard 0-input Object interface to the wakeUp M-function.
             </summary>
             <remarks>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.wakeUp(System.Int32,System.Object[]@,System.Object[],System.Object[])">
             <summary>
             Provides an interface for the wakeUp function in which the input and output
             arguments are specified as an array of Objects.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of Object output arguments</param>
             <param name= "argsIn">Array of Object input arguments</param>
             <param name= "varArgsIn">Array of Object representing variable input
             arguments</param>
            
        </member>
        <member name="M:mPhysNative.Class1.whichChannel">
             <summary>
             Provides a single output, 0-input Objectinterface to the whichChannel M-function.
             </summary>
             <remarks>
             M-Documentation:
             determine which channel a given amp is using
             </remarks>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.whichChannel(System.Object)">
             <summary>
             Provides a single output, 1-input Objectinterface to the whichChannel M-function.
             </summary>
             <remarks>
             M-Documentation:
             determine which channel a given amp is using
             </remarks>
             <param name="protocol">Input argument #1</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.whichChannel(System.Object,System.Object)">
             <summary>
             Provides a single output, 2-input Objectinterface to the whichChannel M-function.
             </summary>
             <remarks>
             M-Documentation:
             determine which channel a given amp is using
             </remarks>
             <param name="protocol">Input argument #1</param>
             <param name="ampNum">Input argument #2</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.whichChannel(System.Object,System.Object,System.Object)">
             <summary>
             Provides a single output, 3-input Objectinterface to the whichChannel M-function.
             </summary>
             <remarks>
             M-Documentation:
             determine which channel a given amp is using
             </remarks>
             <param name="protocol">Input argument #1</param>
             <param name="ampNum">Input argument #2</param>
             <param name="channelType">Input argument #3</param>
             <returns>An Object containing the first output argument.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.whichChannel(System.Int32)">
             <summary>
             Provides the standard 0-input Object interface to the whichChannel M-function.
             </summary>
             <remarks>
             M-Documentation:
             determine which channel a given amp is using
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.whichChannel(System.Int32,System.Object)">
             <summary>
             Provides the standard 1-input Object interface to the whichChannel M-function.
             </summary>
             <remarks>
             M-Documentation:
             determine which channel a given amp is using
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="protocol">Input argument #1</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.whichChannel(System.Int32,System.Object,System.Object)">
             <summary>
             Provides the standard 2-input Object interface to the whichChannel M-function.
             </summary>
             <remarks>
             M-Documentation:
             determine which channel a given amp is using
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="protocol">Input argument #1</param>
             <param name="ampNum">Input argument #2</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.whichChannel(System.Int32,System.Object,System.Object,System.Object)">
             <summary>
             Provides the standard 3-input Object interface to the whichChannel M-function.
             </summary>
             <remarks>
             M-Documentation:
             determine which channel a given amp is using
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="protocol">Input argument #1</param>
             <param name="ampNum">Input argument #2</param>
             <param name="channelType">Input argument #3</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.whichChannel(System.Int32,System.Object[]@,System.Object[],System.Object[])">
             <summary>
             Provides an interface for the whichChannel function in which the input and output
             arguments are specified as an array of Objects.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             M-Documentation:
             determine which channel a given amp is using
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of Object output arguments</param>
             <param name= "argsIn">Array of Object input arguments</param>
             <param name= "varArgsIn">Array of Object representing variable input
             arguments</param>
            
        </member>
        <member name="M:mPhysNative.Class1.whiteNoiseFile">
             <summary>
             Provides a void output, 0-input Objectinterface to the whiteNoiseFile M-function.
             </summary>
             <remarks>
             M-Documentation:
             whiteNoiseFile(5000, 10, 1500, [100 1000], 'R:\whiteNoise.txt');
             sampling rate in Hz
             duration in seconds
             peakToPeak in pA before low pass filtering
             cutoff is two element cutoff [passStart blockStart] 
             </remarks>
            
        </member>
        <member name="M:mPhysNative.Class1.whiteNoiseFile(System.Object)">
             <summary>
             Provides a void output, 1-input Objectinterface to the whiteNoiseFile M-function.
             </summary>
             <remarks>
             M-Documentation:
             whiteNoiseFile(5000, 10, 1500, [100 1000], 'R:\whiteNoise.txt');
             sampling rate in Hz
             duration in seconds
             peakToPeak in pA before low pass filtering
             cutoff is two element cutoff [passStart blockStart] 
             </remarks>
             <param name="samplingRate">Input argument #1</param>
            
        </member>
        <member name="M:mPhysNative.Class1.whiteNoiseFile(System.Object,System.Object)">
             <summary>
             Provides a void output, 2-input Objectinterface to the whiteNoiseFile M-function.
             </summary>
             <remarks>
             M-Documentation:
             whiteNoiseFile(5000, 10, 1500, [100 1000], 'R:\whiteNoise.txt');
             sampling rate in Hz
             duration in seconds
             peakToPeak in pA before low pass filtering
             cutoff is two element cutoff [passStart blockStart] 
             </remarks>
             <param name="samplingRate">Input argument #1</param>
             <param name="duration">Input argument #2</param>
            
        </member>
        <member name="M:mPhysNative.Class1.whiteNoiseFile(System.Object,System.Object,System.Object)">
             <summary>
             Provides a void output, 3-input Objectinterface to the whiteNoiseFile M-function.
             </summary>
             <remarks>
             M-Documentation:
             whiteNoiseFile(5000, 10, 1500, [100 1000], 'R:\whiteNoise.txt');
             sampling rate in Hz
             duration in seconds
             peakToPeak in pA before low pass filtering
             cutoff is two element cutoff [passStart blockStart] 
             </remarks>
             <param name="samplingRate">Input argument #1</param>
             <param name="duration">Input argument #2</param>
             <param name="peakToPeak">Input argument #3</param>
            
        </member>
        <member name="M:mPhysNative.Class1.whiteNoiseFile(System.Object,System.Object,System.Object,System.Object)">
             <summary>
             Provides a void output, 4-input Objectinterface to the whiteNoiseFile M-function.
             </summary>
             <remarks>
             M-Documentation:
             whiteNoiseFile(5000, 10, 1500, [100 1000], 'R:\whiteNoise.txt');
             sampling rate in Hz
             duration in seconds
             peakToPeak in pA before low pass filtering
             cutoff is two element cutoff [passStart blockStart] 
             </remarks>
             <param name="samplingRate">Input argument #1</param>
             <param name="duration">Input argument #2</param>
             <param name="peakToPeak">Input argument #3</param>
             <param name="cutoff">Input argument #4</param>
            
        </member>
        <member name="M:mPhysNative.Class1.whiteNoiseFile(System.Object,System.Object,System.Object,System.Object,System.Object)">
             <summary>
             Provides a void output, 5-input Objectinterface to the whiteNoiseFile M-function.
             </summary>
             <remarks>
             M-Documentation:
             whiteNoiseFile(5000, 10, 1500, [100 1000], 'R:\whiteNoise.txt');
             sampling rate in Hz
             duration in seconds
             peakToPeak in pA before low pass filtering
             cutoff is two element cutoff [passStart blockStart] 
             </remarks>
             <param name="samplingRate">Input argument #1</param>
             <param name="duration">Input argument #2</param>
             <param name="peakToPeak">Input argument #3</param>
             <param name="cutoff">Input argument #4</param>
             <param name="fileName">Input argument #5</param>
            
        </member>
        <member name="M:mPhysNative.Class1.whiteNoiseFile(System.Int32)">
             <summary>
             Provides the standard 0-input Object interface to the whiteNoiseFile M-function.
             </summary>
             <remarks>
             M-Documentation:
             whiteNoiseFile(5000, 10, 1500, [100 1000], 'R:\whiteNoise.txt');
             sampling rate in Hz
             duration in seconds
             peakToPeak in pA before low pass filtering
             cutoff is two element cutoff [passStart blockStart] 
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.whiteNoiseFile(System.Int32,System.Object)">
             <summary>
             Provides the standard 1-input Object interface to the whiteNoiseFile M-function.
             </summary>
             <remarks>
             M-Documentation:
             whiteNoiseFile(5000, 10, 1500, [100 1000], 'R:\whiteNoise.txt');
             sampling rate in Hz
             duration in seconds
             peakToPeak in pA before low pass filtering
             cutoff is two element cutoff [passStart blockStart] 
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="samplingRate">Input argument #1</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.whiteNoiseFile(System.Int32,System.Object,System.Object)">
             <summary>
             Provides the standard 2-input Object interface to the whiteNoiseFile M-function.
             </summary>
             <remarks>
             M-Documentation:
             whiteNoiseFile(5000, 10, 1500, [100 1000], 'R:\whiteNoise.txt');
             sampling rate in Hz
             duration in seconds
             peakToPeak in pA before low pass filtering
             cutoff is two element cutoff [passStart blockStart] 
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="samplingRate">Input argument #1</param>
             <param name="duration">Input argument #2</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.whiteNoiseFile(System.Int32,System.Object,System.Object,System.Object)">
             <summary>
             Provides the standard 3-input Object interface to the whiteNoiseFile M-function.
             </summary>
             <remarks>
             M-Documentation:
             whiteNoiseFile(5000, 10, 1500, [100 1000], 'R:\whiteNoise.txt');
             sampling rate in Hz
             duration in seconds
             peakToPeak in pA before low pass filtering
             cutoff is two element cutoff [passStart blockStart] 
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="samplingRate">Input argument #1</param>
             <param name="duration">Input argument #2</param>
             <param name="peakToPeak">Input argument #3</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.whiteNoiseFile(System.Int32,System.Object,System.Object,System.Object,System.Object)">
             <summary>
             Provides the standard 4-input Object interface to the whiteNoiseFile M-function.
             </summary>
             <remarks>
             M-Documentation:
             whiteNoiseFile(5000, 10, 1500, [100 1000], 'R:\whiteNoise.txt');
             sampling rate in Hz
             duration in seconds
             peakToPeak in pA before low pass filtering
             cutoff is two element cutoff [passStart blockStart] 
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="samplingRate">Input argument #1</param>
             <param name="duration">Input argument #2</param>
             <param name="peakToPeak">Input argument #3</param>
             <param name="cutoff">Input argument #4</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.whiteNoiseFile(System.Int32,System.Object,System.Object,System.Object,System.Object,System.Object)">
             <summary>
             Provides the standard 5-input Object interface to the whiteNoiseFile M-function.
             </summary>
             <remarks>
             M-Documentation:
             whiteNoiseFile(5000, 10, 1500, [100 1000], 'R:\whiteNoise.txt');
             sampling rate in Hz
             duration in seconds
             peakToPeak in pA before low pass filtering
             cutoff is two element cutoff [passStart blockStart] 
             </remarks>
             <param name="numArgsOut">The number of output arguments to return.</param>
             <param name="samplingRate">Input argument #1</param>
             <param name="duration">Input argument #2</param>
             <param name="peakToPeak">Input argument #3</param>
             <param name="cutoff">Input argument #4</param>
             <param name="fileName">Input argument #5</param>
             <returns>An Array of length "numArgsOut" containing the output
             arguments.</returns>
            
        </member>
        <member name="M:mPhysNative.Class1.whiteNoiseFile(System.Int32,System.Object[]@,System.Object[],System.Object[])">
             <summary>
             Provides an interface for the whiteNoiseFile function in which the input and
             output
             arguments are specified as an array of Objects.
             </summary>
             <remarks>
             This method will allocate and return by reference the output argument
             array.<newpara></newpara>
             M-Documentation:
             whiteNoiseFile(5000, 10, 1500, [100 1000], 'R:\whiteNoise.txt');
             sampling rate in Hz
             duration in seconds
             peakToPeak in pA before low pass filtering
             cutoff is two element cutoff [passStart blockStart] 
             </remarks>
             <param name="numArgsOut">The number of output arguments to return</param>
             <param name= "argsOut">Array of Object output arguments</param>
             <param name= "argsIn">Array of Object input arguments</param>
             <param name= "varArgsIn">Array of Object representing variable input
             arguments</param>
            
        </member>
        <member name="M:mPhysNative.Class1.WaitForFiguresToDie">
             <summary>
             This method will cause a MATLAB figure window to behave as a modal dialog box.
             The method will not return until all the figure windows associated with this
             component have been closed.
             </summary>
             <remarks>
             An application should only call this method when required to keep the
             MATLAB figure window from disappearing.  Other techniques, such as calling
             Console.ReadLine() from the application should be considered where
             possible.</remarks>
            
        </member>
    </members>
</doc>
